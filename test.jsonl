{"instruction": "Translate this to ASP code", "input": "vertexs 2 and 1 are connected\nvertexs 3 and 2 are connected\nThe colour azure exists\nvertexs 1 and 3 are connected\nThe colour pink exists\nThe colour mint exists\nvertexs 2 and 3 are connected\nvertexs 3 and 1 are connected\nThere are vertexs 1..32\nvertexs can't be assigned more than one of the colours", "output": "attached_to(2,G) :- vertex(2), vertex(G), G = 1.\nattached_to(3,G) :- vertex(3), vertex(G), G = 2.\ncolour(\"azure\").\nattached_to(1,G) :- vertex(1), vertex(G), G = 3.\ncolour(\"pink\").\ncolour(\"mint\").\nattached_to(2,G) :- vertex(2), vertex(G), G = 3.\nattached_to(3,G) :- vertex(3), vertex(G), G = 1.\nvertex(1..32).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 1 and node G where G is 3\nIt can't be the case that a node has more than one colour\nOut of the colours available, there is Emerald\nThere is a connection between node 2 and node G where G is 1\nThere is a connection between node 3 and node G where G is 2\nThere is a connection between node 1 and node G where G is 2\nOut of the colour available, there is red\nThere is a connection between node 2 and node G where G is 3\nIt is not allowed for adjacent nodes to share the same colour\nThere is a connection between node 3 and node G where G is 1", "output": "attached_to(1,G) :- node(1), node(G), G = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\ncolour(\"Emerald\").\nattached_to(2,G) :- node(2), node(G), G = 1.\nattached_to(3,G) :- node(3), node(G), G = 2.\nattached_to(1,G) :- node(1), node(G), G = 2.\ncolour(\"red\").\nattached_to(2,G) :- node(2), node(G), G = 3.\n:- attached_to(G,Y), node(G), assigned_to(G,C), node(Y), assigned_to(Y,C), color(C).\nattached_to(3,G) :- node(3), node(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "olive is a hue\nelement 3 and element 1 are connected\ncyan is a hue\nelement 2 and element 3 are connected\nA element goes from 1..32\nEvery element can only be assigned a single colour\nscarlet is a hue\nelement 2 and element 1 are connected\nelement 3 and element 2 are connected\nelement 1 and element 3 are connected", "output": "hue(\"olive\").\nattached_to(3,C) :- element(3), element(C), C = 1.\nhue(\"cyan\").\nattached_to(2,C) :- element(2), element(C), C = 3.\nelement(1..32).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nhue(\"scarlet\").\nattached_to(2,C) :- element(2), element(C), C = 1.\nattached_to(3,C) :- element(3), element(C), C = 2.\nattached_to(1,C) :- element(1), element(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "Connected elements cannot have the same colour\nEmerald is a shade\nelement 2 and element 3 are connected\nelement 2 and element 1 are connected\nA element goes from 1..3\nazure is a shade\nelement 3 and element 1 are connected", "output": ":- adjacent_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nshade(\"Emerald\").\nadjacent_to(2,X) :- element(2), element(X), X = 3.\nadjacent_to(2,X) :- element(2), element(X), X = 1.\nelement(1..3).\nshade(\"azure\").\nadjacent_to(3,X) :- element(3), element(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "olive is a hue\nA vertex goes from 1..3\nvertex 1 and vertex 2 are connected\nvertex 3 and vertex 2 are connected\ncobalt is a hue\nvertex 1 and vertex 3 are connected\nvertex 2 and vertex 1 are connected\nvertex 3 and vertex 1 are connected", "output": "hue(\"olive\").\nvertex(1..3).\nlinked_to(1,X) :- vertex(1), vertex(X), X = 2.\nlinked_to(3,X) :- vertex(3), vertex(X), X = 2.\nhue(\"cobalt\").\nlinked_to(1,X) :- vertex(1), vertex(X), X = 3.\nlinked_to(2,X) :- vertex(2), vertex(X), X = 1.\nlinked_to(3,X) :- vertex(3), vertex(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "Out of the colours available, there is cyan\nThere is a connection between element 3 and element C where C is 1\nThere is a connection between element 2 and element C where C is 3\nThere is a connection between element 1 and element C where C is 2\nOut of the colour available, there is scarlet\nOut of the colours available, there is Emerald\nThere are 32 elements\nIt is not allowed for adjacent elements to share the same colour", "output": "colour(\"cyan\").\nattached_to(3,C) :- element(3), element(C), C = 1.\nattached_to(2,C) :- element(2), element(C), C = 3.\nattached_to(1,C) :- element(1), element(C), C = 2.\ncolour(\"scarlet\").\ncolour(\"Emerald\").\nelement(1..32).\n:- attached_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "point 1 and point 3 are connected\npoint 3 and point 2 are connected\npoint 2 and point 1 are connected\npoint 1 and point 2 are connected\ngreen is a shade\nEvery point can only be assigned a single colour\nConnected points cannot have the same colour\nA point goes from 1..14\nmaroon is a shade", "output": "joined_to(1,X) :- point(1), point(X), X = 3.\njoined_to(3,X) :- point(3), point(X), X = 2.\njoined_to(2,X) :- point(2), point(X), X = 1.\njoined_to(1,X) :- point(1), point(X), X = 2.\nshade(\"green\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\n:- joined_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\npoint(1..14).\nshade(\"maroon\")."}
{"instruction": "Translate this to ASP code", "input": "node 2 and node 3 are connected\nEvery node can only be assigned a single colour\nnode 3 and node 2 are connected\nnode 3 and node 1 are connected\nmaroon is a hue\nblue is a hue\njade is a hue\nnode 2 and node 1 are connected", "output": "adjacent_to(2,C) :- node(2), node(C), C = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nadjacent_to(3,C) :- node(3), node(C), C = 2.\nadjacent_to(3,C) :- node(3), node(C), C = 1.\nhue(\"maroon\").\nhue(\"blue\").\nhue(\"jade\").\nadjacent_to(2,C) :- node(2), node(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "Out of the shade available, there is crimson\nThere are 32 elements\nThere is a connection between element 1 and element A where A is 2\nIt can't be the case that a element has more than one colour\nThere is a connection between element 3 and element A where A is 1\nThere is a connection between element 3 and element A where A is 2\nOut of the shades available, there is green", "output": "shade(\"crimson\").\nelement(1..32).\njoined_to(1,A) :- element(1), element(A), A = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\njoined_to(3,A) :- element(3), element(A), A = 1.\njoined_to(3,A) :- element(3), element(A), A = 2.\nshade(\"green\")."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 1 and vertex C where C is 2\nOut of the colours available, there is Emerald\nOut of the colours available, there is azure\nThere is a connection between vertex 1 and vertex C where C is 3\nThere is a connection between vertex 3 and vertex C where C is 1\nThere is a connection between vertex 2 and vertex C where C is 1\nThere are 3 vertexs\nIt can't be the case that a vertex has more than one colour\nOut of the colour available, there is red\nIt is not allowed for adjacent vertexs to share the same colour\nThere is a connection between vertex 2 and vertex C where C is 3", "output": "attached_to(1,C) :- vertex(1), vertex(C), C = 2.\ncolour(\"Emerald\").\ncolour(\"azure\").\nattached_to(1,C) :- vertex(1), vertex(C), C = 3.\nattached_to(3,C) :- vertex(3), vertex(C), C = 1.\nattached_to(2,C) :- vertex(2), vertex(C), C = 1.\nvertex(1..3).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\ncolour(\"red\").\n:- attached_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C).\nattached_to(2,C) :- vertex(2), vertex(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "nodes can't be assigned more than one of the colours\nnodes 2 and 3 are connected\nnodes 3 and 1 are connected\nnodes 1 and 3 are connected\nnodes 2 and 1 are connected\nThe shade maroon exists\nnodes 3 and 2 are connected\nThe shade azure exists", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nadjacent_to(2,A) :- node(2), node(A), A = 3.\nadjacent_to(3,A) :- node(3), node(A), A = 1.\nadjacent_to(1,A) :- node(1), node(A), A = 3.\nadjacent_to(2,A) :- node(2), node(A), A = 1.\nshade(\"maroon\").\nadjacent_to(3,A) :- node(3), node(A), A = 2.\nshade(\"azure\")."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent elements to share the same colour\nThere is a connection between element 2 and element X where X is 3\nOut of the shade available, there is pink\nThere are 32 elements", "output": ":- attached_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nattached_to(2,X) :- element(2), element(X), X = 3.\nshade(\"pink\").\nelement(1..32)."}
{"instruction": "Translate this to ASP code", "input": "elements 1 and 2 are connected\nelements 2 and 3 are connected\nelements 3 and 2 are connected\nelements can't be assigned more than one of the colours\nelements 1 and 3 are connected\nelements 3 and 1 are connected", "output": "linked_to(1,X) :- element(1), element(X), X = 2.\nlinked_to(2,X) :- element(2), element(X), X = 3.\nlinked_to(3,X) :- element(3), element(X), X = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nlinked_to(1,X) :- element(1), element(X), X = 3.\nlinked_to(3,X) :- element(3), element(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "If two elements are connected, they must have different colours\nThe shade cobalt exists\nelements 1 and 2 are connected\nelements 1 and 3 are connected\nelements 3 and 2 are connected\nThere are elements 1..14\nThe shade purple exists\nelements can't be assigned more than one of the colours\nelements 2 and 3 are connected", "output": ":- linked_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C).\nshade(\"cobalt\").\nlinked_to(1,A) :- element(1), element(A), A = 2.\nlinked_to(1,A) :- element(1), element(A), A = 3.\nlinked_to(3,A) :- element(3), element(A), A = 2.\nelement(1..14).\nshade(\"purple\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nlinked_to(2,A) :- element(2), element(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "point 3 and point 2 are connected\npink is a shade\npoint 1 and point 3 are connected\npoint 2 and point 1 are connected\nEvery point can only be assigned a single colour\nConnected points cannot have the same colour\npoint 2 and point 3 are connected", "output": "linked_to(3,X) :- point(3), point(X), X = 2.\nshade(\"pink\").\nlinked_to(1,X) :- point(1), point(X), X = 3.\nlinked_to(2,X) :- point(2), point(X), X = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\n:- linked_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\nlinked_to(2,X) :- point(2), point(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 2 and node C where C is 3\nThere is a connection between node 3 and node C where C is 2\nThere is a connection between node 2 and node C where C is 1\nOut of the hues available, there is skyBlue\nOut of the hue available, there is maroon\nThere is a connection between node 3 and node C where C is 1", "output": "joined_to(2,C) :- node(2), node(C), C = 3.\njoined_to(3,C) :- node(3), node(C), C = 2.\njoined_to(2,C) :- node(2), node(C), C = 1.\nhue(\"skyBlue\").\nhue(\"maroon\").\njoined_to(3,C) :- node(3), node(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "point 3 and point 1 are connected\njade is a hue\npoint 1 and point 3 are connected\nEvery point can only be assigned a single colour\nA point goes from 1..3\nblue is a hue\nConnected points cannot have the same colour", "output": "connected_to(3,A) :- point(3), point(A), A = 1.\nhue(\"jade\").\nconnected_to(1,A) :- point(1), point(A), A = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\npoint(1..3).\nhue(\"blue\").\n:- connected_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between element 1 and element X where X is 2\nThere are 3 elements\nThere is a connection between element 2 and element X where X is 1\nOut of the hues available, there is skyBlue\nIt is not allowed for adjacent elements to share the same colour\nThere is a connection between element 1 and element X where X is 3", "output": "attached_to(1,X) :- element(1), element(X), X = 2.\nelement(1..3).\nattached_to(2,X) :- element(2), element(X), X = 1.\nhue(\"skyBlue\").\n:- attached_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nattached_to(1,X) :- element(1), element(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 2 and node C where C is 1\nThere is a connection between node 3 and node C where C is 2\nOut of the colour available, there is crimson\nIt is not allowed for adjacent nodes to share the same colour\nIt can't be the case that a node has more than one colour", "output": "attached_to(2,C) :- node(2), node(C), C = 1.\nattached_to(3,C) :- node(3), node(C), C = 2.\ncolour(\"crimson\").\n:- attached_to(C,Y), node(C), assigned_to(C,C), node(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "Connected points cannot have the same colour\npoint 2 and point 1 are connected\nA point goes from 1..14\nEmerald is a hue\nEvery point can only be assigned a single colour\nazure is a hue", "output": ":- attached_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\nattached_to(2,A) :- point(2), point(A), A = 1.\npoint(1..14).\nhue(\"Emerald\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nhue(\"azure\")."}
{"instruction": "Translate this to ASP code", "input": "A point goes from 1..32\npoint 2 and point 1 are connected\npoint 1 and point 3 are connected\npoint 1 and point 2 are connected\ngreen is a shade\npurple is a shade", "output": "point(1..32).\njoined_to(2,X) :- point(2), point(X), X = 1.\njoined_to(1,X) :- point(1), point(X), X = 3.\njoined_to(1,X) :- point(1), point(X), X = 2.\nshade(\"green\").\nshade(\"purple\")."}
{"instruction": "Translate this to ASP code", "input": "point 1 and point 2 are connected\nA point goes from 1..3\npurple is a hue\nConnected points cannot have the same colour\npoint 2 and point 1 are connected\npoint 1 and point 3 are connected\nEvery point can only be assigned a single colour\ncyan is a hue\npoint 2 and point 3 are connected\nolive is a hue\npoint 3 and point 2 are connected", "output": "joined_to(1,C) :- point(1), point(C), C = 2.\npoint(1..3).\nhue(\"purple\").\n:- joined_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\njoined_to(2,C) :- point(2), point(C), C = 1.\njoined_to(1,C) :- point(1), point(C), C = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nhue(\"cyan\").\njoined_to(2,C) :- point(2), point(C), C = 3.\nhue(\"olive\").\njoined_to(3,C) :- point(3), point(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "node 1 and node 2 are connected\nazure is a colour\nnode 3 and node 2 are connected\nolive is a colour\nEvery node can only be assigned a single colour", "output": "attached_to(1,X) :- node(1), node(X), X = 2.\ncolour(\"azure\").\nattached_to(3,X) :- node(3), node(X), X = 2.\ncolour(\"olive\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 3 and point C where C is 1\nThere are 32 points\nThere is a connection between point 3 and point C where C is 2\nOut of the colours available, there is cyan\nThere is a connection between point 1 and point C where C is 2", "output": "linked_to(3,C) :- point(3), point(C), C = 1.\npoint(1..32).\nlinked_to(3,C) :- point(3), point(C), C = 2.\ncolour(\"cyan\").\nlinked_to(1,C) :- point(1), point(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "A element goes from 1..14\nelement 2 and element 3 are connected\nelement 3 and element 1 are connected\nEmerald is a shade", "output": "element(1..14).\nattached_to(2,G) :- element(2), element(G), G = 3.\nattached_to(3,G) :- element(3), element(G), G = 1.\nshade(\"Emerald\")."}
{"instruction": "Translate this to ASP code", "input": "element 3 and element 2 are connected\ncyan is a shade\nelement 1 and element 3 are connected\nA element goes from 1..14\nred is a shade", "output": "linked_to(3,A) :- element(3), element(A), A = 2.\nshade(\"cyan\").\nlinked_to(1,A) :- element(1), element(A), A = 3.\nelement(1..14).\nshade(\"red\")."}
{"instruction": "Translate this to ASP code", "input": "crimson is a shade\nConnected points cannot have the same colour\npoint 1 and point 2 are connected\nlimeGreen is a shade\npoint 2 and point 1 are connected\npoint 1 and point 3 are connected\ncyan is a shade\npoint 3 and point 2 are connected\npoint 2 and point 3 are connected\npoint 3 and point 1 are connected\nA point goes from 1..32", "output": "shade(\"crimson\").\n:- linked_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\nlinked_to(1,X) :- point(1), point(X), X = 2.\nshade(\"limeGreen\").\nlinked_to(2,X) :- point(2), point(X), X = 1.\nlinked_to(1,X) :- point(1), point(X), X = 3.\nshade(\"cyan\").\nlinked_to(3,X) :- point(3), point(X), X = 2.\nlinked_to(2,X) :- point(2), point(X), X = 3.\nlinked_to(3,X) :- point(3), point(X), X = 1.\npoint(1..32)."}
{"instruction": "Translate this to ASP code", "input": "Out of the shade available, there is crimson\nOut of the shades available, there is blue\nThere is a connection between point 2 and point A where A is 1\nThere are 14 points\nThere is a connection between point 3 and point A where A is 1\nIt is not allowed for adjacent points to share the same colour\nThere is a connection between point 2 and point A where A is 3\nThere is a connection between point 1 and point A where A is 3", "output": "shade(\"crimson\").\nshade(\"blue\").\njoined_to(2,A) :- point(2), point(A), A = 1.\npoint(1..14).\njoined_to(3,A) :- point(3), point(A), A = 1.\n:- joined_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\njoined_to(2,A) :- point(2), point(A), A = 3.\njoined_to(1,A) :- point(1), point(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "Connected nodes cannot have the same colour\nnode 3 and node 2 are connected\nEmerald is a hue\nEvery node can only be assigned a single colour", "output": ":- attached_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\nattached_to(3,X) :- node(3), node(X), X = 2.\nhue(\"Emerald\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "vertex 1 and vertex 2 are connected\nvertex 1 and vertex 3 are connected\nA vertex goes from 1..14\ncyan is a hue\nvertex 2 and vertex 1 are connected\npurple is a hue\nvertex 3 and vertex 2 are connected\nvertex 2 and vertex 3 are connected\ngreen is a hue\nConnected vertexs cannot have the same colour\nEvery vertex can only be assigned a single colour", "output": "connected_to(1,A) :- vertex(1), vertex(A), A = 2.\nconnected_to(1,A) :- vertex(1), vertex(A), A = 3.\nvertex(1..14).\nhue(\"cyan\").\nconnected_to(2,A) :- vertex(2), vertex(A), A = 1.\nhue(\"purple\").\nconnected_to(3,A) :- vertex(3), vertex(A), A = 2.\nconnected_to(2,A) :- vertex(2), vertex(A), A = 3.\nhue(\"green\").\n:- connected_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "The hue skyBlue exists\nThe hue maroon exists\nelements 1 and 2 are connected\nelements can't be assigned more than one of the colours\nIf two elements are connected, they must have different colours", "output": "hue(\"skyBlue\").\nhue(\"maroon\").\njoined_to(1,A) :- element(1), element(A), A = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\n:- joined_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 2 and vertex X where X is 1\nThere is a connection between vertex 3 and vertex X where X is 1\nOut of the colours available, there is jade\nThere is a connection between vertex 1 and vertex X where X is 3\nOut of the colour available, there is maroon\nThere are 14 vertexs\nThere is a connection between vertex 2 and vertex X where X is 3\nIt can't be the case that a vertex has more than one colour\nThere is a connection between vertex 1 and vertex X where X is 2\nIt is not allowed for adjacent vertexs to share the same colour\nThere is a connection between vertex 3 and vertex X where X is 2", "output": "connected_to(2,X) :- vertex(2), vertex(X), X = 1.\nconnected_to(3,X) :- vertex(3), vertex(X), X = 1.\ncolour(\"jade\").\nconnected_to(1,X) :- vertex(1), vertex(X), X = 3.\ncolour(\"maroon\").\nvertex(1..14).\nconnected_to(2,X) :- vertex(2), vertex(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nconnected_to(1,X) :- vertex(1), vertex(X), X = 2.\n:- connected_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\nconnected_to(3,X) :- vertex(3), vertex(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "Out of the hues available, there is jade\nThere is a connection between element 2 and element X where X is 3\nThere are 14 elements\nOut of the hue available, there is pink\nIt can't be the case that a element has more than one colour\nIt is not allowed for adjacent elements to share the same colour", "output": "hue(\"jade\").\nattached_to(2,X) :- element(2), element(X), X = 3.\nelement(1..14).\nhue(\"pink\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\n:- attached_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "vertexs 2 and 1 are connected\nvertexs can't be assigned more than one of the colours\nvertexs 1 and 2 are connected\nvertexs 3 and 2 are connected\nThe hue mint exists\nThere are vertexs 1..32\nvertexs 3 and 1 are connected\nThe hue azure exists\nThe hue crimson exists", "output": "linked_to(2,G) :- vertex(2), vertex(G), G = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nlinked_to(1,G) :- vertex(1), vertex(G), G = 2.\nlinked_to(3,G) :- vertex(3), vertex(G), G = 2.\nhue(\"mint\").\nvertex(1..32).\nlinked_to(3,G) :- vertex(3), vertex(G), G = 1.\nhue(\"azure\").\nhue(\"crimson\")."}
{"instruction": "Translate this to ASP code", "input": "vertex 1 and vertex 3 are connected\nvertex 2 and vertex 1 are connected\nvertex 2 and vertex 3 are connected\nvertex 1 and vertex 2 are connected\nConnected vertexs cannot have the same colour\nlimeGreen is a shade\nA vertex goes from 1..3\nblue is a shade", "output": "linked_to(1,C) :- vertex(1), vertex(C), C = 3.\nlinked_to(2,C) :- vertex(2), vertex(C), C = 1.\nlinked_to(2,C) :- vertex(2), vertex(C), C = 3.\nlinked_to(1,C) :- vertex(1), vertex(C), C = 2.\n:- linked_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C).\nshade(\"limeGreen\").\nvertex(1..3).\nshade(\"blue\")."}
{"instruction": "Translate this to ASP code", "input": "A element goes from 1..14\nskyBlue is a hue\nelement 2 and element 1 are connected", "output": "element(1..14).\nhue(\"skyBlue\").\nattached_to(2,A) :- element(2), element(A), A = 1."}
{"instruction": "Translate this to ASP code", "input": "points 2 and 1 are connected\nThere are points 1..32\npoints 1 and 3 are connected\npoints 1 and 2 are connected\npoints 3 and 2 are connected\nIf two points are connected, they must have different colours\nThe colour cyan exists\nThe colour pink exists\npoints can't be assigned more than one of the colours\npoints 3 and 1 are connected\npoints 2 and 3 are connected", "output": "linked_to(2,A) :- point(2), point(A), A = 1.\npoint(1..32).\nlinked_to(1,A) :- point(1), point(A), A = 3.\nlinked_to(1,A) :- point(1), point(A), A = 2.\nlinked_to(3,A) :- point(3), point(A), A = 2.\n:- linked_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\ncolour(\"cyan\").\ncolour(\"pink\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nlinked_to(3,A) :- point(3), point(A), A = 1.\nlinked_to(2,A) :- point(2), point(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "Out of the colours available, there is cyan\nThere is a connection between vertex 2 and vertex A where A is 1\nIt is not allowed for adjacent vertexs to share the same colour\nThere are 32 vertexs\nThere is a connection between vertex 3 and vertex A where A is 1\nThere is a connection between vertex 3 and vertex A where A is 2\nOut of the colours available, there is jade\nThere is a connection between vertex 1 and vertex A where A is 2", "output": "colour(\"cyan\").\njoined_to(2,A) :- vertex(2), vertex(A), A = 1.\n:- joined_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\nvertex(1..32).\njoined_to(3,A) :- vertex(3), vertex(A), A = 1.\njoined_to(3,A) :- vertex(3), vertex(A), A = 2.\ncolour(\"jade\").\njoined_to(1,A) :- vertex(1), vertex(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "Every element can only be assigned a single colour\nEmerald is a shade\nelement 2 and element 3 are connected\nelement 2 and element 1 are connected\nelement 3 and element 1 are connected\nelement 3 and element 2 are connected\nelement 1 and element 3 are connected\nazure is a shade\nelement 1 and element 2 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nshade(\"Emerald\").\nconnected_to(2,A) :- element(2), element(A), A = 3.\nconnected_to(2,A) :- element(2), element(A), A = 1.\nconnected_to(3,A) :- element(3), element(A), A = 1.\nconnected_to(3,A) :- element(3), element(A), A = 2.\nconnected_to(1,A) :- element(1), element(A), A = 3.\nshade(\"azure\").\nconnected_to(1,A) :- element(1), element(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "skyBlue is a colour\npoint 3 and point 2 are connected\npoint 2 and point 3 are connected\nA point goes from 1..32\npoint 3 and point 1 are connected\nEvery point can only be assigned a single colour\nConnected points cannot have the same colour\npoint 2 and point 1 are connected\nscarlet is a colour\npoint 1 and point 2 are connected\njade is a colour", "output": "colour(\"skyBlue\").\njoined_to(3,G) :- point(3), point(G), G = 2.\njoined_to(2,G) :- point(2), point(G), G = 3.\npoint(1..32).\njoined_to(3,G) :- point(3), point(G), G = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\n:- joined_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\njoined_to(2,G) :- point(2), point(G), G = 1.\ncolour(\"scarlet\").\njoined_to(1,G) :- point(1), point(G), G = 2.\ncolour(\"jade\")."}
{"instruction": "Translate this to ASP code", "input": "A point goes from 1..3\npoint 3 and point 2 are connected\nazure is a shade\npurple is a shade\nConnected points cannot have the same colour\npoint 1 and point 3 are connected\npoint 2 and point 1 are connected\npoint 1 and point 2 are connected\npoint 3 and point 1 are connected\nEmerald is a shade", "output": "point(1..3).\nlinked_to(3,X) :- point(3), point(X), X = 2.\nshade(\"azure\").\nshade(\"purple\").\n:- linked_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\nlinked_to(1,X) :- point(1), point(X), X = 3.\nlinked_to(2,X) :- point(2), point(X), X = 1.\nlinked_to(1,X) :- point(1), point(X), X = 2.\nlinked_to(3,X) :- point(3), point(X), X = 1.\nshade(\"Emerald\")."}
{"instruction": "Translate this to ASP code", "input": "There are 14 elements\nOut of the shades available, there is jade\nThere is a connection between element 1 and element X where X is 2\nIt can't be the case that a element has more than one colour\nOut of the shades available, there is azure", "output": "element(1..14).\nshade(\"jade\").\nadjacent_to(1,X) :- element(1), element(X), X = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nshade(\"azure\")."}
{"instruction": "Translate this to ASP code", "input": "element 1 and element 3 are connected\ncobalt is a hue\nelement 1 and element 2 are connected\nelement 3 and element 2 are connected\nelement 2 and element 1 are connected\nConnected elements cannot have the same colour\nA element goes from 1..32\nlimeGreen is a hue\nEvery element can only be assigned a single colour", "output": "attached_to(1,C) :- element(1), element(C), C = 3.\nhue(\"cobalt\").\nattached_to(1,C) :- element(1), element(C), C = 2.\nattached_to(3,C) :- element(3), element(C), C = 2.\nattached_to(2,C) :- element(2), element(C), C = 1.\n:- attached_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C).\nelement(1..32).\nhue(\"limeGreen\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "skyBlue is a hue\ngreen is a hue\nelement 2 and element 1 are connected\ncrimson is a hue\nelement 3 and element 2 are connected\nConnected elements cannot have the same colour\nEvery element can only be assigned a single colour", "output": "hue(\"skyBlue\").\nhue(\"green\").\nattached_to(2,G) :- element(2), element(G), G = 1.\nhue(\"crimson\").\nattached_to(3,G) :- element(3), element(G), G = 2.\n:- attached_to(G,Y), element(G), assigned_to(G,C), element(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "node 3 and node 1 are connected\nA node goes from 1..32\nnode 2 and node 1 are connected\npink is a hue", "output": "linked_to(3,X) :- node(3), node(X), X = 1.\nnode(1..32).\nlinked_to(2,X) :- node(2), node(X), X = 1.\nhue(\"pink\")."}
{"instruction": "Translate this to ASP code", "input": "element 1 and element 3 are connected\nA element goes from 1..3\nConnected elements cannot have the same colour\nskyBlue is a colour\nelement 3 and element 1 are connected\nelement 2 and element 3 are connected\nelement 3 and element 2 are connected\ngreen is a colour\nelement 1 and element 2 are connected", "output": "connected_to(1,C) :- element(1), element(C), C = 3.\nelement(1..3).\n:- connected_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C).\ncolour(\"skyBlue\").\nconnected_to(3,C) :- element(3), element(C), C = 1.\nconnected_to(2,C) :- element(2), element(C), C = 3.\nconnected_to(3,C) :- element(3), element(C), C = 2.\ncolour(\"green\").\nconnected_to(1,C) :- element(1), element(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "node 2 and node 3 are connected\npink is a colour\nnode 3 and node 1 are connected\ncobalt is a colour\nnode 2 and node 1 are connected\nnode 1 and node 3 are connected\ngreen is a colour\nA node goes from 1..3\nnode 1 and node 2 are connected\nConnected nodes cannot have the same colour\nEvery node can only be assigned a single colour", "output": "attached_to(2,C) :- node(2), node(C), C = 3.\ncolour(\"pink\").\nattached_to(3,C) :- node(3), node(C), C = 1.\ncolour(\"cobalt\").\nattached_to(2,C) :- node(2), node(C), C = 1.\nattached_to(1,C) :- node(1), node(C), C = 3.\ncolour(\"green\").\nnode(1..3).\nattached_to(1,C) :- node(1), node(C), C = 2.\n:- attached_to(C,Y), node(C), assigned_to(C,C), node(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 2 and point X where X is 1\nIt is not allowed for adjacent points to share the same colour\nThere is a connection between point 1 and point X where X is 2\nThere is a connection between point 3 and point X where X is 2", "output": "joined_to(2,X) :- point(2), point(X), X = 1.\n:- joined_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\njoined_to(1,X) :- point(1), point(X), X = 2.\njoined_to(3,X) :- point(3), point(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "nodes 2 and 1 are connected\nThe shade pink exists", "output": "adjacent_to(2,A) :- node(2), node(A), A = 1.\nshade(\"pink\")."}
{"instruction": "Translate this to ASP code", "input": "points 2 and 3 are connected\npoints 2 and 1 are connected\npoints 1 and 2 are connected\npoints can't be assigned more than one of the colours\nThere are points 1..14\nThe colour pink exists\npoints 1 and 3 are connected\nIf two points are connected, they must have different colours\npoints 3 and 1 are connected\nThe colour azure exists\nThe colour limeGreen exists", "output": "adjacent_to(2,G) :- point(2), point(G), G = 3.\nadjacent_to(2,G) :- point(2), point(G), G = 1.\nadjacent_to(1,G) :- point(1), point(G), G = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\npoint(1..14).\ncolour(\"pink\").\nadjacent_to(1,G) :- point(1), point(G), G = 3.\n:- adjacent_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\nadjacent_to(3,G) :- point(3), point(G), G = 1.\ncolour(\"azure\").\ncolour(\"limeGreen\")."}
{"instruction": "Translate this to ASP code", "input": "vertexs 3 and 2 are connected\nThe colour scarlet exists\nThe colour jade exists\nThere are vertexs 1..3", "output": "linked_to(3,A) :- vertex(3), vertex(A), A = 2.\ncolour(\"scarlet\").\ncolour(\"jade\").\nvertex(1..3)."}
{"instruction": "Translate this to ASP code", "input": "Every point can only be assigned a single colour\npoint 2 and point 1 are connected\npoint 1 and point 3 are connected\nred is a hue", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nattached_to(2,G) :- point(2), point(G), G = 1.\nattached_to(1,G) :- point(1), point(G), G = 3.\nhue(\"red\")."}
{"instruction": "Translate this to ASP code", "input": "The colour cyan exists\npoints 2 and 3 are connected\npoints 1 and 3 are connected\nThe colour limeGreen exists", "output": "colour(\"cyan\").\nlinked_to(2,C) :- point(2), point(C), C = 3.\nlinked_to(1,C) :- point(1), point(C), C = 3.\ncolour(\"limeGreen\")."}
{"instruction": "Translate this to ASP code", "input": "The hue scarlet exists\nelements 3 and 1 are connected\nelements 2 and 3 are connected\nThere are elements 1..14", "output": "hue(\"scarlet\").\njoined_to(3,A) :- element(3), element(A), A = 1.\njoined_to(2,A) :- element(2), element(A), A = 3.\nelement(1..14)."}
{"instruction": "Translate this to ASP code", "input": "Out of the hues available, there is skyBlue\nThere is a connection between vertex 3 and vertex G where G is 1\nThere is a connection between vertex 1 and vertex G where G is 2\nThere is a connection between vertex 2 and vertex G where G is 1\nThere is a connection between vertex 3 and vertex G where G is 2\nThere are 32 vertexs", "output": "hue(\"skyBlue\").\nattached_to(3,G) :- vertex(3), vertex(G), G = 1.\nattached_to(1,G) :- vertex(1), vertex(G), G = 2.\nattached_to(2,G) :- vertex(2), vertex(G), G = 1.\nattached_to(3,G) :- vertex(3), vertex(G), G = 2.\nvertex(1..32)."}
{"instruction": "Translate this to ASP code", "input": "purple is a shade\nvertex 1 and vertex 3 are connected\nEvery vertex can only be assigned a single colour\nvertex 3 and vertex 1 are connected\nConnected vertexs cannot have the same colour\nA vertex goes from 1..14\nskyBlue is a shade\nvertex 1 and vertex 2 are connected\nvertex 2 and vertex 1 are connected\nvertex 2 and vertex 3 are connected\nlimeGreen is a shade", "output": "shade(\"purple\").\njoined_to(1,C) :- vertex(1), vertex(C), C = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\njoined_to(3,C) :- vertex(3), vertex(C), C = 1.\n:- joined_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C).\nvertex(1..14).\nshade(\"skyBlue\").\njoined_to(1,C) :- vertex(1), vertex(C), C = 2.\njoined_to(2,C) :- vertex(2), vertex(C), C = 1.\njoined_to(2,C) :- vertex(2), vertex(C), C = 3.\nshade(\"limeGreen\")."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between element 1 and element X where X is 2\nThere is a connection between element 2 and element X where X is 3\nThere is a connection between element 3 and element X where X is 2\nOut of the hues available, there is olive\nThere is a connection between element 2 and element X where X is 1\nIt is not allowed for adjacent elements to share the same colour\nOut of the hues available, there is azure\nIt can't be the case that a element has more than one colour\nThere is a connection between element 1 and element X where X is 3", "output": "attached_to(1,X) :- element(1), element(X), X = 2.\nattached_to(2,X) :- element(2), element(X), X = 3.\nattached_to(3,X) :- element(3), element(X), X = 2.\nhue(\"olive\").\nattached_to(2,X) :- element(2), element(X), X = 1.\n:- attached_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nhue(\"azure\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nattached_to(1,X) :- element(1), element(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "Out of the colour available, there is pink\nThere is a connection between point 3 and point C where C is 2\nThere is a connection between point 2 and point C where C is 3\nThere is a connection between point 3 and point C where C is 1\nOut of the colours available, there is cobalt\nIt can't be the case that a point has more than one colour\nOut of the colours available, there is limeGreen\nIt is not allowed for adjacent points to share the same colour\nThere is a connection between point 1 and point C where C is 2", "output": "colour(\"pink\").\nlinked_to(3,C) :- point(3), point(C), C = 2.\nlinked_to(2,C) :- point(2), point(C), C = 3.\nlinked_to(3,C) :- point(3), point(C), C = 1.\ncolour(\"cobalt\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\ncolour(\"limeGreen\").\n:- linked_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\nlinked_to(1,C) :- point(1), point(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "cyan is a shade\npoint 2 and point 3 are connected", "output": "shade(\"cyan\").\nadjacent_to(2,X) :- point(2), point(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "skyBlue is a shade\nmaroon is a shade\nvertex 1 and vertex 2 are connected\nvertex 2 and vertex 1 are connected\nEmerald is a shade\nA vertex goes from 1..3\nvertex 1 and vertex 3 are connected\nvertex 2 and vertex 3 are connected", "output": "shade(\"skyBlue\").\nshade(\"maroon\").\nlinked_to(1,G) :- vertex(1), vertex(G), G = 2.\nlinked_to(2,G) :- vertex(2), vertex(G), G = 1.\nshade(\"Emerald\").\nvertex(1..3).\nlinked_to(1,G) :- vertex(1), vertex(G), G = 3.\nlinked_to(2,G) :- vertex(2), vertex(G), G = 3."}
{"instruction": "Translate this to ASP code", "input": "Out of the colours available, there is jade\nThere is a connection between node 3 and node G where G is 1\nOut of the colour available, there is maroon\nThere is a connection between node 2 and node G where G is 3", "output": "colour(\"jade\").\nconnected_to(3,G) :- node(3), node(G), G = 1.\ncolour(\"maroon\").\nconnected_to(2,G) :- node(2), node(G), G = 3."}
{"instruction": "Translate this to ASP code", "input": "point 3 and point 1 are connected\nEvery point can only be assigned a single colour\npurple is a colour\npoint 2 and point 1 are connected\npoint 2 and point 3 are connected\npoint 1 and point 3 are connected\npoint 1 and point 2 are connected\nA point goes from 1..3\nolive is a colour", "output": "linked_to(3,A) :- point(3), point(A), A = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\ncolour(\"purple\").\nlinked_to(2,A) :- point(2), point(A), A = 1.\nlinked_to(2,A) :- point(2), point(A), A = 3.\nlinked_to(1,A) :- point(1), point(A), A = 3.\nlinked_to(1,A) :- point(1), point(A), A = 2.\npoint(1..3).\ncolour(\"olive\")."}
{"instruction": "Translate this to ASP code", "input": "nodes 3 and 2 are connected\nnodes 1 and 3 are connected\nThe hue green exists\nThere are nodes 1..3\nnodes 1 and 2 are connected\nThe hue azure exists\nnodes 2 and 3 are connected", "output": "connected_to(3,A) :- node(3), node(A), A = 2.\nconnected_to(1,A) :- node(1), node(A), A = 3.\nhue(\"green\").\nnode(1..3).\nconnected_to(1,A) :- node(1), node(A), A = 2.\nhue(\"azure\").\nconnected_to(2,A) :- node(2), node(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "elements 2 and 1 are connected\nThere are elements 1..14\nThe hue crimson exists\nelements 1 and 2 are connected\nThe hue skyBlue exists\nelements can't be assigned more than one of the colours\nIf two elements are connected, they must have different colours\nelements 1 and 3 are connected", "output": "adjacent_to(2,X) :- element(2), element(X), X = 1.\nelement(1..14).\nhue(\"crimson\").\nadjacent_to(1,X) :- element(1), element(X), X = 2.\nhue(\"skyBlue\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\n:- adjacent_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nadjacent_to(1,X) :- element(1), element(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 3 and node G where G is 1\nOut of the colour available, there is scarlet\nThere is a connection between node 2 and node G where G is 3\nThere is a connection between node 2 and node G where G is 1\nOut of the colours available, there is cobalt\nIt is not allowed for adjacent nodes to share the same colour\nThere are 3 nodes\nOut of the colours available, there is green\nThere is a connection between node 3 and node G where G is 2", "output": "linked_to(3,G) :- node(3), node(G), G = 1.\ncolour(\"scarlet\").\nlinked_to(2,G) :- node(2), node(G), G = 3.\nlinked_to(2,G) :- node(2), node(G), G = 1.\ncolour(\"cobalt\").\n:- linked_to(G,Y), node(G), assigned_to(G,C), node(Y), assigned_to(Y,C), color(C).\nnode(1..3).\ncolour(\"green\").\nlinked_to(3,G) :- node(3), node(G), G = 2."}
{"instruction": "Translate this to ASP code", "input": "It can't be the case that a vertex has more than one colour\nThere is a connection between vertex 2 and vertex C where C is 3\nOut of the shades available, there is limeGreen\nThere are 14 vertexs", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nlinked_to(2,C) :- vertex(2), vertex(C), C = 3.\nshade(\"limeGreen\").\nvertex(1..14)."}
{"instruction": "Translate this to ASP code", "input": "pink is a shade\nvertex 3 and vertex 2 are connected\nvertex 1 and vertex 2 are connected\nvertex 3 and vertex 1 are connected\nlimeGreen is a shade\nvertex 1 and vertex 3 are connected\nvertex 2 and vertex 1 are connected\nEvery vertex can only be assigned a single colour\nblue is a shade\nConnected vertexs cannot have the same colour", "output": "shade(\"pink\").\njoined_to(3,C) :- vertex(3), vertex(C), C = 2.\njoined_to(1,C) :- vertex(1), vertex(C), C = 2.\njoined_to(3,C) :- vertex(3), vertex(C), C = 1.\nshade(\"limeGreen\").\njoined_to(1,C) :- vertex(1), vertex(C), C = 3.\njoined_to(2,C) :- vertex(2), vertex(C), C = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nshade(\"blue\").\n:- joined_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "There are points 1..32\nIf two points are connected, they must have different colours\npoints can't be assigned more than one of the colours\npoints 3 and 1 are connected\npoints 2 and 1 are connected\nThe shade cobalt exists", "output": "point(1..32).\n:- joined_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\njoined_to(3,A) :- point(3), point(A), A = 1.\njoined_to(2,A) :- point(2), point(A), A = 1.\nshade(\"cobalt\")."}
{"instruction": "Translate this to ASP code", "input": "points 1 and 3 are connected\npoints 2 and 3 are connected\npoints 3 and 2 are connected\nIf two points are connected, they must have different colours\npoints 3 and 1 are connected\nThe hue red exists\npoints 1 and 2 are connected\nThere are points 1..14\npoints can't be assigned more than one of the colours\nThe hue cyan exists", "output": "attached_to(1,G) :- point(1), point(G), G = 3.\nattached_to(2,G) :- point(2), point(G), G = 3.\nattached_to(3,G) :- point(3), point(G), G = 2.\n:- attached_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\nattached_to(3,G) :- point(3), point(G), G = 1.\nhue(\"red\").\nattached_to(1,G) :- point(1), point(G), G = 2.\npoint(1..14).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nhue(\"cyan\")."}
{"instruction": "Translate this to ASP code", "input": "The hue mint exists\nnodes 1 and 2 are connected\nThere are nodes 1..32\nThe hue cobalt exists\nnodes 3 and 1 are connected\nnodes 2 and 1 are connected\nnodes 2 and 3 are connected\nnodes can't be assigned more than one of the colours\nnodes 3 and 2 are connected\nThe hue scarlet exists\nIf two nodes are connected, they must have different colours", "output": "hue(\"mint\").\nattached_to(1,C) :- node(1), node(C), C = 2.\nnode(1..32).\nhue(\"cobalt\").\nattached_to(3,C) :- node(3), node(C), C = 1.\nattached_to(2,C) :- node(2), node(C), C = 1.\nattached_to(2,C) :- node(2), node(C), C = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nattached_to(3,C) :- node(3), node(C), C = 2.\nhue(\"scarlet\").\n:- attached_to(C,Y), node(C), assigned_to(C,C), node(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent vertexs to share the same colour\nThere is a connection between vertex 3 and vertex A where A is 2\nOut of the hues available, there is cobalt\nThere is a connection between vertex 2 and vertex A where A is 3\nIt can't be the case that a vertex has more than one colour", "output": ":- adjacent_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\nadjacent_to(3,A) :- vertex(3), vertex(A), A = 2.\nhue(\"cobalt\").\nadjacent_to(2,A) :- vertex(2), vertex(A), A = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent nodes to share the same colour\nThere is a connection between node 3 and node A where A is 1\nThere is a connection between node 2 and node A where A is 1\nThere is a connection between node 1 and node A where A is 2\nOut of the shades available, there is azure\nThere is a connection between node 3 and node A where A is 2", "output": ":- linked_to(A,Y), node(A), assigned_to(A,C), node(Y), assigned_to(Y,C), color(C).\nlinked_to(3,A) :- node(3), node(A), A = 1.\nlinked_to(2,A) :- node(2), node(A), A = 1.\nlinked_to(1,A) :- node(1), node(A), A = 2.\nshade(\"azure\").\nlinked_to(3,A) :- node(3), node(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "A element goes from 1..3\nelement 2 and element 1 are connected\nelement 2 and element 3 are connected\nelement 3 and element 2 are connected\npink is a colour", "output": "element(1..3).\nattached_to(2,X) :- element(2), element(X), X = 1.\nattached_to(2,X) :- element(2), element(X), X = 3.\nattached_to(3,X) :- element(3), element(X), X = 2.\ncolour(\"pink\")."}
{"instruction": "Translate this to ASP code", "input": "Every element can only be assigned a single colour\nelement 2 and element 1 are connected\nelement 1 and element 3 are connected\nelement 2 and element 3 are connected\npurple is a colour\nConnected elements cannot have the same colour\nA element goes from 1..3", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nadjacent_to(2,X) :- element(2), element(X), X = 1.\nadjacent_to(1,X) :- element(1), element(X), X = 3.\nadjacent_to(2,X) :- element(2), element(X), X = 3.\ncolour(\"purple\").\n:- adjacent_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nelement(1..3)."}
{"instruction": "Translate this to ASP code", "input": "green is a colour\npoint 1 and point 2 are connected\npoint 1 and point 3 are connected\nEvery point can only be assigned a single colour\npoint 3 and point 1 are connected", "output": "colour(\"green\").\nconnected_to(1,G) :- point(1), point(G), G = 2.\nconnected_to(1,G) :- point(1), point(G), G = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nconnected_to(3,G) :- point(3), point(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "vertex 2 and vertex 1 are connected\nvertex 3 and vertex 1 are connected\nvertex 1 and vertex 3 are connected\nvertex 3 and vertex 2 are connected\nmaroon is a colour\nEvery vertex can only be assigned a single colour\nConnected vertexs cannot have the same colour\nA vertex goes from 1..32\nvertex 2 and vertex 3 are connected", "output": "connected_to(2,X) :- vertex(2), vertex(X), X = 1.\nconnected_to(3,X) :- vertex(3), vertex(X), X = 1.\nconnected_to(1,X) :- vertex(1), vertex(X), X = 3.\nconnected_to(3,X) :- vertex(3), vertex(X), X = 2.\ncolour(\"maroon\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\n:- connected_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\nvertex(1..32).\nconnected_to(2,X) :- vertex(2), vertex(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "The colour blue exists\nelements 2 and 1 are connected\nIf two elements are connected, they must have different colours\nThe colour pink exists\nelements 2 and 3 are connected\nelements 1 and 2 are connected", "output": "colour(\"blue\").\nadjacent_to(2,X) :- element(2), element(X), X = 1.\n:- adjacent_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\ncolour(\"pink\").\nadjacent_to(2,X) :- element(2), element(X), X = 3.\nadjacent_to(1,X) :- element(1), element(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "blue is a colour\nConnected vertexs cannot have the same colour\nvertex 3 and vertex 2 are connected\nvertex 1 and vertex 3 are connected\nvertex 1 and vertex 2 are connected", "output": "colour(\"blue\").\n:- linked_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\nlinked_to(3,A) :- vertex(3), vertex(A), A = 2.\nlinked_to(1,A) :- vertex(1), vertex(A), A = 3.\nlinked_to(1,A) :- vertex(1), vertex(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 2 and point X where X is 1\nThere is a connection between point 1 and point X where X is 3\nThere are 14 points\nOut of the hues available, there is skyBlue\nThere is a connection between point 3 and point X where X is 1\nThere is a connection between point 1 and point X where X is 2\nThere is a connection between point 3 and point X where X is 2\nOut of the hue available, there is crimson", "output": "linked_to(2,X) :- point(2), point(X), X = 1.\nlinked_to(1,X) :- point(1), point(X), X = 3.\npoint(1..14).\nhue(\"skyBlue\").\nlinked_to(3,X) :- point(3), point(X), X = 1.\nlinked_to(1,X) :- point(1), point(X), X = 2.\nlinked_to(3,X) :- point(3), point(X), X = 2.\nhue(\"crimson\")."}
{"instruction": "Translate this to ASP code", "input": "element 3 and element 1 are connected\ncobalt is a hue\nelement 2 and element 3 are connected\ncrimson is a hue", "output": "joined_to(3,C) :- element(3), element(C), C = 1.\nhue(\"cobalt\").\njoined_to(2,C) :- element(2), element(C), C = 3.\nhue(\"crimson\")."}
{"instruction": "Translate this to ASP code", "input": "Out of the shades available, there is skyBlue\nOut of the shades available, there is jade\nThere are 32 points\nIt can't be the case that a point has more than one colour\nThere is a connection between point 1 and point C where C is 3\nThere is a connection between point 1 and point C where C is 2\nIt is not allowed for adjacent points to share the same colour\nOut of the shade available, there is scarlet\nThere is a connection between point 2 and point C where C is 1", "output": "shade(\"skyBlue\").\nshade(\"jade\").\npoint(1..32).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\njoined_to(1,C) :- point(1), point(C), C = 3.\njoined_to(1,C) :- point(1), point(C), C = 2.\n:- joined_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\nshade(\"scarlet\").\njoined_to(2,C) :- point(2), point(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "red is a shade\nazure is a shade\npoint 2 and point 1 are connected\npoint 2 and point 3 are connected\nConnected points cannot have the same colour\nEvery point can only be assigned a single colour", "output": "shade(\"red\").\nshade(\"azure\").\nlinked_to(2,X) :- point(2), point(X), X = 1.\nlinked_to(2,X) :- point(2), point(X), X = 3.\n:- linked_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 1 and vertex C where C is 2\nIt can't be the case that a vertex has more than one colour\nThere are 14 vertexs\nOut of the shades available, there is azure", "output": "attached_to(1,C) :- vertex(1), vertex(C), C = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nvertex(1..14).\nshade(\"azure\")."}
{"instruction": "Translate this to ASP code", "input": "The colour jade exists\nThe colour skyBlue exists\npoints 3 and 1 are connected\npoints 3 and 2 are connected\npoints 1 and 2 are connected\nIf two points are connected, they must have different colours\nThere are points 1..3\npoints 2 and 3 are connected\npoints 2 and 1 are connected\npoints 1 and 3 are connected\nThe colour maroon exists", "output": "colour(\"jade\").\ncolour(\"skyBlue\").\nadjacent_to(3,C) :- point(3), point(C), C = 1.\nadjacent_to(3,C) :- point(3), point(C), C = 2.\nadjacent_to(1,C) :- point(1), point(C), C = 2.\n:- adjacent_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\npoint(1..3).\nadjacent_to(2,C) :- point(2), point(C), C = 3.\nadjacent_to(2,C) :- point(2), point(C), C = 1.\nadjacent_to(1,C) :- point(1), point(C), C = 3.\ncolour(\"maroon\")."}
{"instruction": "Translate this to ASP code", "input": "elements 3 and 1 are connected\nelements 2 and 1 are connected\nelements can't be assigned more than one of the colours\nThe hue cyan exists\nThe hue scarlet exists\nIf two elements are connected, they must have different colours\nThe hue green exists\nelements 2 and 3 are connected", "output": "joined_to(3,X) :- element(3), element(X), X = 1.\njoined_to(2,X) :- element(2), element(X), X = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nhue(\"cyan\").\nhue(\"scarlet\").\n:- joined_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nhue(\"green\").\njoined_to(2,X) :- element(2), element(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "The hue purple exists\nIf two vertexs are connected, they must have different colours\nvertexs 1 and 2 are connected\nvertexs can't be assigned more than one of the colours\nvertexs 3 and 2 are connected\nThere are vertexs 1..14\nvertexs 2 and 1 are connected\nvertexs 2 and 3 are connected\nvertexs 1 and 3 are connected\nvertexs 3 and 1 are connected", "output": "hue(\"purple\").\n:- connected_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C).\nconnected_to(1,C) :- vertex(1), vertex(C), C = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nconnected_to(3,C) :- vertex(3), vertex(C), C = 2.\nvertex(1..14).\nconnected_to(2,C) :- vertex(2), vertex(C), C = 1.\nconnected_to(2,C) :- vertex(2), vertex(C), C = 3.\nconnected_to(1,C) :- vertex(1), vertex(C), C = 3.\nconnected_to(3,C) :- vertex(3), vertex(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "maroon is a shade\nvertex 3 and vertex 2 are connected\ncyan is a shade\nvertex 2 and vertex 1 are connected\nolive is a shade\nEvery vertex can only be assigned a single colour\nA vertex goes from 1..32", "output": "shade(\"maroon\").\nlinked_to(3,C) :- vertex(3), vertex(C), C = 2.\nshade(\"cyan\").\nlinked_to(2,C) :- vertex(2), vertex(C), C = 1.\nshade(\"olive\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nvertex(1..32)."}
{"instruction": "Translate this to ASP code", "input": "Connected vertexs cannot have the same colour\nvertex 1 and vertex 2 are connected\nvertex 2 and vertex 3 are connected\njade is a shade\nA vertex goes from 1..14\nvertex 2 and vertex 1 are connected\nvertex 3 and vertex 2 are connected\nblue is a shade\nvertex 3 and vertex 1 are connected\nEvery vertex can only be assigned a single colour", "output": ":- joined_to(G,Y), vertex(G), assigned_to(G,C), vertex(Y), assigned_to(Y,C), color(C).\njoined_to(1,G) :- vertex(1), vertex(G), G = 2.\njoined_to(2,G) :- vertex(2), vertex(G), G = 3.\nshade(\"jade\").\nvertex(1..14).\njoined_to(2,G) :- vertex(2), vertex(G), G = 1.\njoined_to(3,G) :- vertex(3), vertex(G), G = 2.\nshade(\"blue\").\njoined_to(3,G) :- vertex(3), vertex(G), G = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "It can't be the case that a node has more than one colour\nThere is a connection between node 1 and node C where C is 2\nOut of the colours available, there is olive", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nattached_to(1,C) :- node(1), node(C), C = 2.\ncolour(\"olive\")."}
{"instruction": "Translate this to ASP code", "input": "There are nodes 1..3\nnodes 1 and 2 are connected\nThe shade crimson exists\nnodes 3 and 1 are connected", "output": "node(1..3).\njoined_to(1,X) :- node(1), node(X), X = 2.\nshade(\"crimson\").\njoined_to(3,X) :- node(3), node(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "jade is a shade\nnode 3 and node 2 are connected\nEvery node can only be assigned a single colour\nnode 2 and node 1 are connected", "output": "shade(\"jade\").\nconnected_to(3,C) :- node(3), node(C), C = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nconnected_to(2,C) :- node(2), node(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 3 and point A where A is 2\nOut of the shade available, there is maroon\nThere is a connection between point 2 and point A where A is 1\nOut of the shades available, there is jade", "output": "connected_to(3,A) :- point(3), point(A), A = 2.\nshade(\"maroon\").\nconnected_to(2,A) :- point(2), point(A), A = 1.\nshade(\"jade\")."}
{"instruction": "Translate this to ASP code", "input": "Every point can only be assigned a single colour\nEmerald is a hue\npoint 1 and point 2 are connected\nConnected points cannot have the same colour\npoint 2 and point 3 are connected\nA point goes from 1..3\npoint 3 and point 1 are connected\npoint 3 and point 2 are connected\ncrimson is a hue\npoint 1 and point 3 are connected\npoint 2 and point 1 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nhue(\"Emerald\").\nattached_to(1,A) :- point(1), point(A), A = 2.\n:- attached_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\nattached_to(2,A) :- point(2), point(A), A = 3.\npoint(1..3).\nattached_to(3,A) :- point(3), point(A), A = 1.\nattached_to(3,A) :- point(3), point(A), A = 2.\nhue(\"crimson\").\nattached_to(1,A) :- point(1), point(A), A = 3.\nattached_to(2,A) :- point(2), point(A), A = 1."}
{"instruction": "Translate this to ASP code", "input": "vertex 3 and vertex 2 are connected\nvertex 3 and vertex 1 are connected\npink is a hue\nEvery vertex can only be assigned a single colour\nvertex 2 and vertex 1 are connected\nvertex 2 and vertex 3 are connected\nvertex 1 and vertex 3 are connected\nConnected vertexs cannot have the same colour\nA vertex goes from 1..3", "output": "connected_to(3,G) :- vertex(3), vertex(G), G = 2.\nconnected_to(3,G) :- vertex(3), vertex(G), G = 1.\nhue(\"pink\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nconnected_to(2,G) :- vertex(2), vertex(G), G = 1.\nconnected_to(2,G) :- vertex(2), vertex(G), G = 3.\nconnected_to(1,G) :- vertex(1), vertex(G), G = 3.\n:- connected_to(G,Y), vertex(G), assigned_to(G,C), vertex(Y), assigned_to(Y,C), color(C).\nvertex(1..3)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 2 and node X where X is 1\nThere is a connection between node 1 and node X where X is 2\nThere is a connection between node 2 and node X where X is 3\nOut of the colours available, there is skyBlue", "output": "adjacent_to(2,X) :- node(2), node(X), X = 1.\nadjacent_to(1,X) :- node(1), node(X), X = 2.\nadjacent_to(2,X) :- node(2), node(X), X = 3.\ncolour(\"skyBlue\")."}
{"instruction": "Translate this to ASP code", "input": "The hue red exists\npoints can't be assigned more than one of the colours\npoints 1 and 2 are connected\nIf two points are connected, they must have different colours\npoints 3 and 2 are connected\nThe hue azure exists", "output": "hue(\"red\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nlinked_to(1,C) :- point(1), point(C), C = 2.\n:- linked_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\nlinked_to(3,C) :- point(3), point(C), C = 2.\nhue(\"azure\")."}
{"instruction": "Translate this to ASP code", "input": "Every point can only be assigned a single colour\npoint 2 and point 3 are connected\npoint 2 and point 1 are connected\ngreen is a shade\ncyan is a shade", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nattached_to(2,A) :- point(2), point(A), A = 3.\nattached_to(2,A) :- point(2), point(A), A = 1.\nshade(\"green\").\nshade(\"cyan\")."}
{"instruction": "Translate this to ASP code", "input": "There are 3 nodes\nOut of the hue available, there is scarlet\nThere is a connection between node 1 and node A where A is 2\nThere is a connection between node 3 and node A where A is 2", "output": "node(1..3).\nhue(\"scarlet\").\nadjacent_to(1,A) :- node(1), node(A), A = 2.\nadjacent_to(3,A) :- node(3), node(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 1 and point X where X is 3\nThere is a connection between point 2 and point X where X is 3\nThere is a connection between point 1 and point X where X is 2\nOut of the hues available, there is green\nOut of the hues available, there is skyBlue\nThere is a connection between point 3 and point X where X is 1\nIt can't be the case that a point has more than one colour\nThere is a connection between point 2 and point X where X is 1\nOut of the hue available, there is crimson\nIt is not allowed for adjacent points to share the same colour", "output": "connected_to(1,X) :- point(1), point(X), X = 3.\nconnected_to(2,X) :- point(2), point(X), X = 3.\nconnected_to(1,X) :- point(1), point(X), X = 2.\nhue(\"green\").\nhue(\"skyBlue\").\nconnected_to(3,X) :- point(3), point(X), X = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nconnected_to(2,X) :- point(2), point(X), X = 1.\nhue(\"crimson\").\n:- connected_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "Every vertex can only be assigned a single colour\nvertex 1 and vertex 3 are connected\nvertex 2 and vertex 3 are connected\nvertex 1 and vertex 2 are connected\nvertex 3 and vertex 1 are connected\nConnected vertexs cannot have the same colour", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nadjacent_to(1,C) :- vertex(1), vertex(C), C = 3.\nadjacent_to(2,C) :- vertex(2), vertex(C), C = 3.\nadjacent_to(1,C) :- vertex(1), vertex(C), C = 2.\nadjacent_to(3,C) :- vertex(3), vertex(C), C = 1.\n:- adjacent_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "red is a colour\nnode 2 and node 3 are connected\nskyBlue is a colour\nnode 1 and node 3 are connected\nConnected nodes cannot have the same colour\nA node goes from 1..3", "output": "colour(\"red\").\nlinked_to(2,G) :- node(2), node(G), G = 3.\ncolour(\"skyBlue\").\nlinked_to(1,G) :- node(1), node(G), G = 3.\n:- linked_to(G,Y), node(G), assigned_to(G,C), node(Y), assigned_to(Y,C), color(C).\nnode(1..3)."}
{"instruction": "Translate this to ASP code", "input": "If two vertexs are connected, they must have different colours\nThe colour cyan exists\nvertexs can't be assigned more than one of the colours\nvertexs 3 and 2 are connected\nvertexs 2 and 3 are connected\nThere are vertexs 1..3\nvertexs 3 and 1 are connected\nvertexs 1 and 2 are connected\nvertexs 2 and 1 are connected", "output": ":- linked_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C).\ncolour(\"cyan\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nlinked_to(3,C) :- vertex(3), vertex(C), C = 2.\nlinked_to(2,C) :- vertex(2), vertex(C), C = 3.\nvertex(1..3).\nlinked_to(3,C) :- vertex(3), vertex(C), C = 1.\nlinked_to(1,C) :- vertex(1), vertex(C), C = 2.\nlinked_to(2,C) :- vertex(2), vertex(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 3 and point X where X is 2\nThere is a connection between point 3 and point X where X is 1\nThere are 32 points\nThere is a connection between point 1 and point X where X is 2", "output": "adjacent_to(3,X) :- point(3), point(X), X = 2.\nadjacent_to(3,X) :- point(3), point(X), X = 1.\npoint(1..32).\nadjacent_to(1,X) :- point(1), point(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "vertex 3 and vertex 2 are connected\nvertex 1 and vertex 3 are connected\nvertex 1 and vertex 2 are connected\ngreen is a shade\nvertex 2 and vertex 3 are connected\ncyan is a shade\nmaroon is a shade\nConnected vertexs cannot have the same colour\nA vertex goes from 1..3", "output": "attached_to(3,A) :- vertex(3), vertex(A), A = 2.\nattached_to(1,A) :- vertex(1), vertex(A), A = 3.\nattached_to(1,A) :- vertex(1), vertex(A), A = 2.\nshade(\"green\").\nattached_to(2,A) :- vertex(2), vertex(A), A = 3.\nshade(\"cyan\").\nshade(\"maroon\").\n:- attached_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\nvertex(1..3)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 1 and vertex X where X is 3\nThere is a connection between vertex 3 and vertex X where X is 2\nIt can't be the case that a vertex has more than one colour\nIt is not allowed for adjacent vertexs to share the same colour\nOut of the shades available, there is jade\nThere are 14 vertexs\nOut of the shade available, there is maroon\nOut of the shades available, there is blue", "output": "adjacent_to(1,X) :- vertex(1), vertex(X), X = 3.\nadjacent_to(3,X) :- vertex(3), vertex(X), X = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\n:- adjacent_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\nshade(\"jade\").\nvertex(1..14).\nshade(\"maroon\").\nshade(\"blue\")."}
{"instruction": "Translate this to ASP code", "input": "Out of the shades available, there is mint\nIt can't be the case that a point has more than one colour\nOut of the shades available, there is skyBlue\nThere is a connection between point 1 and point C where C is 2\nThere is a connection between point 1 and point C where C is 3", "output": "shade(\"mint\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nshade(\"skyBlue\").\nadjacent_to(1,C) :- point(1), point(C), C = 2.\nadjacent_to(1,C) :- point(1), point(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "points 3 and 1 are connected\nThe colour cyan exists\npoints can't be assigned more than one of the colours\nIf two points are connected, they must have different colours\nThe colour limeGreen exists\npoints 1 and 2 are connected\npoints 3 and 2 are connected\nThere are points 1..14", "output": "joined_to(3,G) :- point(3), point(G), G = 1.\ncolour(\"cyan\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\n:- joined_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\ncolour(\"limeGreen\").\njoined_to(1,G) :- point(1), point(G), G = 2.\njoined_to(3,G) :- point(3), point(G), G = 2.\npoint(1..14)."}
{"instruction": "Translate this to ASP code", "input": "nodes 2 and 1 are connected\nnodes 1 and 2 are connected\nThere are nodes 1..32\nnodes 3 and 2 are connected\nnodes can't be assigned more than one of the colours\nIf two nodes are connected, they must have different colours", "output": "adjacent_to(2,C) :- node(2), node(C), C = 1.\nadjacent_to(1,C) :- node(1), node(C), C = 2.\nnode(1..32).\nadjacent_to(3,C) :- node(3), node(C), C = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\n:- adjacent_to(C,Y), node(C), assigned_to(C,C), node(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "vertexs 2 and 3 are connected\nThe colour limeGreen exists\nvertexs 1 and 2 are connected\nvertexs 1 and 3 are connected\nvertexs 2 and 1 are connected\nvertexs 3 and 2 are connected\nThe colour cyan exists\nThe colour purple exists\nIf two vertexs are connected, they must have different colours", "output": "connected_to(2,C) :- vertex(2), vertex(C), C = 3.\ncolour(\"limeGreen\").\nconnected_to(1,C) :- vertex(1), vertex(C), C = 2.\nconnected_to(1,C) :- vertex(1), vertex(C), C = 3.\nconnected_to(2,C) :- vertex(2), vertex(C), C = 1.\nconnected_to(3,C) :- vertex(3), vertex(C), C = 2.\ncolour(\"cyan\").\ncolour(\"purple\").\n:- connected_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "points 3 and 1 are connected\npoints 3 and 2 are connected\npoints 2 and 3 are connected\nIf two points are connected, they must have different colours\nThe shade blue exists\npoints 2 and 1 are connected\npoints 1 and 2 are connected", "output": "attached_to(3,A) :- point(3), point(A), A = 1.\nattached_to(3,A) :- point(3), point(A), A = 2.\nattached_to(2,A) :- point(2), point(A), A = 3.\n:- attached_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\nshade(\"blue\").\nattached_to(2,A) :- point(2), point(A), A = 1.\nattached_to(1,A) :- point(1), point(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between element 3 and element C where C is 1\nThere is a connection between element 1 and element C where C is 2\nOut of the shade available, there is crimson\nThere is a connection between element 1 and element C where C is 3\nIt can't be the case that a element has more than one colour\nThere is a connection between element 2 and element C where C is 1\nThere is a connection between element 3 and element C where C is 2\nOut of the shades available, there is blue", "output": "linked_to(3,C) :- element(3), element(C), C = 1.\nlinked_to(1,C) :- element(1), element(C), C = 2.\nshade(\"crimson\").\nlinked_to(1,C) :- element(1), element(C), C = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nlinked_to(2,C) :- element(2), element(C), C = 1.\nlinked_to(3,C) :- element(3), element(C), C = 2.\nshade(\"blue\")."}
{"instruction": "Translate this to ASP code", "input": "The shade skyBlue exists\nelements 3 and 1 are connected\nThere are elements 1..3\nelements 2 and 3 are connected\nelements 1 and 2 are connected\nelements can't be assigned more than one of the colours\nelements 1 and 3 are connected\nThe shade jade exists\nelements 2 and 1 are connected", "output": "shade(\"skyBlue\").\nlinked_to(3,G) :- element(3), element(G), G = 1.\nelement(1..3).\nlinked_to(2,G) :- element(2), element(G), G = 3.\nlinked_to(1,G) :- element(1), element(G), G = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nlinked_to(1,G) :- element(1), element(G), G = 3.\nshade(\"jade\").\nlinked_to(2,G) :- element(2), element(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "element 1 and element 3 are connected\nConnected elements cannot have the same colour\nolive is a shade\nelement 3 and element 2 are connected\nscarlet is a shade\nEvery element can only be assigned a single colour\nA element goes from 1..32\nelement 2 and element 1 are connected\nelement 2 and element 3 are connected", "output": "attached_to(1,G) :- element(1), element(G), G = 3.\n:- attached_to(G,Y), element(G), assigned_to(G,C), element(Y), assigned_to(Y,C), color(C).\nshade(\"olive\").\nattached_to(3,G) :- element(3), element(G), G = 2.\nshade(\"scarlet\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nelement(1..32).\nattached_to(2,G) :- element(2), element(G), G = 1.\nattached_to(2,G) :- element(2), element(G), G = 3."}
{"instruction": "Translate this to ASP code", "input": "element 3 and element 2 are connected\nelement 3 and element 1 are connected\nelement 1 and element 3 are connected\nmint is a shade\nelement 2 and element 1 are connected\nEvery element can only be assigned a single colour", "output": "attached_to(3,X) :- element(3), element(X), X = 2.\nattached_to(3,X) :- element(3), element(X), X = 1.\nattached_to(1,X) :- element(1), element(X), X = 3.\nshade(\"mint\").\nattached_to(2,X) :- element(2), element(X), X = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "Out of the hues available, there is green\nThere is a connection between vertex 1 and vertex G where G is 3\nOut of the hue available, there is crimson\nThere are 14 vertexs\nThere is a connection between vertex 3 and vertex G where G is 2\nThere is a connection between vertex 2 and vertex G where G is 3\nThere is a connection between vertex 1 and vertex G where G is 2\nThere is a connection between vertex 2 and vertex G where G is 1", "output": "hue(\"green\").\nlinked_to(1,G) :- vertex(1), vertex(G), G = 3.\nhue(\"crimson\").\nvertex(1..14).\nlinked_to(3,G) :- vertex(3), vertex(G), G = 2.\nlinked_to(2,G) :- vertex(2), vertex(G), G = 3.\nlinked_to(1,G) :- vertex(1), vertex(G), G = 2.\nlinked_to(2,G) :- vertex(2), vertex(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 1 and node G where G is 2\nIt is not allowed for adjacent nodes to share the same colour\nOut of the hue available, there is scarlet\nThere is a connection between node 1 and node G where G is 3\nIt can't be the case that a node has more than one colour\nThere are 32 nodes\nThere is a connection between node 3 and node G where G is 2\nOut of the hues available, there is limeGreen\nThere is a connection between node 2 and node G where G is 1\nOut of the hues available, there is blue", "output": "linked_to(1,G) :- node(1), node(G), G = 2.\n:- linked_to(G,Y), node(G), assigned_to(G,C), node(Y), assigned_to(Y,C), color(C).\nhue(\"scarlet\").\nlinked_to(1,G) :- node(1), node(G), G = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nnode(1..32).\nlinked_to(3,G) :- node(3), node(G), G = 2.\nhue(\"limeGreen\").\nlinked_to(2,G) :- node(2), node(G), G = 1.\nhue(\"blue\")."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between element 2 and element X where X is 1\nThere is a connection between element 1 and element X where X is 2\nOut of the shades available, there is mint", "output": "joined_to(2,X) :- element(2), element(X), X = 1.\njoined_to(1,X) :- element(1), element(X), X = 2.\nshade(\"mint\")."}
{"instruction": "Translate this to ASP code", "input": "vertexs 2 and 3 are connected\nThe colour pink exists\nvertexs can't be assigned more than one of the colours\nThe colour azure exists\nThe colour mint exists\nvertexs 3 and 2 are connected\nvertexs 1 and 3 are connected\nIf two vertexs are connected, they must have different colours\nvertexs 2 and 1 are connected\nvertexs 3 and 1 are connected\nvertexs 1 and 2 are connected", "output": "attached_to(2,A) :- vertex(2), vertex(A), A = 3.\ncolour(\"pink\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\ncolour(\"azure\").\ncolour(\"mint\").\nattached_to(3,A) :- vertex(3), vertex(A), A = 2.\nattached_to(1,A) :- vertex(1), vertex(A), A = 3.\n:- attached_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\nattached_to(2,A) :- vertex(2), vertex(A), A = 1.\nattached_to(3,A) :- vertex(3), vertex(A), A = 1.\nattached_to(1,A) :- vertex(1), vertex(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "Out of the hues available, there is olive\nThere is a connection between element 2 and element A where A is 1\nThere are 3 elements\nIt is not allowed for adjacent elements to share the same colour\nThere is a connection between element 1 and element A where A is 3\nOut of the hues available, there is cyan\nThere is a connection between element 3 and element A where A is 1\nIt can't be the case that a element has more than one colour", "output": "hue(\"olive\").\nconnected_to(2,A) :- element(2), element(A), A = 1.\nelement(1..3).\n:- connected_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C).\nconnected_to(1,A) :- element(1), element(A), A = 3.\nhue(\"cyan\").\nconnected_to(3,A) :- element(3), element(A), A = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "If two nodes are connected, they must have different colours\nThe colour maroon exists\nThe colour olive exists\nnodes 2 and 1 are connected\nnodes 1 and 2 are connected", "output": ":- attached_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\ncolour(\"maroon\").\ncolour(\"olive\").\nattached_to(2,X) :- node(2), node(X), X = 1.\nattached_to(1,X) :- node(1), node(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 1 and node A where A is 2\nThere is a connection between node 3 and node A where A is 1\nIt is not allowed for adjacent nodes to share the same colour\nIt can't be the case that a node has more than one colour", "output": "attached_to(1,A) :- node(1), node(A), A = 2.\nattached_to(3,A) :- node(3), node(A), A = 1.\n:- attached_to(A,Y), node(A), assigned_to(A,C), node(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "The hue blue exists\nelements 2 and 1 are connected\nIf two elements are connected, they must have different colours\nelements 3 and 2 are connected\nThe hue olive exists\nelements 2 and 3 are connected\nThe hue crimson exists\nelements 1 and 2 are connected\nelements 3 and 1 are connected\nThere are elements 1..14\nelements 1 and 3 are connected", "output": "hue(\"blue\").\nattached_to(2,C) :- element(2), element(C), C = 1.\n:- attached_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C).\nattached_to(3,C) :- element(3), element(C), C = 2.\nhue(\"olive\").\nattached_to(2,C) :- element(2), element(C), C = 3.\nhue(\"crimson\").\nattached_to(1,C) :- element(1), element(C), C = 2.\nattached_to(3,C) :- element(3), element(C), C = 1.\nelement(1..14).\nattached_to(1,C) :- element(1), element(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "Connected nodes cannot have the same colour\nnode 3 and node 1 are connected\nmint is a colour\nA node goes from 1..14\nazure is a colour\nnode 1 and node 3 are connected\nscarlet is a colour\nnode 1 and node 2 are connected", "output": ":- adjacent_to(C,Y), node(C), assigned_to(C,C), node(Y), assigned_to(Y,C), color(C).\nadjacent_to(3,C) :- node(3), node(C), C = 1.\ncolour(\"mint\").\nnode(1..14).\ncolour(\"azure\").\nadjacent_to(1,C) :- node(1), node(C), C = 3.\ncolour(\"scarlet\").\nadjacent_to(1,C) :- node(1), node(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent points to share the same colour\nOut of the shades available, there is green\nOut of the shade available, there is crimson", "output": ":- joined_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\nshade(\"green\").\nshade(\"crimson\")."}
{"instruction": "Translate this to ASP code", "input": "Out of the shade available, there is maroon\nIt can't be the case that a vertex has more than one colour\nThere is a connection between vertex 2 and vertex X where X is 3\nThere are 14 vertexs\nOut of the shades available, there is Emerald\nThere is a connection between vertex 1 and vertex X where X is 3\nIt is not allowed for adjacent vertexs to share the same colour\nOut of the shades available, there is azure\nThere is a connection between vertex 3 and vertex X where X is 2\nThere is a connection between vertex 2 and vertex X where X is 1\nThere is a connection between vertex 3 and vertex X where X is 1", "output": "shade(\"maroon\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nconnected_to(2,X) :- vertex(2), vertex(X), X = 3.\nvertex(1..14).\nshade(\"Emerald\").\nconnected_to(1,X) :- vertex(1), vertex(X), X = 3.\n:- connected_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\nshade(\"azure\").\nconnected_to(3,X) :- vertex(3), vertex(X), X = 2.\nconnected_to(2,X) :- vertex(2), vertex(X), X = 1.\nconnected_to(3,X) :- vertex(3), vertex(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "A point goes from 1..32\nskyBlue is a hue\npoint 3 and point 2 are connected\npoint 2 and point 3 are connected", "output": "point(1..32).\nhue(\"skyBlue\").\njoined_to(3,G) :- point(3), point(G), G = 2.\njoined_to(2,G) :- point(2), point(G), G = 3."}
{"instruction": "Translate this to ASP code", "input": "If two nodes are connected, they must have different colours\nThe shade olive exists\nnodes can't be assigned more than one of the colours\nnodes 3 and 2 are connected\nThere are nodes 1..14\nnodes 3 and 1 are connected\nnodes 2 and 3 are connected\nThe shade azure exists\nnodes 1 and 3 are connected\nThe shade red exists", "output": ":- attached_to(C,Y), node(C), assigned_to(C,C), node(Y), assigned_to(Y,C), color(C).\nshade(\"olive\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nattached_to(3,C) :- node(3), node(C), C = 2.\nnode(1..14).\nattached_to(3,C) :- node(3), node(C), C = 1.\nattached_to(2,C) :- node(2), node(C), C = 3.\nshade(\"azure\").\nattached_to(1,C) :- node(1), node(C), C = 3.\nshade(\"red\")."}
{"instruction": "Translate this to ASP code", "input": "There are vertexs 1..32\nvertexs 1 and 3 are connected\nThe hue cyan exists\nvertexs 2 and 3 are connected\nvertexs can't be assigned more than one of the colours\nvertexs 2 and 1 are connected\nvertexs 1 and 2 are connected", "output": "vertex(1..32).\njoined_to(1,C) :- vertex(1), vertex(C), C = 3.\nhue(\"cyan\").\njoined_to(2,C) :- vertex(2), vertex(C), C = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\njoined_to(2,C) :- vertex(2), vertex(C), C = 1.\njoined_to(1,C) :- vertex(1), vertex(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "Every element can only be assigned a single colour\nblue is a shade\nConnected elements cannot have the same colour\nlimeGreen is a shade\nelement 1 and element 3 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nshade(\"blue\").\n:- connected_to(G,Y), element(G), assigned_to(G,C), element(Y), assigned_to(Y,C), color(C).\nshade(\"limeGreen\").\nconnected_to(1,G) :- element(1), element(G), G = 3."}
{"instruction": "Translate this to ASP code", "input": "points 2 and 1 are connected\npoints can't be assigned more than one of the colours\nThere are points 1..14\nThe hue red exists", "output": "connected_to(2,G) :- point(2), point(G), G = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\npoint(1..14).\nhue(\"red\")."}
{"instruction": "Translate this to ASP code", "input": "A element goes from 1..32\nelement 1 and element 2 are connected\nelement 2 and element 3 are connected\npink is a hue\nEvery element can only be assigned a single colour\nlimeGreen is a hue\nelement 3 and element 1 are connected\nelement 1 and element 3 are connected\nelement 2 and element 1 are connected\nblue is a hue", "output": "element(1..32).\nlinked_to(1,G) :- element(1), element(G), G = 2.\nlinked_to(2,G) :- element(2), element(G), G = 3.\nhue(\"pink\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nhue(\"limeGreen\").\nlinked_to(3,G) :- element(3), element(G), G = 1.\nlinked_to(1,G) :- element(1), element(G), G = 3.\nlinked_to(2,G) :- element(2), element(G), G = 1.\nhue(\"blue\")."}
{"instruction": "Translate this to ASP code", "input": "elements 2 and 3 are connected\nelements 1 and 3 are connected\nelements 1 and 2 are connected\nThe hue azure exists", "output": "connected_to(2,C) :- element(2), element(C), C = 3.\nconnected_to(1,C) :- element(1), element(C), C = 3.\nconnected_to(1,C) :- element(1), element(C), C = 2.\nhue(\"azure\")."}
{"instruction": "Translate this to ASP code", "input": "A element goes from 1..14\nmint is a colour\nelement 1 and element 3 are connected\nelement 2 and element 3 are connected\nelement 3 and element 2 are connected", "output": "element(1..14).\ncolour(\"mint\").\nattached_to(1,A) :- element(1), element(A), A = 3.\nattached_to(2,A) :- element(2), element(A), A = 3.\nattached_to(3,A) :- element(3), element(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "If two points are connected, they must have different colours\npoints 1 and 2 are connected\npoints 2 and 1 are connected\npoints 2 and 3 are connected\npoints 1 and 3 are connected\nThe colour blue exists\npoints 3 and 1 are connected\npoints can't be assigned more than one of the colours\nThe colour green exists\npoints 3 and 2 are connected", "output": ":- connected_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\nconnected_to(1,A) :- point(1), point(A), A = 2.\nconnected_to(2,A) :- point(2), point(A), A = 1.\nconnected_to(2,A) :- point(2), point(A), A = 3.\nconnected_to(1,A) :- point(1), point(A), A = 3.\ncolour(\"blue\").\nconnected_to(3,A) :- point(3), point(A), A = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\ncolour(\"green\").\nconnected_to(3,A) :- point(3), point(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 2 and node C where C is 3\nOut of the hue available, there is pink\nThere are 32 nodes", "output": "joined_to(2,C) :- node(2), node(C), C = 3.\nhue(\"pink\").\nnode(1..32)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 3 and node X where X is 2\nIt is not allowed for adjacent nodes to share the same colour\nThere are 32 nodes\nThere is a connection between node 1 and node X where X is 3\nThere is a connection between node 3 and node X where X is 1\nOut of the hue available, there is pink\nThere is a connection between node 1 and node X where X is 2\nThere is a connection between node 2 and node X where X is 1\nOut of the hues available, there is Emerald\nIt can't be the case that a node has more than one colour\nOut of the hues available, there is cobalt", "output": "joined_to(3,X) :- node(3), node(X), X = 2.\n:- joined_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\nnode(1..32).\njoined_to(1,X) :- node(1), node(X), X = 3.\njoined_to(3,X) :- node(3), node(X), X = 1.\nhue(\"pink\").\njoined_to(1,X) :- node(1), node(X), X = 2.\njoined_to(2,X) :- node(2), node(X), X = 1.\nhue(\"Emerald\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nhue(\"cobalt\")."}
{"instruction": "Translate this to ASP code", "input": "Every vertex can only be assigned a single colour\nlimeGreen is a shade\ncyan is a shade", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nshade(\"limeGreen\").\nshade(\"cyan\")."}
{"instruction": "Translate this to ASP code", "input": "If two nodes are connected, they must have different colours\nThere are nodes 1..3\nnodes 2 and 1 are connected\nThe shade crimson exists\nnodes 2 and 3 are connected\nnodes can't be assigned more than one of the colours\nnodes 3 and 1 are connected\nnodes 1 and 2 are connected\nThe shade azure exists\nnodes 1 and 3 are connected", "output": ":- attached_to(A,Y), node(A), assigned_to(A,C), node(Y), assigned_to(Y,C), color(C).\nnode(1..3).\nattached_to(2,A) :- node(2), node(A), A = 1.\nshade(\"crimson\").\nattached_to(2,A) :- node(2), node(A), A = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nattached_to(3,A) :- node(3), node(A), A = 1.\nattached_to(1,A) :- node(1), node(A), A = 2.\nshade(\"azure\").\nattached_to(1,A) :- node(1), node(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 2 and node X where X is 1\nThere is a connection between node 2 and node X where X is 3\nOut of the hues available, there is cyan\nThere is a connection between node 3 and node X where X is 1\nOut of the hue available, there is crimson\nOut of the hues available, there is green\nIt is not allowed for adjacent nodes to share the same colour\nIt can't be the case that a node has more than one colour", "output": "connected_to(2,X) :- node(2), node(X), X = 1.\nconnected_to(2,X) :- node(2), node(X), X = 3.\nhue(\"cyan\").\nconnected_to(3,X) :- node(3), node(X), X = 1.\nhue(\"crimson\").\nhue(\"green\").\n:- connected_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "The colour skyBlue exists\npoints 3 and 2 are connected\npoints 3 and 1 are connected\npoints 2 and 3 are connected\npoints 2 and 1 are connected\nIf two points are connected, they must have different colours\nThe colour olive exists\nThere are points 1..14\npoints 1 and 3 are connected\nThe colour scarlet exists\npoints 1 and 2 are connected", "output": "colour(\"skyBlue\").\nadjacent_to(3,X) :- point(3), point(X), X = 2.\nadjacent_to(3,X) :- point(3), point(X), X = 1.\nadjacent_to(2,X) :- point(2), point(X), X = 3.\nadjacent_to(2,X) :- point(2), point(X), X = 1.\n:- adjacent_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\ncolour(\"olive\").\npoint(1..14).\nadjacent_to(1,X) :- point(1), point(X), X = 3.\ncolour(\"scarlet\").\nadjacent_to(1,X) :- point(1), point(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "There are points 1..32\npoints can't be assigned more than one of the colours\nIf two points are connected, they must have different colours\npoints 2 and 1 are connected\npoints 1 and 3 are connected\nThe colour mint exists\npoints 2 and 3 are connected\npoints 3 and 1 are connected\nThe colour blue exists\npoints 1 and 2 are connected", "output": "point(1..32).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\n:- connected_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\nconnected_to(2,X) :- point(2), point(X), X = 1.\nconnected_to(1,X) :- point(1), point(X), X = 3.\ncolour(\"mint\").\nconnected_to(2,X) :- point(2), point(X), X = 3.\nconnected_to(3,X) :- point(3), point(X), X = 1.\ncolour(\"blue\").\nconnected_to(1,X) :- point(1), point(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "elements can't be assigned more than one of the colours\nThe shade azure exists\nelements 2 and 1 are connected\nThere are elements 1..3\nIf two elements are connected, they must have different colours\nelements 2 and 3 are connected\nelements 1 and 2 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nshade(\"azure\").\nconnected_to(2,G) :- element(2), element(G), G = 1.\nelement(1..3).\n:- connected_to(G,Y), element(G), assigned_to(G,C), element(Y), assigned_to(Y,C), color(C).\nconnected_to(2,G) :- element(2), element(G), G = 3.\nconnected_to(1,G) :- element(1), element(G), G = 2."}
{"instruction": "Translate this to ASP code", "input": "elements 1 and 2 are connected\nIf two elements are connected, they must have different colours\nelements 1 and 3 are connected\nelements 2 and 1 are connected\nThe shade red exists\nelements 2 and 3 are connected\nelements can't be assigned more than one of the colours\nelements 3 and 2 are connected\nThere are elements 1..14", "output": "attached_to(1,C) :- element(1), element(C), C = 2.\n:- attached_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C).\nattached_to(1,C) :- element(1), element(C), C = 3.\nattached_to(2,C) :- element(2), element(C), C = 1.\nshade(\"red\").\nattached_to(2,C) :- element(2), element(C), C = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nattached_to(3,C) :- element(3), element(C), C = 2.\nelement(1..14)."}
{"instruction": "Translate this to ASP code", "input": "vertexs 1 and 3 are connected\nThe hue red exists\nIf two vertexs are connected, they must have different colours\nThe hue green exists", "output": "joined_to(1,G) :- vertex(1), vertex(G), G = 3.\nhue(\"red\").\n:- joined_to(G,Y), vertex(G), assigned_to(G,C), vertex(Y), assigned_to(Y,C), color(C).\nhue(\"green\")."}
{"instruction": "Translate this to ASP code", "input": "vertexs 3 and 1 are connected\nThe colour cyan exists\nIf two vertexs are connected, they must have different colours\nvertexs 3 and 2 are connected\nvertexs 1 and 2 are connected\nvertexs can't be assigned more than one of the colours\nvertexs 2 and 3 are connected", "output": "joined_to(3,C) :- vertex(3), vertex(C), C = 1.\ncolour(\"cyan\").\n:- joined_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C).\njoined_to(3,C) :- vertex(3), vertex(C), C = 2.\njoined_to(1,C) :- vertex(1), vertex(C), C = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\njoined_to(2,C) :- vertex(2), vertex(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 3 and point C where C is 2\nOut of the hues available, there is blue\nIt can't be the case that a point has more than one colour", "output": "adjacent_to(3,C) :- point(3), point(C), C = 2.\nhue(\"blue\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "Out of the hue available, there is purple\nIt can't be the case that a node has more than one colour\nThere is a connection between node 3 and node G where G is 1\nThere is a connection between node 3 and node G where G is 2\nThere is a connection between node 1 and node G where G is 2\nThere are 14 nodes", "output": "hue(\"purple\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nadjacent_to(3,G) :- node(3), node(G), G = 1.\nadjacent_to(3,G) :- node(3), node(G), G = 2.\nadjacent_to(1,G) :- node(1), node(G), G = 2.\nnode(1..14)."}
{"instruction": "Translate this to ASP code", "input": "element 2 and element 3 are connected\nEvery element can only be assigned a single colour\nA element goes from 1..32\nelement 3 and element 1 are connected\nConnected elements cannot have the same colour\nmint is a colour\nelement 1 and element 3 are connected\nelement 3 and element 2 are connected", "output": "joined_to(2,C) :- element(2), element(C), C = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nelement(1..32).\njoined_to(3,C) :- element(3), element(C), C = 1.\n:- joined_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C).\ncolour(\"mint\").\njoined_to(1,C) :- element(1), element(C), C = 3.\njoined_to(3,C) :- element(3), element(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 1 and node X where X is 3\nThere is a connection between node 2 and node X where X is 3\nOut of the shades available, there is blue\nThere is a connection between node 1 and node X where X is 2\nThere is a connection between node 3 and node X where X is 2\nIt is not allowed for adjacent nodes to share the same colour", "output": "joined_to(1,X) :- node(1), node(X), X = 3.\njoined_to(2,X) :- node(2), node(X), X = 3.\nshade(\"blue\").\njoined_to(1,X) :- node(1), node(X), X = 2.\njoined_to(3,X) :- node(3), node(X), X = 2.\n:- joined_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "point 1 and point 3 are connected\nskyBlue is a shade\nmint is a shade", "output": "attached_to(1,C) :- point(1), point(C), C = 3.\nshade(\"skyBlue\").\nshade(\"mint\")."}
{"instruction": "Translate this to ASP code", "input": "element 3 and element 1 are connected\nelement 2 and element 1 are connected\nelement 1 and element 3 are connected\nelement 1 and element 2 are connected\nEmerald is a hue\nEvery element can only be assigned a single colour\ncobalt is a hue", "output": "joined_to(3,G) :- element(3), element(G), G = 1.\njoined_to(2,G) :- element(2), element(G), G = 1.\njoined_to(1,G) :- element(1), element(G), G = 3.\njoined_to(1,G) :- element(1), element(G), G = 2.\nhue(\"Emerald\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nhue(\"cobalt\")."}
{"instruction": "Translate this to ASP code", "input": "point 1 and point 3 are connected\npurple is a colour\npoint 3 and point 2 are connected\nmint is a colour", "output": "attached_to(1,C) :- point(1), point(C), C = 3.\ncolour(\"purple\").\nattached_to(3,C) :- point(3), point(C), C = 2.\ncolour(\"mint\")."}
{"instruction": "Translate this to ASP code", "input": "vertex 1 and vertex 2 are connected\nlimeGreen is a colour\nvertex 1 and vertex 3 are connected\nvertex 3 and vertex 1 are connected\nConnected vertexs cannot have the same colour\nA vertex goes from 1..14\nvertex 2 and vertex 1 are connected\nvertex 2 and vertex 3 are connected", "output": "attached_to(1,X) :- vertex(1), vertex(X), X = 2.\ncolour(\"limeGreen\").\nattached_to(1,X) :- vertex(1), vertex(X), X = 3.\nattached_to(3,X) :- vertex(3), vertex(X), X = 1.\n:- attached_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\nvertex(1..14).\nattached_to(2,X) :- vertex(2), vertex(X), X = 1.\nattached_to(2,X) :- vertex(2), vertex(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "vertexs 3 and 1 are connected\nvertexs 2 and 3 are connected\nThe colour skyBlue exists", "output": "adjacent_to(3,G) :- vertex(3), vertex(G), G = 1.\nadjacent_to(2,G) :- vertex(2), vertex(G), G = 3.\ncolour(\"skyBlue\")."}
{"instruction": "Translate this to ASP code", "input": "The shade cyan exists\nvertexs 2 and 3 are connected\nvertexs 1 and 3 are connected\nThere are vertexs 1..3\nvertexs 3 and 2 are connected\nvertexs 3 and 1 are connected\nvertexs 2 and 1 are connected\nIf two vertexs are connected, they must have different colours\nvertexs can't be assigned more than one of the colours", "output": "shade(\"cyan\").\nattached_to(2,X) :- vertex(2), vertex(X), X = 3.\nattached_to(1,X) :- vertex(1), vertex(X), X = 3.\nvertex(1..3).\nattached_to(3,X) :- vertex(3), vertex(X), X = 2.\nattached_to(3,X) :- vertex(3), vertex(X), X = 1.\nattached_to(2,X) :- vertex(2), vertex(X), X = 1.\n:- attached_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "There are elements 1..32\nelements 1 and 3 are connected\nThe colour red exists\nThe colour mint exists\nelements 2 and 1 are connected", "output": "element(1..32).\nadjacent_to(1,G) :- element(1), element(G), G = 3.\ncolour(\"red\").\ncolour(\"mint\").\nadjacent_to(2,G) :- element(2), element(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "It can't be the case that a point has more than one colour\nThere is a connection between point 3 and point C where C is 2\nThere are 14 points\nThere is a connection between point 3 and point C where C is 1\nThere is a connection between point 1 and point C where C is 2\nOut of the hues available, there is jade\nOut of the hue available, there is maroon", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nconnected_to(3,C) :- point(3), point(C), C = 2.\npoint(1..14).\nconnected_to(3,C) :- point(3), point(C), C = 1.\nconnected_to(1,C) :- point(1), point(C), C = 2.\nhue(\"jade\").\nhue(\"maroon\")."}
{"instruction": "Translate this to ASP code", "input": "The colour cyan exists\nThe colour jade exists\nThere are vertexs 1..14\nvertexs 2 and 1 are connected\nvertexs 3 and 1 are connected\nvertexs can't be assigned more than one of the colours", "output": "colour(\"cyan\").\ncolour(\"jade\").\nvertex(1..14).\njoined_to(2,X) :- vertex(2), vertex(X), X = 1.\njoined_to(3,X) :- vertex(3), vertex(X), X = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "There are 32 elements\nThere is a connection between element 1 and element A where A is 2\nIt is not allowed for adjacent elements to share the same colour\nOut of the shade available, there is maroon\nThere is a connection between element 3 and element A where A is 2\nOut of the shades available, there is limeGreen\nThere is a connection between element 2 and element A where A is 1\nThere is a connection between element 2 and element A where A is 3\nThere is a connection between element 1 and element A where A is 3", "output": "element(1..32).\nlinked_to(1,A) :- element(1), element(A), A = 2.\n:- linked_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C).\nshade(\"maroon\").\nlinked_to(3,A) :- element(3), element(A), A = 2.\nshade(\"limeGreen\").\nlinked_to(2,A) :- element(2), element(A), A = 1.\nlinked_to(2,A) :- element(2), element(A), A = 3.\nlinked_to(1,A) :- element(1), element(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "There are 3 vertexs\nThere is a connection between vertex 3 and vertex X where X is 1\nThere is a connection between vertex 1 and vertex X where X is 2\nIt is not allowed for adjacent vertexs to share the same colour\nIt can't be the case that a vertex has more than one colour\nThere is a connection between vertex 2 and vertex X where X is 3\nThere is a connection between vertex 2 and vertex X where X is 1\nOut of the colours available, there is skyBlue\nThere is a connection between vertex 1 and vertex X where X is 3\nOut of the colour available, there is pink", "output": "vertex(1..3).\nlinked_to(3,X) :- vertex(3), vertex(X), X = 1.\nlinked_to(1,X) :- vertex(1), vertex(X), X = 2.\n:- linked_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nlinked_to(2,X) :- vertex(2), vertex(X), X = 3.\nlinked_to(2,X) :- vertex(2), vertex(X), X = 1.\ncolour(\"skyBlue\").\nlinked_to(1,X) :- vertex(1), vertex(X), X = 3.\ncolour(\"pink\")."}
{"instruction": "Translate this to ASP code", "input": "Out of the colour available, there is scarlet\nOut of the colours available, there is skyBlue\nThere is a connection between element 1 and element X where X is 2\nIt is not allowed for adjacent elements to share the same colour\nIt can't be the case that a element has more than one colour", "output": "colour(\"scarlet\").\ncolour(\"skyBlue\").\nconnected_to(1,X) :- element(1), element(X), X = 2.\n:- connected_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "Out of the hues available, there is jade\nOut of the hues available, there is azure\nThere is a connection between node 3 and node A where A is 1\nThere is a connection between node 1 and node A where A is 2\nThere is a connection between node 2 and node A where A is 3\nThere are 3 nodes\nThere is a connection between node 2 and node A where A is 1\nThere is a connection between node 3 and node A where A is 2\nIt can't be the case that a node has more than one colour\nThere is a connection between node 1 and node A where A is 3\nIt is not allowed for adjacent nodes to share the same colour", "output": "hue(\"jade\").\nhue(\"azure\").\nconnected_to(3,A) :- node(3), node(A), A = 1.\nconnected_to(1,A) :- node(1), node(A), A = 2.\nconnected_to(2,A) :- node(2), node(A), A = 3.\nnode(1..3).\nconnected_to(2,A) :- node(2), node(A), A = 1.\nconnected_to(3,A) :- node(3), node(A), A = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nconnected_to(1,A) :- node(1), node(A), A = 3.\n:- connected_to(A,Y), node(A), assigned_to(A,C), node(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "There are 14 points\nThere is a connection between point 3 and point C where C is 1\nOut of the hues available, there is skyBlue\nThere is a connection between point 1 and point C where C is 2\nThere is a connection between point 2 and point C where C is 1\nIt is not allowed for adjacent points to share the same colour\nIt can't be the case that a point has more than one colour\nThere is a connection between point 3 and point C where C is 2\nOut of the hues available, there is Emerald\nThere is a connection between point 2 and point C where C is 3", "output": "point(1..14).\nadjacent_to(3,C) :- point(3), point(C), C = 1.\nhue(\"skyBlue\").\nadjacent_to(1,C) :- point(1), point(C), C = 2.\nadjacent_to(2,C) :- point(2), point(C), C = 1.\n:- adjacent_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nadjacent_to(3,C) :- point(3), point(C), C = 2.\nhue(\"Emerald\").\nadjacent_to(2,C) :- point(2), point(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "vertexs 3 and 2 are connected\nThere are vertexs 1..32\nvertexs 1 and 2 are connected\nIf two vertexs are connected, they must have different colours\nvertexs can't be assigned more than one of the colours\nvertexs 1 and 3 are connected\nThe hue skyBlue exists", "output": "linked_to(3,G) :- vertex(3), vertex(G), G = 2.\nvertex(1..32).\nlinked_to(1,G) :- vertex(1), vertex(G), G = 2.\n:- linked_to(G,Y), vertex(G), assigned_to(G,C), vertex(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nlinked_to(1,G) :- vertex(1), vertex(G), G = 3.\nhue(\"skyBlue\")."}
{"instruction": "Translate this to ASP code", "input": "There are 14 nodes\nOut of the shades available, there is skyBlue\nThere is a connection between node 2 and node A where A is 1", "output": "node(1..14).\nshade(\"skyBlue\").\nadjacent_to(2,A) :- node(2), node(A), A = 1."}
{"instruction": "Translate this to ASP code", "input": "The hue blue exists\nThere are elements 1..14\nelements 3 and 1 are connected\nelements 2 and 3 are connected\nelements 1 and 3 are connected\nThe hue Emerald exists\nelements 1 and 2 are connected\nThe hue red exists\nelements 2 and 1 are connected\nIf two elements are connected, they must have different colours\nelements 3 and 2 are connected", "output": "hue(\"blue\").\nelement(1..14).\nlinked_to(3,A) :- element(3), element(A), A = 1.\nlinked_to(2,A) :- element(2), element(A), A = 3.\nlinked_to(1,A) :- element(1), element(A), A = 3.\nhue(\"Emerald\").\nlinked_to(1,A) :- element(1), element(A), A = 2.\nhue(\"red\").\nlinked_to(2,A) :- element(2), element(A), A = 1.\n:- linked_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C).\nlinked_to(3,A) :- element(3), element(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "The colour azure exists\npoints 1 and 2 are connected\nThere are points 1..3\nThe colour jade exists\npoints 2 and 1 are connected\nIf two points are connected, they must have different colours\npoints 2 and 3 are connected\npoints 3 and 1 are connected\npoints 3 and 2 are connected", "output": "colour(\"azure\").\nconnected_to(1,X) :- point(1), point(X), X = 2.\npoint(1..3).\ncolour(\"jade\").\nconnected_to(2,X) :- point(2), point(X), X = 1.\n:- connected_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\nconnected_to(2,X) :- point(2), point(X), X = 3.\nconnected_to(3,X) :- point(3), point(X), X = 1.\nconnected_to(3,X) :- point(3), point(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "vertexs 3 and 2 are connected\nvertexs 3 and 1 are connected\nIf two vertexs are connected, they must have different colours\nvertexs 1 and 2 are connected\nThere are vertexs 1..32\nThe colour maroon exists\nThe colour limeGreen exists\nvertexs 1 and 3 are connected\nvertexs 2 and 1 are connected\nThe colour cobalt exists", "output": "connected_to(3,A) :- vertex(3), vertex(A), A = 2.\nconnected_to(3,A) :- vertex(3), vertex(A), A = 1.\n:- connected_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\nconnected_to(1,A) :- vertex(1), vertex(A), A = 2.\nvertex(1..32).\ncolour(\"maroon\").\ncolour(\"limeGreen\").\nconnected_to(1,A) :- vertex(1), vertex(A), A = 3.\nconnected_to(2,A) :- vertex(2), vertex(A), A = 1.\ncolour(\"cobalt\")."}
{"instruction": "Translate this to ASP code", "input": "A node goes from 1..32\nblue is a colour\nnode 2 and node 1 are connected\nnode 1 and node 2 are connected\nnode 2 and node 3 are connected\nnode 1 and node 3 are connected\nlimeGreen is a colour\nscarlet is a colour", "output": "node(1..32).\ncolour(\"blue\").\nadjacent_to(2,C) :- node(2), node(C), C = 1.\nadjacent_to(1,C) :- node(1), node(C), C = 2.\nadjacent_to(2,C) :- node(2), node(C), C = 3.\nadjacent_to(1,C) :- node(1), node(C), C = 3.\ncolour(\"limeGreen\").\ncolour(\"scarlet\")."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 3 and node C where C is 2\nThere are 14 nodes\nIt can't be the case that a node has more than one colour\nThere is a connection between node 2 and node C where C is 1", "output": "linked_to(3,C) :- node(3), node(C), C = 2.\nnode(1..14).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nlinked_to(2,C) :- node(2), node(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 3 and node X where X is 1\nOut of the shade available, there is pink\nIt is not allowed for adjacent nodes to share the same colour\nThere is a connection between node 2 and node X where X is 1\nThere is a connection between node 2 and node X where X is 3\nIt can't be the case that a node has more than one colour", "output": "linked_to(3,X) :- node(3), node(X), X = 1.\nshade(\"pink\").\n:- linked_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\nlinked_to(2,X) :- node(2), node(X), X = 1.\nlinked_to(2,X) :- node(2), node(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "node 1 and node 2 are connected\nnode 2 and node 1 are connected\ncyan is a colour\nEvery node can only be assigned a single colour\nA node goes from 1..3\nnode 3 and node 2 are connected\nred is a colour", "output": "connected_to(1,C) :- node(1), node(C), C = 2.\nconnected_to(2,C) :- node(2), node(C), C = 1.\ncolour(\"cyan\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nnode(1..3).\nconnected_to(3,C) :- node(3), node(C), C = 2.\ncolour(\"red\")."}
{"instruction": "Translate this to ASP code", "input": "Emerald is a hue\nskyBlue is a hue\nA vertex goes from 1..3\nvertex 2 and vertex 3 are connected\nvertex 3 and vertex 1 are connected\nmaroon is a hue\nConnected vertexs cannot have the same colour\nvertex 3 and vertex 2 are connected\nvertex 1 and vertex 2 are connected\nvertex 1 and vertex 3 are connected", "output": "hue(\"Emerald\").\nhue(\"skyBlue\").\nvertex(1..3).\nattached_to(2,C) :- vertex(2), vertex(C), C = 3.\nattached_to(3,C) :- vertex(3), vertex(C), C = 1.\nhue(\"maroon\").\n:- attached_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C).\nattached_to(3,C) :- vertex(3), vertex(C), C = 2.\nattached_to(1,C) :- vertex(1), vertex(C), C = 2.\nattached_to(1,C) :- vertex(1), vertex(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "elements 2 and 1 are connected\nThere are elements 1..32\nIf two elements are connected, they must have different colours\nelements 2 and 3 are connected\nelements 1 and 2 are connected\nelements can't be assigned more than one of the colours", "output": "attached_to(2,C) :- element(2), element(C), C = 1.\nelement(1..32).\n:- attached_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C).\nattached_to(2,C) :- element(2), element(C), C = 3.\nattached_to(1,C) :- element(1), element(C), C = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 3 and vertex G where G is 2\nOut of the hues available, there is cyan\nThere is a connection between vertex 2 and vertex G where G is 3\nOut of the hues available, there is Emerald\nIt can't be the case that a vertex has more than one colour\nThere is a connection between vertex 1 and vertex G where G is 3\nOut of the hue available, there is red\nThere is a connection between vertex 2 and vertex G where G is 1", "output": "connected_to(3,G) :- vertex(3), vertex(G), G = 2.\nhue(\"cyan\").\nconnected_to(2,G) :- vertex(2), vertex(G), G = 3.\nhue(\"Emerald\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nconnected_to(1,G) :- vertex(1), vertex(G), G = 3.\nhue(\"red\").\nconnected_to(2,G) :- vertex(2), vertex(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "point 1 and point 3 are connected\npoint 3 and point 1 are connected\nolive is a hue\npoint 2 and point 1 are connected\nEvery point can only be assigned a single colour\npoint 1 and point 2 are connected\nConnected points cannot have the same colour\npurple is a hue\npoint 2 and point 3 are connected\nA point goes from 1..14", "output": "connected_to(1,A) :- point(1), point(A), A = 3.\nconnected_to(3,A) :- point(3), point(A), A = 1.\nhue(\"olive\").\nconnected_to(2,A) :- point(2), point(A), A = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nconnected_to(1,A) :- point(1), point(A), A = 2.\n:- connected_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\nhue(\"purple\").\nconnected_to(2,A) :- point(2), point(A), A = 3.\npoint(1..14)."}
{"instruction": "Translate this to ASP code", "input": "Every element can only be assigned a single colour\nelement 2 and element 3 are connected\nelement 1 and element 3 are connected\ngreen is a hue\nConnected elements cannot have the same colour\nA element goes from 1..14\nelement 3 and element 1 are connected\nelement 3 and element 2 are connected\nelement 2 and element 1 are connected\npurple is a hue", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nattached_to(2,G) :- element(2), element(G), G = 3.\nattached_to(1,G) :- element(1), element(G), G = 3.\nhue(\"green\").\n:- attached_to(G,Y), element(G), assigned_to(G,C), element(Y), assigned_to(Y,C), color(C).\nelement(1..14).\nattached_to(3,G) :- element(3), element(G), G = 1.\nattached_to(3,G) :- element(3), element(G), G = 2.\nattached_to(2,G) :- element(2), element(G), G = 1.\nhue(\"purple\")."}
{"instruction": "Translate this to ASP code", "input": "Out of the shades available, there is cobalt\nThere is a connection between node 1 and node X where X is 3\nThere is a connection between node 2 and node X where X is 1", "output": "shade(\"cobalt\").\nlinked_to(1,X) :- node(1), node(X), X = 3.\nlinked_to(2,X) :- node(2), node(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "Every vertex can only be assigned a single colour\ngreen is a hue\nConnected vertexs cannot have the same colour\npink is a hue", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nhue(\"green\").\n:- joined_to(G,Y), vertex(G), assigned_to(G,C), vertex(Y), assigned_to(Y,C), color(C).\nhue(\"pink\")."}
{"instruction": "Translate this to ASP code", "input": "pink is a colour\nA point goes from 1..14\npoint 2 and point 3 are connected\nConnected points cannot have the same colour\npoint 1 and point 3 are connected\npoint 1 and point 2 are connected", "output": "colour(\"pink\").\npoint(1..14).\nattached_to(2,C) :- point(2), point(C), C = 3.\n:- attached_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\nattached_to(1,C) :- point(1), point(C), C = 3.\nattached_to(1,C) :- point(1), point(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "The colour blue exists\nvertexs 1 and 3 are connected\nvertexs 2 and 3 are connected\nThe colour olive exists\nvertexs 3 and 1 are connected\nvertexs 1 and 2 are connected\nThe colour purple exists\nvertexs 3 and 2 are connected", "output": "colour(\"blue\").\nconnected_to(1,A) :- vertex(1), vertex(A), A = 3.\nconnected_to(2,A) :- vertex(2), vertex(A), A = 3.\ncolour(\"olive\").\nconnected_to(3,A) :- vertex(3), vertex(A), A = 1.\nconnected_to(1,A) :- vertex(1), vertex(A), A = 2.\ncolour(\"purple\").\nconnected_to(3,A) :- vertex(3), vertex(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent elements to share the same colour\nOut of the colours available, there is jade\nThere is a connection between element 1 and element A where A is 2\nIt can't be the case that a element has more than one colour", "output": ":- connected_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C).\ncolour(\"jade\").\nconnected_to(1,A) :- element(1), element(A), A = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "elements 2 and 3 are connected\nelements 2 and 1 are connected\nelements 3 and 2 are connected\nelements 1 and 2 are connected\nThere are elements 1..32\nThe colour cobalt exists", "output": "joined_to(2,A) :- element(2), element(A), A = 3.\njoined_to(2,A) :- element(2), element(A), A = 1.\njoined_to(3,A) :- element(3), element(A), A = 2.\njoined_to(1,A) :- element(1), element(A), A = 2.\nelement(1..32).\ncolour(\"cobalt\")."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent elements to share the same colour\nOut of the shades available, there is Emerald\nThere is a connection between element 1 and element X where X is 2\nThere is a connection between element 2 and element X where X is 3\nOut of the shades available, there is cyan\nIt can't be the case that a element has more than one colour\nThere are 3 elements\nThere is a connection between element 1 and element X where X is 3", "output": ":- attached_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nshade(\"Emerald\").\nattached_to(1,X) :- element(1), element(X), X = 2.\nattached_to(2,X) :- element(2), element(X), X = 3.\nshade(\"cyan\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nelement(1..3).\nattached_to(1,X) :- element(1), element(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "point 1 and point 2 are connected\npoint 2 and point 3 are connected\npoint 3 and point 1 are connected\npurple is a colour\npoint 2 and point 1 are connected", "output": "connected_to(1,X) :- point(1), point(X), X = 2.\nconnected_to(2,X) :- point(2), point(X), X = 3.\nconnected_to(3,X) :- point(3), point(X), X = 1.\ncolour(\"purple\").\nconnected_to(2,X) :- point(2), point(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "Out of the hue available, there is pink\nThere is a connection between node 1 and node X where X is 2\nIt can't be the case that a node has more than one colour\nThere is a connection between node 1 and node X where X is 3", "output": "hue(\"pink\").\nattached_to(1,X) :- node(1), node(X), X = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nattached_to(1,X) :- node(1), node(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 2 and point G where G is 1\nOut of the shades available, there is cyan\nIt can't be the case that a point has more than one colour\nThere is a connection between point 3 and point G where G is 1\nThere are 14 points", "output": "linked_to(2,G) :- point(2), point(G), G = 1.\nshade(\"cyan\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nlinked_to(3,G) :- point(3), point(G), G = 1.\npoint(1..14)."}
{"instruction": "Translate this to ASP code", "input": "The colour scarlet exists\nnodes can't be assigned more than one of the colours\nThere are nodes 1..32\nThe colour blue exists\nThe colour mint exists\nIf two nodes are connected, they must have different colours\nnodes 1 and 2 are connected\nnodes 3 and 2 are connected", "output": "colour(\"scarlet\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nnode(1..32).\ncolour(\"blue\").\ncolour(\"mint\").\n:- linked_to(C,Y), node(C), assigned_to(C,C), node(Y), assigned_to(Y,C), color(C).\nlinked_to(1,C) :- node(1), node(C), C = 2.\nlinked_to(3,C) :- node(3), node(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "Every vertex can only be assigned a single colour\nvertex 3 and vertex 2 are connected\nConnected vertexs cannot have the same colour\njade is a colour\nmaroon is a colour\nvertex 1 and vertex 2 are connected\nvertex 2 and vertex 1 are connected\nblue is a colour\nvertex 2 and vertex 3 are connected\nvertex 3 and vertex 1 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nlinked_to(3,A) :- vertex(3), vertex(A), A = 2.\n:- linked_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\ncolour(\"jade\").\ncolour(\"maroon\").\nlinked_to(1,A) :- vertex(1), vertex(A), A = 2.\nlinked_to(2,A) :- vertex(2), vertex(A), A = 1.\ncolour(\"blue\").\nlinked_to(2,A) :- vertex(2), vertex(A), A = 3.\nlinked_to(3,A) :- vertex(3), vertex(A), A = 1."}
{"instruction": "Translate this to ASP code", "input": "Connected elements cannot have the same colour\nelement 2 and element 1 are connected\nscarlet is a shade\nelement 1 and element 2 are connected", "output": ":- connected_to(G,Y), element(G), assigned_to(G,C), element(Y), assigned_to(Y,C), color(C).\nconnected_to(2,G) :- element(2), element(G), G = 1.\nshade(\"scarlet\").\nconnected_to(1,G) :- element(1), element(G), G = 2."}
{"instruction": "Translate this to ASP code", "input": "points can't be assigned more than one of the colours\nThere are points 1..3\nIf two points are connected, they must have different colours\npoints 3 and 1 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\npoint(1..3).\n:- attached_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\nattached_to(3,G) :- point(3), point(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "nodes 3 and 2 are connected\nThere are nodes 1..3\nThe shade crimson exists\nIf two nodes are connected, they must have different colours\nThe shade cobalt exists\nnodes 2 and 3 are connected\nnodes 1 and 2 are connected\nnodes 2 and 1 are connected", "output": "adjacent_to(3,G) :- node(3), node(G), G = 2.\nnode(1..3).\nshade(\"crimson\").\n:- adjacent_to(G,Y), node(G), assigned_to(G,C), node(Y), assigned_to(Y,C), color(C).\nshade(\"cobalt\").\nadjacent_to(2,G) :- node(2), node(G), G = 3.\nadjacent_to(1,G) :- node(1), node(G), G = 2.\nadjacent_to(2,G) :- node(2), node(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "node 1 and node 3 are connected\nA node goes from 1..14\nmint is a colour\nmaroon is a colour\nnode 2 and node 3 are connected\nnode 2 and node 1 are connected\ncobalt is a colour\nEvery node can only be assigned a single colour\nConnected nodes cannot have the same colour\nnode 3 and node 1 are connected", "output": "joined_to(1,C) :- node(1), node(C), C = 3.\nnode(1..14).\ncolour(\"mint\").\ncolour(\"maroon\").\njoined_to(2,C) :- node(2), node(C), C = 3.\njoined_to(2,C) :- node(2), node(C), C = 1.\ncolour(\"cobalt\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\n:- joined_to(C,Y), node(C), assigned_to(C,C), node(Y), assigned_to(Y,C), color(C).\njoined_to(3,C) :- node(3), node(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "point 2 and point 1 are connected\npoint 1 and point 2 are connected\nA point goes from 1..14\nEvery point can only be assigned a single colour\nskyBlue is a colour\npoint 3 and point 1 are connected\npoint 2 and point 3 are connected\npoint 3 and point 2 are connected\nmaroon is a colour", "output": "adjacent_to(2,C) :- point(2), point(C), C = 1.\nadjacent_to(1,C) :- point(1), point(C), C = 2.\npoint(1..14).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\ncolour(\"skyBlue\").\nadjacent_to(3,C) :- point(3), point(C), C = 1.\nadjacent_to(2,C) :- point(2), point(C), C = 3.\nadjacent_to(3,C) :- point(3), point(C), C = 2.\ncolour(\"maroon\")."}
{"instruction": "Translate this to ASP code", "input": "Connected points cannot have the same colour\nred is a hue\npoint 3 and point 2 are connected\npoint 3 and point 1 are connected\ncobalt is a hue\npoint 2 and point 3 are connected\npoint 1 and point 3 are connected\nA point goes from 1..14", "output": ":- linked_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\nhue(\"red\").\nlinked_to(3,G) :- point(3), point(G), G = 2.\nlinked_to(3,G) :- point(3), point(G), G = 1.\nhue(\"cobalt\").\nlinked_to(2,G) :- point(2), point(G), G = 3.\nlinked_to(1,G) :- point(1), point(G), G = 3.\npoint(1..14)."}
{"instruction": "Translate this to ASP code", "input": "element 2 and element 3 are connected\nelement 1 and element 2 are connected\nEvery element can only be assigned a single colour\nelement 3 and element 2 are connected\nA element goes from 1..14", "output": "connected_to(2,G) :- element(2), element(G), G = 3.\nconnected_to(1,G) :- element(1), element(G), G = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nconnected_to(3,G) :- element(3), element(G), G = 2.\nelement(1..14)."}
{"instruction": "Translate this to ASP code", "input": "Out of the shades available, there is mint\nIt can't be the case that a element has more than one colour\nOut of the shade available, there is maroon\nThere is a connection between element 2 and element C where C is 3\nThere is a connection between element 3 and element C where C is 2\nThere are 32 elements\nOut of the shades available, there is cyan\nIt is not allowed for adjacent elements to share the same colour\nThere is a connection between element 1 and element C where C is 3", "output": "shade(\"mint\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nshade(\"maroon\").\nattached_to(2,C) :- element(2), element(C), C = 3.\nattached_to(3,C) :- element(3), element(C), C = 2.\nelement(1..32).\nshade(\"cyan\").\n:- attached_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C).\nattached_to(1,C) :- element(1), element(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between element 3 and element X where X is 1\nThere are 14 elements\nOut of the shades available, there is skyBlue\nThere is a connection between element 3 and element X where X is 2\nOut of the shades available, there is limeGreen\nThere is a connection between element 2 and element X where X is 1\nIt is not allowed for adjacent elements to share the same colour\nThere is a connection between element 1 and element X where X is 3\nThere is a connection between element 1 and element X where X is 2\nIt can't be the case that a element has more than one colour", "output": "adjacent_to(3,X) :- element(3), element(X), X = 1.\nelement(1..14).\nshade(\"skyBlue\").\nadjacent_to(3,X) :- element(3), element(X), X = 2.\nshade(\"limeGreen\").\nadjacent_to(2,X) :- element(2), element(X), X = 1.\n:- adjacent_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nadjacent_to(1,X) :- element(1), element(X), X = 3.\nadjacent_to(1,X) :- element(1), element(X), X = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "If two nodes are connected, they must have different colours\nnodes 1 and 3 are connected\nnodes 3 and 1 are connected\nnodes 3 and 2 are connected\nnodes 2 and 3 are connected\nThere are nodes 1..3\nThe hue cobalt exists\nnodes 2 and 1 are connected\nThe hue jade exists", "output": ":- linked_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\nlinked_to(1,X) :- node(1), node(X), X = 3.\nlinked_to(3,X) :- node(3), node(X), X = 1.\nlinked_to(3,X) :- node(3), node(X), X = 2.\nlinked_to(2,X) :- node(2), node(X), X = 3.\nnode(1..3).\nhue(\"cobalt\").\nlinked_to(2,X) :- node(2), node(X), X = 1.\nhue(\"jade\")."}
{"instruction": "Translate this to ASP code", "input": "vertex 3 and vertex 2 are connected\nConnected vertexs cannot have the same colour\nblue is a hue\nmint is a hue\nvertex 1 and vertex 2 are connected\nA vertex goes from 1..14\nvertex 1 and vertex 3 are connected\nvertex 3 and vertex 1 are connected\nEvery vertex can only be assigned a single colour", "output": "joined_to(3,X) :- vertex(3), vertex(X), X = 2.\n:- joined_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\nhue(\"blue\").\nhue(\"mint\").\njoined_to(1,X) :- vertex(1), vertex(X), X = 2.\nvertex(1..14).\njoined_to(1,X) :- vertex(1), vertex(X), X = 3.\njoined_to(3,X) :- vertex(3), vertex(X), X = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "elements can't be assigned more than one of the colours\nelements 1 and 3 are connected\nThe colour azure exists\nelements 3 and 2 are connected\nelements 3 and 1 are connected\nelements 1 and 2 are connected\nThere are elements 1..32\nIf two elements are connected, they must have different colours\nThe colour scarlet exists\nelements 2 and 3 are connected\nelements 2 and 1 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nattached_to(1,G) :- element(1), element(G), G = 3.\ncolour(\"azure\").\nattached_to(3,G) :- element(3), element(G), G = 2.\nattached_to(3,G) :- element(3), element(G), G = 1.\nattached_to(1,G) :- element(1), element(G), G = 2.\nelement(1..32).\n:- attached_to(G,Y), element(G), assigned_to(G,C), element(Y), assigned_to(Y,C), color(C).\ncolour(\"scarlet\").\nattached_to(2,G) :- element(2), element(G), G = 3.\nattached_to(2,G) :- element(2), element(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "point 1 and point 2 are connected\npoint 2 and point 3 are connected\nblue is a shade\npoint 2 and point 1 are connected\nEvery point can only be assigned a single colour\npoint 3 and point 1 are connected\nA point goes from 1..32\npink is a shade\nConnected points cannot have the same colour", "output": "connected_to(1,G) :- point(1), point(G), G = 2.\nconnected_to(2,G) :- point(2), point(G), G = 3.\nshade(\"blue\").\nconnected_to(2,G) :- point(2), point(G), G = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nconnected_to(3,G) :- point(3), point(G), G = 1.\npoint(1..32).\nshade(\"pink\").\n:- connected_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent vertexs to share the same colour\nThere is a connection between vertex 1 and vertex C where C is 3\nOut of the hues available, there is mint\nOut of the hues available, there is blue\nOut of the hue available, there is maroon\nThere is a connection between vertex 1 and vertex C where C is 2", "output": ":- attached_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C).\nattached_to(1,C) :- vertex(1), vertex(C), C = 3.\nhue(\"mint\").\nhue(\"blue\").\nhue(\"maroon\").\nattached_to(1,C) :- vertex(1), vertex(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 3 and vertex G where G is 2\nThere is a connection between vertex 2 and vertex G where G is 3\nIt can't be the case that a vertex has more than one colour\nOut of the hues available, there is cobalt\nOut of the hues available, there is Emerald\nThere is a connection between vertex 1 and vertex G where G is 3\nIt is not allowed for adjacent vertexs to share the same colour", "output": "linked_to(3,G) :- vertex(3), vertex(G), G = 2.\nlinked_to(2,G) :- vertex(2), vertex(G), G = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nhue(\"cobalt\").\nhue(\"Emerald\").\nlinked_to(1,G) :- vertex(1), vertex(G), G = 3.\n:- linked_to(G,Y), vertex(G), assigned_to(G,C), vertex(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "vertex 1 and vertex 3 are connected\ngreen is a hue\nvertex 3 and vertex 1 are connected\nEvery vertex can only be assigned a single colour\nvertex 1 and vertex 2 are connected", "output": "joined_to(1,C) :- vertex(1), vertex(C), C = 3.\nhue(\"green\").\njoined_to(3,C) :- vertex(3), vertex(C), C = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\njoined_to(1,C) :- vertex(1), vertex(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 2 and node C where C is 3\nOut of the colour available, there is red\nThere is a connection between node 2 and node C where C is 1\nThere are 32 nodes\nThere is a connection between node 1 and node C where C is 2\nOut of the colours available, there is green\nIt is not allowed for adjacent nodes to share the same colour\nThere is a connection between node 3 and node C where C is 2\nThere is a connection between node 1 and node C where C is 3", "output": "joined_to(2,C) :- node(2), node(C), C = 3.\ncolour(\"red\").\njoined_to(2,C) :- node(2), node(C), C = 1.\nnode(1..32).\njoined_to(1,C) :- node(1), node(C), C = 2.\ncolour(\"green\").\n:- joined_to(C,Y), node(C), assigned_to(C,C), node(Y), assigned_to(Y,C), color(C).\njoined_to(3,C) :- node(3), node(C), C = 2.\njoined_to(1,C) :- node(1), node(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "points 2 and 1 are connected\nThe hue limeGreen exists\npoints 1 and 2 are connected\npoints 2 and 3 are connected", "output": "connected_to(2,C) :- point(2), point(C), C = 1.\nhue(\"limeGreen\").\nconnected_to(1,C) :- point(1), point(C), C = 2.\nconnected_to(2,C) :- point(2), point(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 3 and point G where G is 2\nOut of the hues available, there is mint\nThere is a connection between point 2 and point G where G is 1\nIt is not allowed for adjacent points to share the same colour\nOut of the hues available, there is azure\nOut of the hue available, there is crimson", "output": "linked_to(3,G) :- point(3), point(G), G = 2.\nhue(\"mint\").\nlinked_to(2,G) :- point(2), point(G), G = 1.\n:- linked_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\nhue(\"azure\").\nhue(\"crimson\")."}
{"instruction": "Translate this to ASP code", "input": "elements 2 and 3 are connected\nThe hue azure exists\nelements 1 and 2 are connected\nThe hue olive exists\nelements 1 and 3 are connected", "output": "linked_to(2,X) :- element(2), element(X), X = 3.\nhue(\"azure\").\nlinked_to(1,X) :- element(1), element(X), X = 2.\nhue(\"olive\").\nlinked_to(1,X) :- element(1), element(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "points 1 and 3 are connected\nThe colour maroon exists\nIf two points are connected, they must have different colours\npoints 3 and 2 are connected\nThe colour olive exists\nThe colour cyan exists", "output": "adjacent_to(1,X) :- point(1), point(X), X = 3.\ncolour(\"maroon\").\n:- adjacent_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\nadjacent_to(3,X) :- point(3), point(X), X = 2.\ncolour(\"olive\").\ncolour(\"cyan\")."}
{"instruction": "Translate this to ASP code", "input": "points 2 and 1 are connected\npoints can't be assigned more than one of the colours\npoints 2 and 3 are connected\nThe hue olive exists\nThere are points 1..14\npoints 3 and 1 are connected\nIf two points are connected, they must have different colours\npoints 1 and 2 are connected\npoints 1 and 3 are connected", "output": "connected_to(2,X) :- point(2), point(X), X = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nconnected_to(2,X) :- point(2), point(X), X = 3.\nhue(\"olive\").\npoint(1..14).\nconnected_to(3,X) :- point(3), point(X), X = 1.\n:- connected_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\nconnected_to(1,X) :- point(1), point(X), X = 2.\nconnected_to(1,X) :- point(1), point(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "element 2 and element 3 are connected\npurple is a shade\nA element goes from 1..3\nEvery element can only be assigned a single colour\nelement 1 and element 2 are connected\nConnected elements cannot have the same colour\nelement 3 and element 1 are connected", "output": "attached_to(2,X) :- element(2), element(X), X = 3.\nshade(\"purple\").\nelement(1..3).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nattached_to(1,X) :- element(1), element(X), X = 2.\n:- attached_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nattached_to(3,X) :- element(3), element(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "nodes can't be assigned more than one of the colours\nnodes 1 and 3 are connected\nnodes 1 and 2 are connected\nnodes 3 and 1 are connected\nnodes 2 and 1 are connected\nIf two nodes are connected, they must have different colours\nnodes 2 and 3 are connected\nThere are nodes 1..32\nThe colour olive exists\nThe colour skyBlue exists", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nlinked_to(1,C) :- node(1), node(C), C = 3.\nlinked_to(1,C) :- node(1), node(C), C = 2.\nlinked_to(3,C) :- node(3), node(C), C = 1.\nlinked_to(2,C) :- node(2), node(C), C = 1.\n:- linked_to(C,Y), node(C), assigned_to(C,C), node(Y), assigned_to(Y,C), color(C).\nlinked_to(2,C) :- node(2), node(C), C = 3.\nnode(1..32).\ncolour(\"olive\").\ncolour(\"skyBlue\")."}
{"instruction": "Translate this to ASP code", "input": "The hue purple exists\nThere are points 1..32\npoints 2 and 1 are connected\npoints 1 and 2 are connected\npoints can't be assigned more than one of the colours\nThe hue cobalt exists", "output": "hue(\"purple\").\npoint(1..32).\nconnected_to(2,X) :- point(2), point(X), X = 1.\nconnected_to(1,X) :- point(1), point(X), X = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nhue(\"cobalt\")."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent elements to share the same colour\nThere is a connection between element 3 and element G where G is 2\nThere is a connection between element 3 and element G where G is 1\nThere is a connection between element 2 and element G where G is 1\nThere is a connection between element 2 and element G where G is 3\nOut of the shades available, there is mint\nOut of the shade available, there is scarlet\nThere is a connection between element 1 and element G where G is 2\nThere are 3 elements\nIt can't be the case that a element has more than one colour", "output": ":- connected_to(G,Y), element(G), assigned_to(G,C), element(Y), assigned_to(Y,C), color(C).\nconnected_to(3,G) :- element(3), element(G), G = 2.\nconnected_to(3,G) :- element(3), element(G), G = 1.\nconnected_to(2,G) :- element(2), element(G), G = 1.\nconnected_to(2,G) :- element(2), element(G), G = 3.\nshade(\"mint\").\nshade(\"scarlet\").\nconnected_to(1,G) :- element(1), element(G), G = 2.\nelement(1..3).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 2 and point C where C is 3\nThere is a connection between point 3 and point C where C is 1\nIt is not allowed for adjacent points to share the same colour\nOut of the shades available, there is Emerald", "output": "adjacent_to(2,C) :- point(2), point(C), C = 3.\nadjacent_to(3,C) :- point(3), point(C), C = 1.\n:- adjacent_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\nshade(\"Emerald\")."}
{"instruction": "Translate this to ASP code", "input": "nodes 2 and 1 are connected\nThe hue pink exists\nnodes can't be assigned more than one of the colours", "output": "attached_to(2,C) :- node(2), node(C), C = 1.\nhue(\"pink\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "Connected vertexs cannot have the same colour\nvertex 3 and vertex 2 are connected\nvertex 1 and vertex 3 are connected\nEvery vertex can only be assigned a single colour\nscarlet is a shade\ncyan is a shade\nvertex 3 and vertex 1 are connected", "output": ":- connected_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C).\nconnected_to(3,C) :- vertex(3), vertex(C), C = 2.\nconnected_to(1,C) :- vertex(1), vertex(C), C = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nshade(\"scarlet\").\nshade(\"cyan\").\nconnected_to(3,C) :- vertex(3), vertex(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 2 and node A where A is 1\nThere is a connection between node 2 and node A where A is 3\nThere is a connection between node 3 and node A where A is 1\nThere is a connection between node 1 and node A where A is 2\nThere is a connection between node 3 and node A where A is 2", "output": "attached_to(2,A) :- node(2), node(A), A = 1.\nattached_to(2,A) :- node(2), node(A), A = 3.\nattached_to(3,A) :- node(3), node(A), A = 1.\nattached_to(1,A) :- node(1), node(A), A = 2.\nattached_to(3,A) :- node(3), node(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "Every node can only be assigned a single colour\nA node goes from 1..3\nnode 3 and node 2 are connected\nConnected nodes cannot have the same colour\nnode 1 and node 2 are connected\nlimeGreen is a colour", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nnode(1..3).\njoined_to(3,G) :- node(3), node(G), G = 2.\n:- joined_to(G,Y), node(G), assigned_to(G,C), node(Y), assigned_to(Y,C), color(C).\njoined_to(1,G) :- node(1), node(G), G = 2.\ncolour(\"limeGreen\")."}
{"instruction": "Translate this to ASP code", "input": "Connected vertexs cannot have the same colour\nEvery vertex can only be assigned a single colour\nvertex 3 and vertex 1 are connected\nvertex 1 and vertex 2 are connected\nvertex 2 and vertex 1 are connected", "output": ":- joined_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\njoined_to(3,X) :- vertex(3), vertex(X), X = 1.\njoined_to(1,X) :- vertex(1), vertex(X), X = 2.\njoined_to(2,X) :- vertex(2), vertex(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "A vertex goes from 1..32\nvertex 2 and vertex 1 are connected\nvertex 1 and vertex 2 are connected", "output": "vertex(1..32).\nconnected_to(2,G) :- vertex(2), vertex(G), G = 1.\nconnected_to(1,G) :- vertex(1), vertex(G), G = 2."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent nodes to share the same colour\nOut of the shade available, there is maroon\nThere is a connection between node 2 and node X where X is 1\nThere is a connection between node 3 and node X where X is 1\nIt can't be the case that a node has more than one colour", "output": ":- linked_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\nshade(\"maroon\").\nlinked_to(2,X) :- node(2), node(X), X = 1.\nlinked_to(3,X) :- node(3), node(X), X = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent elements to share the same colour\nOut of the shades available, there is blue\nOut of the shades available, there is Emerald\nIt can't be the case that a element has more than one colour\nThere is a connection between element 2 and element A where A is 1\nThere is a connection between element 1 and element A where A is 3\nThere is a connection between element 2 and element A where A is 3", "output": ":- adjacent_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C).\nshade(\"blue\").\nshade(\"Emerald\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nadjacent_to(2,A) :- element(2), element(A), A = 1.\nadjacent_to(1,A) :- element(1), element(A), A = 3.\nadjacent_to(2,A) :- element(2), element(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "Out of the shades available, there is olive\nOut of the shades available, there is blue\nThere is a connection between point 2 and point G where G is 1\nThere is a connection between point 3 and point G where G is 1\nThere is a connection between point 1 and point G where G is 2", "output": "shade(\"olive\").\nshade(\"blue\").\nadjacent_to(2,G) :- point(2), point(G), G = 1.\nadjacent_to(3,G) :- point(3), point(G), G = 1.\nadjacent_to(1,G) :- point(1), point(G), G = 2."}
{"instruction": "Translate this to ASP code", "input": "crimson is a hue\nvertex 2 and vertex 1 are connected\nlimeGreen is a hue\nvertex 3 and vertex 2 are connected", "output": "hue(\"crimson\").\nadjacent_to(2,G) :- vertex(2), vertex(G), G = 1.\nhue(\"limeGreen\").\nadjacent_to(3,G) :- vertex(3), vertex(G), G = 2."}
{"instruction": "Translate this to ASP code", "input": "vertexs can't be assigned more than one of the colours\nvertexs 3 and 1 are connected\nThe hue skyBlue exists\nvertexs 1 and 2 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nadjacent_to(3,C) :- vertex(3), vertex(C), C = 1.\nhue(\"skyBlue\").\nadjacent_to(1,C) :- vertex(1), vertex(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "point 3 and point 1 are connected\nred is a shade\nConnected points cannot have the same colour", "output": "connected_to(3,X) :- point(3), point(X), X = 1.\nshade(\"red\").\n:- connected_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "limeGreen is a colour\nConnected points cannot have the same colour\npoint 1 and point 3 are connected\nA point goes from 1..32\nazure is a colour", "output": "colour(\"limeGreen\").\n:- attached_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\nattached_to(1,C) :- point(1), point(C), C = 3.\npoint(1..32).\ncolour(\"azure\")."}
{"instruction": "Translate this to ASP code", "input": "The hue azure exists\nIf two elements are connected, they must have different colours\nelements 1 and 3 are connected\nThere are elements 1..3\nelements 1 and 2 are connected\nelements 3 and 1 are connected\nelements 2 and 3 are connected\nThe hue Emerald exists\nelements 2 and 1 are connected", "output": "hue(\"azure\").\n:- attached_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nattached_to(1,X) :- element(1), element(X), X = 3.\nelement(1..3).\nattached_to(1,X) :- element(1), element(X), X = 2.\nattached_to(3,X) :- element(3), element(X), X = 1.\nattached_to(2,X) :- element(2), element(X), X = 3.\nhue(\"Emerald\").\nattached_to(2,X) :- element(2), element(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "Out of the colours available, there is mint\nThere is a connection between element 3 and element X where X is 2\nIt can't be the case that a element has more than one colour\nThere is a connection between element 2 and element X where X is 3\nThere are 3 elements\nThere is a connection between element 3 and element X where X is 1\nThere is a connection between element 1 and element X where X is 3", "output": "colour(\"mint\").\nlinked_to(3,X) :- element(3), element(X), X = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nlinked_to(2,X) :- element(2), element(X), X = 3.\nelement(1..3).\nlinked_to(3,X) :- element(3), element(X), X = 1.\nlinked_to(1,X) :- element(1), element(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "vertex 2 and vertex 1 are connected\npink is a hue\nskyBlue is a hue\ngreen is a hue\nvertex 1 and vertex 2 are connected\nvertex 3 and vertex 2 are connected\nA vertex goes from 1..14", "output": "adjacent_to(2,A) :- vertex(2), vertex(A), A = 1.\nhue(\"pink\").\nhue(\"skyBlue\").\nhue(\"green\").\nadjacent_to(1,A) :- vertex(1), vertex(A), A = 2.\nadjacent_to(3,A) :- vertex(3), vertex(A), A = 2.\nvertex(1..14)."}
{"instruction": "Translate this to ASP code", "input": "elements 3 and 2 are connected\nelements can't be assigned more than one of the colours\nelements 1 and 3 are connected\nelements 1 and 2 are connected\nThe shade jade exists\nThe shade crimson exists", "output": "joined_to(3,X) :- element(3), element(X), X = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\njoined_to(1,X) :- element(1), element(X), X = 3.\njoined_to(1,X) :- element(1), element(X), X = 2.\nshade(\"jade\").\nshade(\"crimson\")."}
{"instruction": "Translate this to ASP code", "input": "maroon is a colour\npoint 3 and point 1 are connected\nConnected points cannot have the same colour\npoint 3 and point 2 are connected\npoint 1 and point 3 are connected", "output": "colour(\"maroon\").\nattached_to(3,G) :- point(3), point(G), G = 1.\n:- attached_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\nattached_to(3,G) :- point(3), point(G), G = 2.\nattached_to(1,G) :- point(1), point(G), G = 3."}
{"instruction": "Translate this to ASP code", "input": "The shade limeGreen exists\nnodes 3 and 1 are connected\nThe shade maroon exists\nnodes can't be assigned more than one of the colours\nThere are nodes 1..3\nIf two nodes are connected, they must have different colours\nnodes 1 and 2 are connected\nnodes 2 and 1 are connected\nnodes 2 and 3 are connected\nnodes 3 and 2 are connected\nnodes 1 and 3 are connected", "output": "shade(\"limeGreen\").\nattached_to(3,X) :- node(3), node(X), X = 1.\nshade(\"maroon\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nnode(1..3).\n:- attached_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\nattached_to(1,X) :- node(1), node(X), X = 2.\nattached_to(2,X) :- node(2), node(X), X = 1.\nattached_to(2,X) :- node(2), node(X), X = 3.\nattached_to(3,X) :- node(3), node(X), X = 2.\nattached_to(1,X) :- node(1), node(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 3 and node G where G is 2\nOut of the hues available, there is olive", "output": "adjacent_to(3,G) :- node(3), node(G), G = 2.\nhue(\"olive\")."}
{"instruction": "Translate this to ASP code", "input": "nodes can't be assigned more than one of the colours\nIf two nodes are connected, they must have different colours\nnodes 3 and 1 are connected\nThe colour Emerald exists\nnodes 2 and 3 are connected\nThe colour red exists\nnodes 2 and 1 are connected\nThe colour cyan exists", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\n:- adjacent_to(G,Y), node(G), assigned_to(G,C), node(Y), assigned_to(Y,C), color(C).\nadjacent_to(3,G) :- node(3), node(G), G = 1.\ncolour(\"Emerald\").\nadjacent_to(2,G) :- node(2), node(G), G = 3.\ncolour(\"red\").\nadjacent_to(2,G) :- node(2), node(G), G = 1.\ncolour(\"cyan\")."}
{"instruction": "Translate this to ASP code", "input": "points 3 and 2 are connected\nIf two points are connected, they must have different colours\nThe shade skyBlue exists\npoints 2 and 3 are connected\nThe shade jade exists\npoints 3 and 1 are connected\nThere are points 1..14\npoints can't be assigned more than one of the colours", "output": "joined_to(3,G) :- point(3), point(G), G = 2.\n:- joined_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\nshade(\"skyBlue\").\njoined_to(2,G) :- point(2), point(G), G = 3.\nshade(\"jade\").\njoined_to(3,G) :- point(3), point(G), G = 1.\npoint(1..14).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "Out of the hues available, there is cobalt\nThere is a connection between element 1 and element X where X is 2\nThere is a connection between element 3 and element X where X is 2\nThere is a connection between element 3 and element X where X is 1\nThere are 32 elements\nIt can't be the case that a element has more than one colour\nThere is a connection between element 2 and element X where X is 3\nThere is a connection between element 1 and element X where X is 3\nIt is not allowed for adjacent elements to share the same colour\nThere is a connection between element 2 and element X where X is 1\nOut of the hue available, there is scarlet", "output": "hue(\"cobalt\").\nattached_to(1,X) :- element(1), element(X), X = 2.\nattached_to(3,X) :- element(3), element(X), X = 2.\nattached_to(3,X) :- element(3), element(X), X = 1.\nelement(1..32).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nattached_to(2,X) :- element(2), element(X), X = 3.\nattached_to(1,X) :- element(1), element(X), X = 3.\n:- attached_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nattached_to(2,X) :- element(2), element(X), X = 1.\nhue(\"scarlet\")."}
{"instruction": "Translate this to ASP code", "input": "purple is a hue\nvertex 3 and vertex 2 are connected", "output": "hue(\"purple\").\nlinked_to(3,G) :- vertex(3), vertex(G), G = 2."}
{"instruction": "Translate this to ASP code", "input": "A element goes from 1..14\ncyan is a colour\nEvery element can only be assigned a single colour\nelement 2 and element 3 are connected\nelement 3 and element 2 are connected\nolive is a colour\nConnected elements cannot have the same colour", "output": "element(1..14).\ncolour(\"cyan\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nadjacent_to(2,G) :- element(2), element(G), G = 3.\nadjacent_to(3,G) :- element(3), element(G), G = 2.\ncolour(\"olive\").\n:- adjacent_to(G,Y), element(G), assigned_to(G,C), element(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "nodes can't be assigned more than one of the colours\nThe shade cyan exists\nIf two nodes are connected, they must have different colours\nnodes 1 and 3 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nshade(\"cyan\").\n:- joined_to(A,Y), node(A), assigned_to(A,C), node(Y), assigned_to(Y,C), color(C).\njoined_to(1,A) :- node(1), node(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "vertexs 1 and 2 are connected\nThe colour pink exists\nThere are vertexs 1..14\nvertexs 1 and 3 are connected\nvertexs 3 and 1 are connected\nIf two vertexs are connected, they must have different colours\nvertexs 2 and 1 are connected\nThe colour skyBlue exists\nThe colour olive exists\nvertexs 3 and 2 are connected", "output": "attached_to(1,G) :- vertex(1), vertex(G), G = 2.\ncolour(\"pink\").\nvertex(1..14).\nattached_to(1,G) :- vertex(1), vertex(G), G = 3.\nattached_to(3,G) :- vertex(3), vertex(G), G = 1.\n:- attached_to(G,Y), vertex(G), assigned_to(G,C), vertex(Y), assigned_to(Y,C), color(C).\nattached_to(2,G) :- vertex(2), vertex(G), G = 1.\ncolour(\"skyBlue\").\ncolour(\"olive\").\nattached_to(3,G) :- vertex(3), vertex(G), G = 2."}
{"instruction": "Translate this to ASP code", "input": "maroon is a colour\nEvery node can only be assigned a single colour\nnode 3 and node 2 are connected", "output": "colour(\"maroon\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\njoined_to(3,X) :- node(3), node(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent vertexs to share the same colour\nOut of the shades available, there is mint\nIt can't be the case that a vertex has more than one colour\nThere is a connection between vertex 2 and vertex A where A is 1\nThere is a connection between vertex 3 and vertex A where A is 1\nThere are 14 vertexs\nOut of the shade available, there is red\nThere is a connection between vertex 1 and vertex A where A is 3\nThere is a connection between vertex 2 and vertex A where A is 3\nOut of the shades available, there is azure\nThere is a connection between vertex 1 and vertex A where A is 2", "output": ":- connected_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\nshade(\"mint\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nconnected_to(2,A) :- vertex(2), vertex(A), A = 1.\nconnected_to(3,A) :- vertex(3), vertex(A), A = 1.\nvertex(1..14).\nshade(\"red\").\nconnected_to(1,A) :- vertex(1), vertex(A), A = 3.\nconnected_to(2,A) :- vertex(2), vertex(A), A = 3.\nshade(\"azure\").\nconnected_to(1,A) :- vertex(1), vertex(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "Out of the shades available, there is cobalt\nThere are 3 vertexs\nThere is a connection between vertex 2 and vertex X where X is 3\nThere is a connection between vertex 2 and vertex X where X is 1\nThere is a connection between vertex 3 and vertex X where X is 1\nIt is not allowed for adjacent vertexs to share the same colour\nThere is a connection between vertex 1 and vertex X where X is 3", "output": "shade(\"cobalt\").\nvertex(1..3).\njoined_to(2,X) :- vertex(2), vertex(X), X = 3.\njoined_to(2,X) :- vertex(2), vertex(X), X = 1.\njoined_to(3,X) :- vertex(3), vertex(X), X = 1.\n:- joined_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\njoined_to(1,X) :- vertex(1), vertex(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "elements 2 and 1 are connected\nelements 1 and 3 are connected\nelements 1 and 2 are connected\nThe shade red exists", "output": "connected_to(2,X) :- element(2), element(X), X = 1.\nconnected_to(1,X) :- element(1), element(X), X = 3.\nconnected_to(1,X) :- element(1), element(X), X = 2.\nshade(\"red\")."}
{"instruction": "Translate this to ASP code", "input": "elements 2 and 3 are connected\nelements 3 and 1 are connected\nThe hue crimson exists\nThe hue jade exists\nelements 3 and 2 are connected\nelements 1 and 3 are connected\nelements 2 and 1 are connected", "output": "joined_to(2,C) :- element(2), element(C), C = 3.\njoined_to(3,C) :- element(3), element(C), C = 1.\nhue(\"crimson\").\nhue(\"jade\").\njoined_to(3,C) :- element(3), element(C), C = 2.\njoined_to(1,C) :- element(1), element(C), C = 3.\njoined_to(2,C) :- element(2), element(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "elements 3 and 1 are connected\nelements can't be assigned more than one of the colours\nIf two elements are connected, they must have different colours\nThe hue purple exists\nThe hue olive exists\nelements 1 and 2 are connected", "output": "joined_to(3,C) :- element(3), element(C), C = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\n:- joined_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C).\nhue(\"purple\").\nhue(\"olive\").\njoined_to(1,C) :- element(1), element(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "A point goes from 1..3\npoint 3 and point 1 are connected\npoint 2 and point 3 are connected\npoint 1 and point 2 are connected\npoint 2 and point 1 are connected\nskyBlue is a hue", "output": "point(1..3).\nlinked_to(3,X) :- point(3), point(X), X = 1.\nlinked_to(2,X) :- point(2), point(X), X = 3.\nlinked_to(1,X) :- point(1), point(X), X = 2.\nlinked_to(2,X) :- point(2), point(X), X = 1.\nhue(\"skyBlue\")."}
{"instruction": "Translate this to ASP code", "input": "node 1 and node 2 are connected\ngreen is a hue\nEvery node can only be assigned a single colour", "output": "attached_to(1,A) :- node(1), node(A), A = 2.\nhue(\"green\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "Out of the colours available, there is azure\nOut of the colours available, there is limeGreen\nThere is a connection between vertex 1 and vertex A where A is 3\nThere is a connection between vertex 2 and vertex A where A is 1\nThere is a connection between vertex 3 and vertex A where A is 1\nIt can't be the case that a vertex has more than one colour\nThere is a connection between vertex 2 and vertex A where A is 3\nThere is a connection between vertex 3 and vertex A where A is 2", "output": "colour(\"azure\").\ncolour(\"limeGreen\").\nconnected_to(1,A) :- vertex(1), vertex(A), A = 3.\nconnected_to(2,A) :- vertex(2), vertex(A), A = 1.\nconnected_to(3,A) :- vertex(3), vertex(A), A = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nconnected_to(2,A) :- vertex(2), vertex(A), A = 3.\nconnected_to(3,A) :- vertex(3), vertex(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "It can't be the case that a vertex has more than one colour\nOut of the hues available, there is limeGreen\nThere is a connection between vertex 1 and vertex A where A is 2\nOut of the hues available, there is blue\nThere is a connection between vertex 2 and vertex A where A is 3\nThere is a connection between vertex 1 and vertex A where A is 3\nOut of the hue available, there is purple\nThere is a connection between vertex 3 and vertex A where A is 2", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nhue(\"limeGreen\").\njoined_to(1,A) :- vertex(1), vertex(A), A = 2.\nhue(\"blue\").\njoined_to(2,A) :- vertex(2), vertex(A), A = 3.\njoined_to(1,A) :- vertex(1), vertex(A), A = 3.\nhue(\"purple\").\njoined_to(3,A) :- vertex(3), vertex(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "The shade olive exists\npoints 2 and 3 are connected\npoints 3 and 2 are connected\npoints 1 and 3 are connected\nIf two points are connected, they must have different colours", "output": "shade(\"olive\").\nlinked_to(2,A) :- point(2), point(A), A = 3.\nlinked_to(3,A) :- point(3), point(A), A = 2.\nlinked_to(1,A) :- point(1), point(A), A = 3.\n:- linked_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 1 and node G where G is 2\nIt is not allowed for adjacent nodes to share the same colour\nThere is a connection between node 3 and node G where G is 2\nThere is a connection between node 2 and node G where G is 1\nThere are 3 nodes\nThere is a connection between node 2 and node G where G is 3\nOut of the shade available, there is scarlet\nOut of the shades available, there is mint\nThere is a connection between node 3 and node G where G is 1\nOut of the shades available, there is azure\nThere is a connection between node 1 and node G where G is 3", "output": "joined_to(1,G) :- node(1), node(G), G = 2.\n:- joined_to(G,Y), node(G), assigned_to(G,C), node(Y), assigned_to(Y,C), color(C).\njoined_to(3,G) :- node(3), node(G), G = 2.\njoined_to(2,G) :- node(2), node(G), G = 1.\nnode(1..3).\njoined_to(2,G) :- node(2), node(G), G = 3.\nshade(\"scarlet\").\nshade(\"mint\").\njoined_to(3,G) :- node(3), node(G), G = 1.\nshade(\"azure\").\njoined_to(1,G) :- node(1), node(G), G = 3."}
{"instruction": "Translate this to ASP code", "input": "Out of the colours available, there is Emerald\nThere is a connection between element 2 and element G where G is 1\nOut of the colours available, there is skyBlue", "output": "colour(\"Emerald\").\nconnected_to(2,G) :- element(2), element(G), G = 1.\ncolour(\"skyBlue\")."}
{"instruction": "Translate this to ASP code", "input": "points 3 and 1 are connected\npoints 2 and 3 are connected\nIf two points are connected, they must have different colours\npoints 3 and 2 are connected\nThe shade purple exists\nThe shade azure exists\npoints 1 and 3 are connected\nThe shade Emerald exists\nThere are points 1..14", "output": "joined_to(3,X) :- point(3), point(X), X = 1.\njoined_to(2,X) :- point(2), point(X), X = 3.\n:- joined_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\njoined_to(3,X) :- point(3), point(X), X = 2.\nshade(\"purple\").\nshade(\"azure\").\njoined_to(1,X) :- point(1), point(X), X = 3.\nshade(\"Emerald\").\npoint(1..14)."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent points to share the same colour\nThere is a connection between point 2 and point A where A is 3\nThere is a connection between point 3 and point A where A is 1\nThere are 3 points\nOut of the shade available, there is pink\nThere is a connection between point 1 and point A where A is 2", "output": ":- adjacent_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\nadjacent_to(2,A) :- point(2), point(A), A = 3.\nadjacent_to(3,A) :- point(3), point(A), A = 1.\npoint(1..3).\nshade(\"pink\").\nadjacent_to(1,A) :- point(1), point(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "Out of the hues available, there is azure\nIt can't be the case that a vertex has more than one colour\nThere is a connection between vertex 3 and vertex C where C is 2\nOut of the hue available, there is maroon", "output": "hue(\"azure\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nconnected_to(3,C) :- vertex(3), vertex(C), C = 2.\nhue(\"maroon\")."}
{"instruction": "Translate this to ASP code", "input": "point 2 and point 1 are connected\nEvery point can only be assigned a single colour\nA point goes from 1..14\nlimeGreen is a colour\npoint 3 and point 1 are connected\npoint 2 and point 3 are connected\npoint 1 and point 3 are connected\npoint 1 and point 2 are connected\nmaroon is a colour\nConnected points cannot have the same colour", "output": "joined_to(2,A) :- point(2), point(A), A = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\npoint(1..14).\ncolour(\"limeGreen\").\njoined_to(3,A) :- point(3), point(A), A = 1.\njoined_to(2,A) :- point(2), point(A), A = 3.\njoined_to(1,A) :- point(1), point(A), A = 3.\njoined_to(1,A) :- point(1), point(A), A = 2.\ncolour(\"maroon\").\n:- joined_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "The hue scarlet exists\nnodes 3 and 2 are connected\nnodes 1 and 2 are connected\nThe hue olive exists\nnodes 1 and 3 are connected\nnodes 2 and 3 are connected", "output": "hue(\"scarlet\").\nconnected_to(3,X) :- node(3), node(X), X = 2.\nconnected_to(1,X) :- node(1), node(X), X = 2.\nhue(\"olive\").\nconnected_to(1,X) :- node(1), node(X), X = 3.\nconnected_to(2,X) :- node(2), node(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "Out of the hues available, there is mint\nThere is a connection between vertex 2 and vertex X where X is 3\nThere is a connection between vertex 1 and vertex X where X is 2\nThere is a connection between vertex 1 and vertex X where X is 3\nThere is a connection between vertex 3 and vertex X where X is 2", "output": "hue(\"mint\").\nattached_to(2,X) :- vertex(2), vertex(X), X = 3.\nattached_to(1,X) :- vertex(1), vertex(X), X = 2.\nattached_to(1,X) :- vertex(1), vertex(X), X = 3.\nattached_to(3,X) :- vertex(3), vertex(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 2 and point G where G is 3\nIt is not allowed for adjacent points to share the same colour\nThere is a connection between point 3 and point G where G is 2\nOut of the hue available, there is red\nThere are 32 points\nOut of the hues available, there is mint\nThere is a connection between point 2 and point G where G is 1\nIt can't be the case that a point has more than one colour", "output": "attached_to(2,G) :- point(2), point(G), G = 3.\n:- attached_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\nattached_to(3,G) :- point(3), point(G), G = 2.\nhue(\"red\").\npoint(1..32).\nhue(\"mint\").\nattached_to(2,G) :- point(2), point(G), G = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "node 1 and node 2 are connected\nscarlet is a shade\nnode 2 and node 1 are connected\nnode 3 and node 2 are connected\nnode 2 and node 3 are connected\nnode 1 and node 3 are connected", "output": "connected_to(1,C) :- node(1), node(C), C = 2.\nshade(\"scarlet\").\nconnected_to(2,C) :- node(2), node(C), C = 1.\nconnected_to(3,C) :- node(3), node(C), C = 2.\nconnected_to(2,C) :- node(2), node(C), C = 3.\nconnected_to(1,C) :- node(1), node(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between element 3 and element X where X is 2\nOut of the colours available, there is green\nThere is a connection between element 2 and element X where X is 3\nOut of the colours available, there is blue\nThere is a connection between element 1 and element X where X is 3\nIt can't be the case that a element has more than one colour\nIt is not allowed for adjacent elements to share the same colour\nThere are 14 elements\nThere is a connection between element 3 and element X where X is 1", "output": "joined_to(3,X) :- element(3), element(X), X = 2.\ncolour(\"green\").\njoined_to(2,X) :- element(2), element(X), X = 3.\ncolour(\"blue\").\njoined_to(1,X) :- element(1), element(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\n:- joined_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nelement(1..14).\njoined_to(3,X) :- element(3), element(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 2 and point C where C is 1\nOut of the hues available, there is cyan\nIt is not allowed for adjacent points to share the same colour\nIt can't be the case that a point has more than one colour\nThere is a connection between point 2 and point C where C is 3\nThere is a connection between point 1 and point C where C is 2\nOut of the hues available, there is Emerald\nThere are 14 points", "output": "attached_to(2,C) :- point(2), point(C), C = 1.\nhue(\"cyan\").\n:- attached_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nattached_to(2,C) :- point(2), point(C), C = 3.\nattached_to(1,C) :- point(1), point(C), C = 2.\nhue(\"Emerald\").\npoint(1..14)."}
{"instruction": "Translate this to ASP code", "input": "Connected points cannot have the same colour\npoint 2 and point 3 are connected\nazure is a shade", "output": ":- connected_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\nconnected_to(2,G) :- point(2), point(G), G = 3.\nshade(\"azure\")."}
{"instruction": "Translate this to ASP code", "input": "elements can't be assigned more than one of the colours\nThe shade skyBlue exists\nThere are elements 1..32\nelements 3 and 2 are connected\nelements 1 and 3 are connected\nelements 2 and 3 are connected\nIf two elements are connected, they must have different colours\nThe shade scarlet exists\nelements 3 and 1 are connected\nelements 1 and 2 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nshade(\"skyBlue\").\nelement(1..32).\njoined_to(3,C) :- element(3), element(C), C = 2.\njoined_to(1,C) :- element(1), element(C), C = 3.\njoined_to(2,C) :- element(2), element(C), C = 3.\n:- joined_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C).\nshade(\"scarlet\").\njoined_to(3,C) :- element(3), element(C), C = 1.\njoined_to(1,C) :- element(1), element(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "vertex 3 and vertex 2 are connected\nConnected vertexs cannot have the same colour\nvertex 1 and vertex 3 are connected\nmint is a shade\nvertex 2 and vertex 1 are connected\nazure is a shade\nEvery vertex can only be assigned a single colour\nvertex 1 and vertex 2 are connected", "output": "joined_to(3,A) :- vertex(3), vertex(A), A = 2.\n:- joined_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\njoined_to(1,A) :- vertex(1), vertex(A), A = 3.\nshade(\"mint\").\njoined_to(2,A) :- vertex(2), vertex(A), A = 1.\nshade(\"azure\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\njoined_to(1,A) :- vertex(1), vertex(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 2 and vertex A where A is 1\nOut of the colour available, there is pink\nThere is a connection between vertex 1 and vertex A where A is 3\nThere is a connection between vertex 3 and vertex A where A is 1\nThere is a connection between vertex 3 and vertex A where A is 2\nOut of the colours available, there is olive", "output": "linked_to(2,A) :- vertex(2), vertex(A), A = 1.\ncolour(\"pink\").\nlinked_to(1,A) :- vertex(1), vertex(A), A = 3.\nlinked_to(3,A) :- vertex(3), vertex(A), A = 1.\nlinked_to(3,A) :- vertex(3), vertex(A), A = 2.\ncolour(\"olive\")."}
{"instruction": "Translate this to ASP code", "input": "There are 14 nodes\nThere is a connection between node 1 and node X where X is 3\nIt can't be the case that a node has more than one colour\nOut of the hues available, there is green\nThere is a connection between node 3 and node X where X is 1", "output": "node(1..14).\njoined_to(1,X) :- node(1), node(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nhue(\"green\").\njoined_to(3,X) :- node(3), node(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "It can't be the case that a point has more than one colour\nThere is a connection between point 2 and point C where C is 1\nOut of the shades available, there is azure\nOut of the shades available, there is green\nThere is a connection between point 3 and point C where C is 1", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nadjacent_to(2,C) :- point(2), point(C), C = 1.\nshade(\"azure\").\nshade(\"green\").\nadjacent_to(3,C) :- point(3), point(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 1 and vertex G where G is 3\nThere are 3 vertexs\nThere is a connection between vertex 2 and vertex G where G is 3\nOut of the colours available, there is Emerald", "output": "adjacent_to(1,G) :- vertex(1), vertex(G), G = 3.\nvertex(1..3).\nadjacent_to(2,G) :- vertex(2), vertex(G), G = 3.\ncolour(\"Emerald\")."}
{"instruction": "Translate this to ASP code", "input": "There are points 1..3\npoints 2 and 1 are connected\npoints can't be assigned more than one of the colours\npoints 3 and 2 are connected\nThe colour limeGreen exists\nThe colour pink exists\nIf two points are connected, they must have different colours\npoints 1 and 3 are connected\npoints 3 and 1 are connected", "output": "point(1..3).\nattached_to(2,X) :- point(2), point(X), X = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nattached_to(3,X) :- point(3), point(X), X = 2.\ncolour(\"limeGreen\").\ncolour(\"pink\").\n:- attached_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\nattached_to(1,X) :- point(1), point(X), X = 3.\nattached_to(3,X) :- point(3), point(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "elements 1 and 2 are connected\nThe shade cobalt exists\nThere are elements 1..32\nIf two elements are connected, they must have different colours\nelements can't be assigned more than one of the colours\nelements 2 and 3 are connected", "output": "joined_to(1,X) :- element(1), element(X), X = 2.\nshade(\"cobalt\").\nelement(1..32).\n:- joined_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\njoined_to(2,X) :- element(2), element(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "points 2 and 3 are connected\npoints can't be assigned more than one of the colours\npoints 1 and 2 are connected\npoints 3 and 1 are connected\nThe shade cyan exists", "output": "connected_to(2,A) :- point(2), point(A), A = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nconnected_to(1,A) :- point(1), point(A), A = 2.\nconnected_to(3,A) :- point(3), point(A), A = 1.\nshade(\"cyan\")."}
{"instruction": "Translate this to ASP code", "input": "nodes can't be assigned more than one of the colours\nIf two nodes are connected, they must have different colours\nnodes 2 and 3 are connected\nnodes 3 and 1 are connected\nThere are nodes 1..3\nThe shade cobalt exists\nnodes 2 and 1 are connected\nnodes 1 and 3 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\n:- linked_to(C,Y), node(C), assigned_to(C,C), node(Y), assigned_to(Y,C), color(C).\nlinked_to(2,C) :- node(2), node(C), C = 3.\nlinked_to(3,C) :- node(3), node(C), C = 1.\nnode(1..3).\nshade(\"cobalt\").\nlinked_to(2,C) :- node(2), node(C), C = 1.\nlinked_to(1,C) :- node(1), node(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "point 2 and point 3 are connected\npoint 1 and point 2 are connected\npurple is a colour", "output": "attached_to(2,G) :- point(2), point(G), G = 3.\nattached_to(1,G) :- point(1), point(G), G = 2.\ncolour(\"purple\")."}
{"instruction": "Translate this to ASP code", "input": "mint is a colour\nEvery vertex can only be assigned a single colour\nvertex 1 and vertex 2 are connected\nvertex 1 and vertex 3 are connected\ncyan is a colour\nConnected vertexs cannot have the same colour\nA vertex goes from 1..32", "output": "colour(\"mint\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nadjacent_to(1,A) :- vertex(1), vertex(A), A = 2.\nadjacent_to(1,A) :- vertex(1), vertex(A), A = 3.\ncolour(\"cyan\").\n:- adjacent_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\nvertex(1..32)."}
{"instruction": "Translate this to ASP code", "input": "nodes 2 and 3 are connected\nThe colour blue exists\nThe colour olive exists", "output": "connected_to(2,A) :- node(2), node(A), A = 3.\ncolour(\"blue\").\ncolour(\"olive\")."}
{"instruction": "Translate this to ASP code", "input": "Out of the colours available, there is azure\nThere is a connection between element 2 and element G where G is 1\nThere is a connection between element 1 and element G where G is 2\nIt can't be the case that a element has more than one colour\nThere is a connection between element 3 and element G where G is 1\nOut of the colours available, there is green\nOut of the colour available, there is maroon", "output": "colour(\"azure\").\nlinked_to(2,G) :- element(2), element(G), G = 1.\nlinked_to(1,G) :- element(1), element(G), G = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nlinked_to(3,G) :- element(3), element(G), G = 1.\ncolour(\"green\").\ncolour(\"maroon\")."}
{"instruction": "Translate this to ASP code", "input": "vertex 2 and vertex 1 are connected\nred is a colour\nvertex 3 and vertex 2 are connected\nvertex 1 and vertex 2 are connected\nvertex 1 and vertex 3 are connected", "output": "linked_to(2,A) :- vertex(2), vertex(A), A = 1.\ncolour(\"red\").\nlinked_to(3,A) :- vertex(3), vertex(A), A = 2.\nlinked_to(1,A) :- vertex(1), vertex(A), A = 2.\nlinked_to(1,A) :- vertex(1), vertex(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "cyan is a hue\nred is a hue\npoint 1 and point 2 are connected\npoint 3 and point 2 are connected", "output": "hue(\"cyan\").\nhue(\"red\").\njoined_to(1,X) :- point(1), point(X), X = 2.\njoined_to(3,X) :- point(3), point(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "red is a colour\nConnected elements cannot have the same colour\nelement 2 and element 1 are connected\nelement 3 and element 1 are connected\nlimeGreen is a colour", "output": "colour(\"red\").\n:- adjacent_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nadjacent_to(2,X) :- element(2), element(X), X = 1.\nadjacent_to(3,X) :- element(3), element(X), X = 1.\ncolour(\"limeGreen\")."}
{"instruction": "Translate this to ASP code", "input": "vertexs 3 and 1 are connected\nvertexs 2 and 1 are connected\nThere are vertexs 1..32\nvertexs 3 and 2 are connected", "output": "linked_to(3,C) :- vertex(3), vertex(C), C = 1.\nlinked_to(2,C) :- vertex(2), vertex(C), C = 1.\nvertex(1..32).\nlinked_to(3,C) :- vertex(3), vertex(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 1 and vertex A where A is 3\nOut of the shades available, there is jade\nThere is a connection between vertex 3 and vertex A where A is 1\nThere is a connection between vertex 3 and vertex A where A is 2\nThere is a connection between vertex 2 and vertex A where A is 1\nThere is a connection between vertex 2 and vertex A where A is 3\nOut of the shades available, there is skyBlue\nThere are 3 vertexs\nThere is a connection between vertex 1 and vertex A where A is 2\nIt is not allowed for adjacent vertexs to share the same colour\nIt can't be the case that a vertex has more than one colour", "output": "connected_to(1,A) :- vertex(1), vertex(A), A = 3.\nshade(\"jade\").\nconnected_to(3,A) :- vertex(3), vertex(A), A = 1.\nconnected_to(3,A) :- vertex(3), vertex(A), A = 2.\nconnected_to(2,A) :- vertex(2), vertex(A), A = 1.\nconnected_to(2,A) :- vertex(2), vertex(A), A = 3.\nshade(\"skyBlue\").\nvertex(1..3).\nconnected_to(1,A) :- vertex(1), vertex(A), A = 2.\n:- connected_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "points 1 and 3 are connected\npoints 2 and 3 are connected\nThe hue olive exists\npoints 2 and 1 are connected\nThe hue azure exists\npoints can't be assigned more than one of the colours", "output": "connected_to(1,G) :- point(1), point(G), G = 3.\nconnected_to(2,G) :- point(2), point(G), G = 3.\nhue(\"olive\").\nconnected_to(2,G) :- point(2), point(G), G = 1.\nhue(\"azure\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "point 3 and point 2 are connected\nConnected points cannot have the same colour\nEvery point can only be assigned a single colour\npoint 1 and point 2 are connected", "output": "adjacent_to(3,C) :- point(3), point(C), C = 2.\n:- adjacent_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nadjacent_to(1,C) :- point(1), point(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "The shade limeGreen exists\nvertexs 2 and 1 are connected\nThe shade azure exists\nvertexs can't be assigned more than one of the colours\nvertexs 3 and 1 are connected\nThe shade red exists", "output": "shade(\"limeGreen\").\nconnected_to(2,X) :- vertex(2), vertex(X), X = 1.\nshade(\"azure\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nconnected_to(3,X) :- vertex(3), vertex(X), X = 1.\nshade(\"red\")."}
{"instruction": "Translate this to ASP code", "input": "Out of the shade available, there is purple\nOut of the shades available, there is limeGreen\nThere is a connection between point 1 and point X where X is 2\nThere is a connection between point 2 and point X where X is 3\nThere is a connection between point 1 and point X where X is 3\nThere are 14 points\nThere is a connection between point 3 and point X where X is 2\nThere is a connection between point 3 and point X where X is 1\nIt is not allowed for adjacent points to share the same colour\nOut of the shades available, there is cyan", "output": "shade(\"purple\").\nshade(\"limeGreen\").\nattached_to(1,X) :- point(1), point(X), X = 2.\nattached_to(2,X) :- point(2), point(X), X = 3.\nattached_to(1,X) :- point(1), point(X), X = 3.\npoint(1..14).\nattached_to(3,X) :- point(3), point(X), X = 2.\nattached_to(3,X) :- point(3), point(X), X = 1.\n:- attached_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\nshade(\"cyan\")."}
{"instruction": "Translate this to ASP code", "input": "The shade jade exists\nvertexs 2 and 3 are connected\nvertexs can't be assigned more than one of the colours\nvertexs 2 and 1 are connected\nThere are vertexs 1..3", "output": "shade(\"jade\").\nadjacent_to(2,G) :- vertex(2), vertex(G), G = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nadjacent_to(2,G) :- vertex(2), vertex(G), G = 1.\nvertex(1..3)."}
{"instruction": "Translate this to ASP code", "input": "There are 14 nodes\nThere is a connection between node 3 and node A where A is 2\nThere is a connection between node 2 and node A where A is 1\nOut of the colour available, there is maroon\nThere is a connection between node 1 and node A where A is 3\nThere is a connection between node 2 and node A where A is 3\nThere is a connection between node 3 and node A where A is 1\nIt can't be the case that a node has more than one colour", "output": "node(1..14).\nconnected_to(3,A) :- node(3), node(A), A = 2.\nconnected_to(2,A) :- node(2), node(A), A = 1.\ncolour(\"maroon\").\nconnected_to(1,A) :- node(1), node(A), A = 3.\nconnected_to(2,A) :- node(2), node(A), A = 3.\nconnected_to(3,A) :- node(3), node(A), A = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "A point goes from 1..32\nskyBlue is a shade\npoint 1 and point 2 are connected", "output": "point(1..32).\nshade(\"skyBlue\").\nconnected_to(1,C) :- point(1), point(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "There are points 1..3\npoints 3 and 2 are connected\nIf two points are connected, they must have different colours\npoints 2 and 1 are connected\npoints can't be assigned more than one of the colours\npoints 2 and 3 are connected\nThe colour pink exists\nThe colour Emerald exists\nThe colour cobalt exists", "output": "point(1..3).\nattached_to(3,C) :- point(3), point(C), C = 2.\n:- attached_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\nattached_to(2,C) :- point(2), point(C), C = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nattached_to(2,C) :- point(2), point(C), C = 3.\ncolour(\"pink\").\ncolour(\"Emerald\").\ncolour(\"cobalt\")."}
{"instruction": "Translate this to ASP code", "input": "If two points are connected, they must have different colours\nThe shade cobalt exists\npoints 1 and 2 are connected\npoints 1 and 3 are connected", "output": ":- adjacent_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\nshade(\"cobalt\").\nadjacent_to(1,A) :- point(1), point(A), A = 2.\nadjacent_to(1,A) :- point(1), point(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 2 and vertex X where X is 1\nIt can't be the case that a vertex has more than one colour\nOut of the colour available, there is red\nThere is a connection between vertex 1 and vertex X where X is 2", "output": "connected_to(2,X) :- vertex(2), vertex(X), X = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\ncolour(\"red\").\nconnected_to(1,X) :- vertex(1), vertex(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between element 1 and element G where G is 3\nIt can't be the case that a element has more than one colour\nOut of the colour available, there is pink\nOut of the colours available, there is blue\nThere is a connection between element 2 and element G where G is 1\nThere is a connection between element 3 and element G where G is 1\nOut of the colours available, there is Emerald\nThere is a connection between element 3 and element G where G is 2", "output": "joined_to(1,G) :- element(1), element(G), G = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\ncolour(\"pink\").\ncolour(\"blue\").\njoined_to(2,G) :- element(2), element(G), G = 1.\njoined_to(3,G) :- element(3), element(G), G = 1.\ncolour(\"Emerald\").\njoined_to(3,G) :- element(3), element(G), G = 2."}
{"instruction": "Translate this to ASP code", "input": "The hue maroon exists\nThe hue limeGreen exists\npoints 2 and 3 are connected\nThe hue azure exists\npoints can't be assigned more than one of the colours\nThere are points 1..3\npoints 3 and 1 are connected", "output": "hue(\"maroon\").\nhue(\"limeGreen\").\njoined_to(2,G) :- point(2), point(G), G = 3.\nhue(\"azure\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\npoint(1..3).\njoined_to(3,G) :- point(3), point(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 3 and point A where A is 2\nThere is a connection between point 2 and point A where A is 1\nOut of the hues available, there is mint\nIt can't be the case that a point has more than one colour\nThere is a connection between point 1 and point A where A is 2\nIt is not allowed for adjacent points to share the same colour\nThere is a connection between point 3 and point A where A is 1\nOut of the hues available, there is blue\nThere are 32 points\nThere is a connection between point 1 and point A where A is 3", "output": "linked_to(3,A) :- point(3), point(A), A = 2.\nlinked_to(2,A) :- point(2), point(A), A = 1.\nhue(\"mint\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nlinked_to(1,A) :- point(1), point(A), A = 2.\n:- linked_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\nlinked_to(3,A) :- point(3), point(A), A = 1.\nhue(\"blue\").\npoint(1..32).\nlinked_to(1,A) :- point(1), point(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "elements 1 and 2 are connected\nThe hue crimson exists", "output": "attached_to(1,G) :- element(1), element(G), G = 2.\nhue(\"crimson\")."}
{"instruction": "Translate this to ASP code", "input": "skyBlue is a colour\nvertex 3 and vertex 2 are connected\nvertex 3 and vertex 1 are connected", "output": "colour(\"skyBlue\").\nattached_to(3,C) :- vertex(3), vertex(C), C = 2.\nattached_to(3,C) :- vertex(3), vertex(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "point 2 and point 1 are connected\npink is a shade\nEvery point can only be assigned a single colour", "output": "connected_to(2,A) :- point(2), point(A), A = 1.\nshade(\"pink\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "point 3 and point 1 are connected\ncrimson is a hue\nblue is a hue\nConnected points cannot have the same colour\nA point goes from 1..3\nolive is a hue\nEvery point can only be assigned a single colour\npoint 1 and point 2 are connected\npoint 1 and point 3 are connected\npoint 2 and point 3 are connected", "output": "adjacent_to(3,X) :- point(3), point(X), X = 1.\nhue(\"crimson\").\nhue(\"blue\").\n:- adjacent_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\npoint(1..3).\nhue(\"olive\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nadjacent_to(1,X) :- point(1), point(X), X = 2.\nadjacent_to(1,X) :- point(1), point(X), X = 3.\nadjacent_to(2,X) :- point(2), point(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "purple is a shade\nEvery node can only be assigned a single colour\nA node goes from 1..14\nnode 1 and node 2 are connected\nnode 2 and node 1 are connected\nnode 2 and node 3 are connected\nnode 3 and node 2 are connected", "output": "shade(\"purple\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nnode(1..14).\nattached_to(1,C) :- node(1), node(C), C = 2.\nattached_to(2,C) :- node(2), node(C), C = 1.\nattached_to(2,C) :- node(2), node(C), C = 3.\nattached_to(3,C) :- node(3), node(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "If two vertexs are connected, they must have different colours\nThe shade azure exists\nvertexs 3 and 1 are connected\nThe shade maroon exists\nvertexs 3 and 2 are connected\nvertexs 1 and 3 are connected", "output": ":- linked_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\nshade(\"azure\").\nlinked_to(3,X) :- vertex(3), vertex(X), X = 1.\nshade(\"maroon\").\nlinked_to(3,X) :- vertex(3), vertex(X), X = 2.\nlinked_to(1,X) :- vertex(1), vertex(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 3 and point G where G is 1\nThere is a connection between point 3 and point G where G is 2\nThere is a connection between point 2 and point G where G is 1\nOut of the colours available, there is azure\nThere is a connection between point 2 and point G where G is 3", "output": "joined_to(3,G) :- point(3), point(G), G = 1.\njoined_to(3,G) :- point(3), point(G), G = 2.\njoined_to(2,G) :- point(2), point(G), G = 1.\ncolour(\"azure\").\njoined_to(2,G) :- point(2), point(G), G = 3."}
{"instruction": "Translate this to ASP code", "input": "There are points 1..3\nThe colour mint exists\npoints 3 and 1 are connected\npoints can't be assigned more than one of the colours\nThe colour purple exists\npoints 2 and 3 are connected\nThe colour skyBlue exists", "output": "point(1..3).\ncolour(\"mint\").\nlinked_to(3,C) :- point(3), point(C), C = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\ncolour(\"purple\").\nlinked_to(2,C) :- point(2), point(C), C = 3.\ncolour(\"skyBlue\")."}
{"instruction": "Translate this to ASP code", "input": "red is a shade\nA element goes from 1..14\ncobalt is a shade\nelement 1 and element 3 are connected\nelement 3 and element 1 are connected\nConnected elements cannot have the same colour\nelement 1 and element 2 are connected\nelement 2 and element 3 are connected\nelement 3 and element 2 are connected\nelement 2 and element 1 are connected", "output": "shade(\"red\").\nelement(1..14).\nshade(\"cobalt\").\nadjacent_to(1,G) :- element(1), element(G), G = 3.\nadjacent_to(3,G) :- element(3), element(G), G = 1.\n:- adjacent_to(G,Y), element(G), assigned_to(G,C), element(Y), assigned_to(Y,C), color(C).\nadjacent_to(1,G) :- element(1), element(G), G = 2.\nadjacent_to(2,G) :- element(2), element(G), G = 3.\nadjacent_to(3,G) :- element(3), element(G), G = 2.\nadjacent_to(2,G) :- element(2), element(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "nodes 2 and 1 are connected\nThe hue cyan exists\nThere are nodes 1..3", "output": "attached_to(2,C) :- node(2), node(C), C = 1.\nhue(\"cyan\").\nnode(1..3)."}
{"instruction": "Translate this to ASP code", "input": "Every element can only be assigned a single colour\nelement 1 and element 3 are connected\nelement 1 and element 2 are connected\nConnected elements cannot have the same colour\nelement 3 and element 2 are connected\nEmerald is a shade\nazure is a shade\nelement 2 and element 3 are connected\nA element goes from 1..14\nelement 2 and element 1 are connected\ncrimson is a shade", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nconnected_to(1,A) :- element(1), element(A), A = 3.\nconnected_to(1,A) :- element(1), element(A), A = 2.\n:- connected_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C).\nconnected_to(3,A) :- element(3), element(A), A = 2.\nshade(\"Emerald\").\nshade(\"azure\").\nconnected_to(2,A) :- element(2), element(A), A = 3.\nelement(1..14).\nconnected_to(2,A) :- element(2), element(A), A = 1.\nshade(\"crimson\")."}
{"instruction": "Translate this to ASP code", "input": "vertexs 2 and 3 are connected\nThe shade crimson exists\nThe shade azure exists\nThe shade green exists", "output": "joined_to(2,C) :- vertex(2), vertex(C), C = 3.\nshade(\"crimson\").\nshade(\"azure\").\nshade(\"green\")."}
{"instruction": "Translate this to ASP code", "input": "mint is a colour\nelement 2 and element 3 are connected\nelement 1 and element 3 are connected\nelement 2 and element 1 are connected\npink is a colour\nelement 3 and element 2 are connected\nEvery element can only be assigned a single colour\nA element goes from 1..32", "output": "colour(\"mint\").\njoined_to(2,C) :- element(2), element(C), C = 3.\njoined_to(1,C) :- element(1), element(C), C = 3.\njoined_to(2,C) :- element(2), element(C), C = 1.\ncolour(\"pink\").\njoined_to(3,C) :- element(3), element(C), C = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nelement(1..32)."}
{"instruction": "Translate this to ASP code", "input": "vertex 2 and vertex 3 are connected\nvertex 1 and vertex 2 are connected\nvertex 3 and vertex 1 are connected\nblue is a colour\njade is a colour\nA vertex goes from 1..3\npink is a colour\nConnected vertexs cannot have the same colour", "output": "attached_to(2,X) :- vertex(2), vertex(X), X = 3.\nattached_to(1,X) :- vertex(1), vertex(X), X = 2.\nattached_to(3,X) :- vertex(3), vertex(X), X = 1.\ncolour(\"blue\").\ncolour(\"jade\").\nvertex(1..3).\ncolour(\"pink\").\n:- attached_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 3 and node A where A is 1\nThere is a connection between node 2 and node A where A is 3\nThere are 14 nodes\nIt is not allowed for adjacent nodes to share the same colour\nOut of the hues available, there is Emerald\nThere is a connection between node 1 and node A where A is 2", "output": "linked_to(3,A) :- node(3), node(A), A = 1.\nlinked_to(2,A) :- node(2), node(A), A = 3.\nnode(1..14).\n:- linked_to(A,Y), node(A), assigned_to(A,C), node(Y), assigned_to(Y,C), color(C).\nhue(\"Emerald\").\nlinked_to(1,A) :- node(1), node(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "There are 32 vertexs\nOut of the shade available, there is crimson\nThere is a connection between vertex 1 and vertex X where X is 2\nOut of the shades available, there is cyan\nThere is a connection between vertex 3 and vertex X where X is 2\nThere is a connection between vertex 2 and vertex X where X is 1\nThere is a connection between vertex 2 and vertex X where X is 3\nIt can't be the case that a vertex has more than one colour\nOut of the shades available, there is olive\nThere is a connection between vertex 1 and vertex X where X is 3\nThere is a connection between vertex 3 and vertex X where X is 1", "output": "vertex(1..32).\nshade(\"crimson\").\njoined_to(1,X) :- vertex(1), vertex(X), X = 2.\nshade(\"cyan\").\njoined_to(3,X) :- vertex(3), vertex(X), X = 2.\njoined_to(2,X) :- vertex(2), vertex(X), X = 1.\njoined_to(2,X) :- vertex(2), vertex(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nshade(\"olive\").\njoined_to(1,X) :- vertex(1), vertex(X), X = 3.\njoined_to(3,X) :- vertex(3), vertex(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "vertexs 1 and 3 are connected\nThere are vertexs 1..32\nThe shade skyBlue exists", "output": "linked_to(1,X) :- vertex(1), vertex(X), X = 3.\nvertex(1..32).\nshade(\"skyBlue\")."}
{"instruction": "Translate this to ASP code", "input": "element 2 and element 3 are connected\ncyan is a colour\nmint is a colour\npurple is a colour\nEvery element can only be assigned a single colour", "output": "adjacent_to(2,A) :- element(2), element(A), A = 3.\ncolour(\"cyan\").\ncolour(\"mint\").\ncolour(\"purple\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "There are vertexs 1..3\nThe hue crimson exists\nvertexs 1 and 2 are connected\nvertexs 3 and 2 are connected\nvertexs 2 and 3 are connected\nvertexs 3 and 1 are connected", "output": "vertex(1..3).\nhue(\"crimson\").\nadjacent_to(1,X) :- vertex(1), vertex(X), X = 2.\nadjacent_to(3,X) :- vertex(3), vertex(X), X = 2.\nadjacent_to(2,X) :- vertex(2), vertex(X), X = 3.\nadjacent_to(3,X) :- vertex(3), vertex(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "element 2 and element 3 are connected\nelement 1 and element 3 are connected\nEvery element can only be assigned a single colour\nA element goes from 1..3\nelement 2 and element 1 are connected\npink is a hue\nelement 3 and element 1 are connected\nazure is a hue\nelement 1 and element 2 are connected\nConnected elements cannot have the same colour", "output": "connected_to(2,C) :- element(2), element(C), C = 3.\nconnected_to(1,C) :- element(1), element(C), C = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nelement(1..3).\nconnected_to(2,C) :- element(2), element(C), C = 1.\nhue(\"pink\").\nconnected_to(3,C) :- element(3), element(C), C = 1.\nhue(\"azure\").\nconnected_to(1,C) :- element(1), element(C), C = 2.\n:- connected_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between element 1 and element G where G is 2\nOut of the shade available, there is scarlet\nThere is a connection between element 2 and element G where G is 1\nIt can't be the case that a element has more than one colour\nOut of the shades available, there is green\nThere is a connection between element 2 and element G where G is 3", "output": "adjacent_to(1,G) :- element(1), element(G), G = 2.\nshade(\"scarlet\").\nadjacent_to(2,G) :- element(2), element(G), G = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nshade(\"green\").\nadjacent_to(2,G) :- element(2), element(G), G = 3."}
{"instruction": "Translate this to ASP code", "input": "element 3 and element 2 are connected\nA element goes from 1..14\nelement 1 and element 3 are connected\nred is a shade\nelement 1 and element 2 are connected\nelement 3 and element 1 are connected\nelement 2 and element 3 are connected\nConnected elements cannot have the same colour", "output": "connected_to(3,A) :- element(3), element(A), A = 2.\nelement(1..14).\nconnected_to(1,A) :- element(1), element(A), A = 3.\nshade(\"red\").\nconnected_to(1,A) :- element(1), element(A), A = 2.\nconnected_to(3,A) :- element(3), element(A), A = 1.\nconnected_to(2,A) :- element(2), element(A), A = 3.\n:- connected_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "element 1 and element 3 are connected\nelement 2 and element 1 are connected\nred is a colour\nEvery element can only be assigned a single colour\nEmerald is a colour\nConnected elements cannot have the same colour\nelement 2 and element 3 are connected\ncyan is a colour\nA element goes from 1..3\nelement 1 and element 2 are connected\nelement 3 and element 2 are connected", "output": "attached_to(1,C) :- element(1), element(C), C = 3.\nattached_to(2,C) :- element(2), element(C), C = 1.\ncolour(\"red\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\ncolour(\"Emerald\").\n:- attached_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C).\nattached_to(2,C) :- element(2), element(C), C = 3.\ncolour(\"cyan\").\nelement(1..3).\nattached_to(1,C) :- element(1), element(C), C = 2.\nattached_to(3,C) :- element(3), element(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 1 and vertex C where C is 2\nThere are 32 vertexs\nThere is a connection between vertex 3 and vertex C where C is 2\nOut of the colours available, there is Emerald\nThere is a connection between vertex 2 and vertex C where C is 1\nIt is not allowed for adjacent vertexs to share the same colour\nIt can't be the case that a vertex has more than one colour\nThere is a connection between vertex 1 and vertex C where C is 3\nThere is a connection between vertex 2 and vertex C where C is 3\nOut of the colours available, there is skyBlue", "output": "adjacent_to(1,C) :- vertex(1), vertex(C), C = 2.\nvertex(1..32).\nadjacent_to(3,C) :- vertex(3), vertex(C), C = 2.\ncolour(\"Emerald\").\nadjacent_to(2,C) :- vertex(2), vertex(C), C = 1.\n:- adjacent_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nadjacent_to(1,C) :- vertex(1), vertex(C), C = 3.\nadjacent_to(2,C) :- vertex(2), vertex(C), C = 3.\ncolour(\"skyBlue\")."}
{"instruction": "Translate this to ASP code", "input": "The colour jade exists\nelements 1 and 3 are connected\nThe colour crimson exists\nelements 3 and 1 are connected\nThe colour cobalt exists\nelements 3 and 2 are connected\nelements 1 and 2 are connected\nThere are elements 1..32\nIf two elements are connected, they must have different colours\nelements 2 and 1 are connected\nelements 2 and 3 are connected", "output": "colour(\"jade\").\njoined_to(1,A) :- element(1), element(A), A = 3.\ncolour(\"crimson\").\njoined_to(3,A) :- element(3), element(A), A = 1.\ncolour(\"cobalt\").\njoined_to(3,A) :- element(3), element(A), A = 2.\njoined_to(1,A) :- element(1), element(A), A = 2.\nelement(1..32).\n:- joined_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C).\njoined_to(2,A) :- element(2), element(A), A = 1.\njoined_to(2,A) :- element(2), element(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "point 3 and point 2 are connected\ncyan is a shade", "output": "attached_to(3,C) :- point(3), point(C), C = 2.\nshade(\"cyan\")."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent points to share the same colour\nThere is a connection between point 2 and point G where G is 1\nIt can't be the case that a point has more than one colour\nThere is a connection between point 3 and point G where G is 2\nThere are 3 points\nOut of the hue available, there is scarlet\nThere is a connection between point 1 and point G where G is 3\nThere is a connection between point 1 and point G where G is 2", "output": ":- adjacent_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\nadjacent_to(2,G) :- point(2), point(G), G = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nadjacent_to(3,G) :- point(3), point(G), G = 2.\npoint(1..3).\nhue(\"scarlet\").\nadjacent_to(1,G) :- point(1), point(G), G = 3.\nadjacent_to(1,G) :- point(1), point(G), G = 2."}
{"instruction": "Translate this to ASP code", "input": "Every element can only be assigned a single colour\nelement 1 and element 2 are connected\npink is a hue\nblue is a hue", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\njoined_to(1,A) :- element(1), element(A), A = 2.\nhue(\"pink\").\nhue(\"blue\")."}
{"instruction": "Translate this to ASP code", "input": "It can't be the case that a element has more than one colour\nThere is a connection between element 3 and element A where A is 1\nOut of the shades available, there is mint", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nlinked_to(3,A) :- element(3), element(A), A = 1.\nshade(\"mint\")."}
{"instruction": "Translate this to ASP code", "input": "node 1 and node 3 are connected\nnode 3 and node 1 are connected\nscarlet is a hue", "output": "linked_to(1,X) :- node(1), node(X), X = 3.\nlinked_to(3,X) :- node(3), node(X), X = 1.\nhue(\"scarlet\")."}
{"instruction": "Translate this to ASP code", "input": "There are 3 elements\nOut of the hues available, there is azure\nOut of the hues available, there is Emerald\nThere is a connection between element 3 and element A where A is 2\nThere is a connection between element 3 and element A where A is 1", "output": "element(1..3).\nhue(\"azure\").\nhue(\"Emerald\").\njoined_to(3,A) :- element(3), element(A), A = 2.\njoined_to(3,A) :- element(3), element(A), A = 1."}
{"instruction": "Translate this to ASP code", "input": "The shade crimson exists\nelements 2 and 3 are connected\nelements can't be assigned more than one of the colours\nThere are elements 1..32\nThe shade cobalt exists\nelements 1 and 2 are connected\nelements 1 and 3 are connected\nIf two elements are connected, they must have different colours\nThe shade mint exists\nelements 3 and 1 are connected", "output": "shade(\"crimson\").\nconnected_to(2,C) :- element(2), element(C), C = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nelement(1..32).\nshade(\"cobalt\").\nconnected_to(1,C) :- element(1), element(C), C = 2.\nconnected_to(1,C) :- element(1), element(C), C = 3.\n:- connected_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C).\nshade(\"mint\").\nconnected_to(3,C) :- element(3), element(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "A point goes from 1..3\npoint 2 and point 3 are connected\npoint 1 and point 2 are connected\npoint 2 and point 1 are connected\nEvery point can only be assigned a single colour\npoint 3 and point 2 are connected\nConnected points cannot have the same colour", "output": "point(1..3).\nlinked_to(2,X) :- point(2), point(X), X = 3.\nlinked_to(1,X) :- point(1), point(X), X = 2.\nlinked_to(2,X) :- point(2), point(X), X = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nlinked_to(3,X) :- point(3), point(X), X = 2.\n:- linked_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "points 3 and 1 are connected\npoints 1 and 3 are connected\nThe colour scarlet exists\npoints 2 and 3 are connected\npoints can't be assigned more than one of the colours", "output": "adjacent_to(3,X) :- point(3), point(X), X = 1.\nadjacent_to(1,X) :- point(1), point(X), X = 3.\ncolour(\"scarlet\").\nadjacent_to(2,X) :- point(2), point(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent points to share the same colour\nOut of the hues available, there is olive\nOut of the hues available, there is skyBlue\nThere is a connection between point 1 and point C where C is 3\nThere is a connection between point 3 and point C where C is 2\nOut of the hue available, there is red\nIt can't be the case that a point has more than one colour\nThere is a connection between point 3 and point C where C is 1\nThere is a connection between point 2 and point C where C is 3", "output": ":- linked_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\nhue(\"olive\").\nhue(\"skyBlue\").\nlinked_to(1,C) :- point(1), point(C), C = 3.\nlinked_to(3,C) :- point(3), point(C), C = 2.\nhue(\"red\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nlinked_to(3,C) :- point(3), point(C), C = 1.\nlinked_to(2,C) :- point(2), point(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "Out of the colour available, there is maroon\nThere are 3 vertexs\nThere is a connection between vertex 1 and vertex X where X is 2\nThere is a connection between vertex 3 and vertex X where X is 1\nThere is a connection between vertex 3 and vertex X where X is 2\nThere is a connection between vertex 2 and vertex X where X is 1\nThere is a connection between vertex 1 and vertex X where X is 3\nIt can't be the case that a vertex has more than one colour\nOut of the colours available, there is blue\nOut of the colours available, there is mint\nIt is not allowed for adjacent vertexs to share the same colour", "output": "colour(\"maroon\").\nvertex(1..3).\nconnected_to(1,X) :- vertex(1), vertex(X), X = 2.\nconnected_to(3,X) :- vertex(3), vertex(X), X = 1.\nconnected_to(3,X) :- vertex(3), vertex(X), X = 2.\nconnected_to(2,X) :- vertex(2), vertex(X), X = 1.\nconnected_to(1,X) :- vertex(1), vertex(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\ncolour(\"blue\").\ncolour(\"mint\").\n:- connected_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "blue is a colour\nnode 3 and node 1 are connected\nscarlet is a colour\nA node goes from 1..3\nnode 2 and node 1 are connected\nnode 1 and node 2 are connected\nmint is a colour\nnode 3 and node 2 are connected\nnode 1 and node 3 are connected\nnode 2 and node 3 are connected\nEvery node can only be assigned a single colour", "output": "colour(\"blue\").\nconnected_to(3,G) :- node(3), node(G), G = 1.\ncolour(\"scarlet\").\nnode(1..3).\nconnected_to(2,G) :- node(2), node(G), G = 1.\nconnected_to(1,G) :- node(1), node(G), G = 2.\ncolour(\"mint\").\nconnected_to(3,G) :- node(3), node(G), G = 2.\nconnected_to(1,G) :- node(1), node(G), G = 3.\nconnected_to(2,G) :- node(2), node(G), G = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "point 3 and point 1 are connected\npoint 1 and point 3 are connected\npoint 2 and point 3 are connected\npoint 1 and point 2 are connected\nA point goes from 1..14\npoint 3 and point 2 are connected\npoint 2 and point 1 are connected\nblue is a shade\nConnected points cannot have the same colour", "output": "linked_to(3,C) :- point(3), point(C), C = 1.\nlinked_to(1,C) :- point(1), point(C), C = 3.\nlinked_to(2,C) :- point(2), point(C), C = 3.\nlinked_to(1,C) :- point(1), point(C), C = 2.\npoint(1..14).\nlinked_to(3,C) :- point(3), point(C), C = 2.\nlinked_to(2,C) :- point(2), point(C), C = 1.\nshade(\"blue\").\n:- linked_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "nodes 3 and 1 are connected\nnodes 1 and 2 are connected\nnodes 3 and 2 are connected\nnodes 1 and 3 are connected\nnodes 2 and 3 are connected\nThe shade maroon exists\nnodes 2 and 1 are connected\nIf two nodes are connected, they must have different colours\nThe shade jade exists\nThere are nodes 1..32\nnodes can't be assigned more than one of the colours", "output": "adjacent_to(3,X) :- node(3), node(X), X = 1.\nadjacent_to(1,X) :- node(1), node(X), X = 2.\nadjacent_to(3,X) :- node(3), node(X), X = 2.\nadjacent_to(1,X) :- node(1), node(X), X = 3.\nadjacent_to(2,X) :- node(2), node(X), X = 3.\nshade(\"maroon\").\nadjacent_to(2,X) :- node(2), node(X), X = 1.\n:- adjacent_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\nshade(\"jade\").\nnode(1..32).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "Connected points cannot have the same colour\nblue is a shade\nA point goes from 1..3\npoint 1 and point 3 are connected\nred is a shade\npoint 1 and point 2 are connected\npoint 3 and point 2 are connected", "output": ":- adjacent_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\nshade(\"blue\").\npoint(1..3).\nadjacent_to(1,A) :- point(1), point(A), A = 3.\nshade(\"red\").\nadjacent_to(1,A) :- point(1), point(A), A = 2.\nadjacent_to(3,A) :- point(3), point(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "There are 32 points\nOut of the hue available, there is purple\nThere is a connection between point 2 and point C where C is 1\nThere is a connection between point 3 and point C where C is 2", "output": "point(1..32).\nhue(\"purple\").\nlinked_to(2,C) :- point(2), point(C), C = 1.\nlinked_to(3,C) :- point(3), point(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "point 3 and point 2 are connected\nmaroon is a hue\npoint 2 and point 3 are connected", "output": "attached_to(3,X) :- point(3), point(X), X = 2.\nhue(\"maroon\").\nattached_to(2,X) :- point(2), point(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "node 2 and node 3 are connected\nEmerald is a hue\nnode 1 and node 2 are connected\nConnected nodes cannot have the same colour\nmaroon is a hue\nnode 2 and node 1 are connected\ncobalt is a hue\nEvery node can only be assigned a single colour\nnode 3 and node 1 are connected\nnode 3 and node 2 are connected\nnode 1 and node 3 are connected", "output": "linked_to(2,A) :- node(2), node(A), A = 3.\nhue(\"Emerald\").\nlinked_to(1,A) :- node(1), node(A), A = 2.\n:- linked_to(A,Y), node(A), assigned_to(A,C), node(Y), assigned_to(Y,C), color(C).\nhue(\"maroon\").\nlinked_to(2,A) :- node(2), node(A), A = 1.\nhue(\"cobalt\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nlinked_to(3,A) :- node(3), node(A), A = 1.\nlinked_to(3,A) :- node(3), node(A), A = 2.\nlinked_to(1,A) :- node(1), node(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "A node goes from 1..14\nConnected nodes cannot have the same colour\nnode 2 and node 1 are connected\nazure is a hue", "output": "node(1..14).\n:- attached_to(A,Y), node(A), assigned_to(A,C), node(Y), assigned_to(Y,C), color(C).\nattached_to(2,A) :- node(2), node(A), A = 1.\nhue(\"azure\")."}
{"instruction": "Translate this to ASP code", "input": "crimson is a hue\nvertex 1 and vertex 2 are connected\nA vertex goes from 1..14\nazure is a hue\nEvery vertex can only be assigned a single colour\nConnected vertexs cannot have the same colour\nvertex 3 and vertex 2 are connected\nvertex 2 and vertex 3 are connected\nvertex 3 and vertex 1 are connected", "output": "hue(\"crimson\").\nconnected_to(1,X) :- vertex(1), vertex(X), X = 2.\nvertex(1..14).\nhue(\"azure\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\n:- connected_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\nconnected_to(3,X) :- vertex(3), vertex(X), X = 2.\nconnected_to(2,X) :- vertex(2), vertex(X), X = 3.\nconnected_to(3,X) :- vertex(3), vertex(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "There are vertexs 1..32\nvertexs 1 and 3 are connected\nvertexs 3 and 2 are connected\nvertexs 1 and 2 are connected\nvertexs 2 and 3 are connected\nvertexs 2 and 1 are connected\nThe colour limeGreen exists\nvertexs can't be assigned more than one of the colours\nIf two vertexs are connected, they must have different colours", "output": "vertex(1..32).\nconnected_to(1,C) :- vertex(1), vertex(C), C = 3.\nconnected_to(3,C) :- vertex(3), vertex(C), C = 2.\nconnected_to(1,C) :- vertex(1), vertex(C), C = 2.\nconnected_to(2,C) :- vertex(2), vertex(C), C = 3.\nconnected_to(2,C) :- vertex(2), vertex(C), C = 1.\ncolour(\"limeGreen\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\n:- connected_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "Out of the hue available, there is pink\nThere is a connection between element 2 and element A where A is 1", "output": "hue(\"pink\").\nlinked_to(2,A) :- element(2), element(A), A = 1."}
{"instruction": "Translate this to ASP code", "input": "If two nodes are connected, they must have different colours\nnodes 3 and 1 are connected\nThe shade purple exists\nnodes can't be assigned more than one of the colours\nnodes 3 and 2 are connected\nnodes 2 and 3 are connected", "output": ":- attached_to(G,Y), node(G), assigned_to(G,C), node(Y), assigned_to(Y,C), color(C).\nattached_to(3,G) :- node(3), node(G), G = 1.\nshade(\"purple\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nattached_to(3,G) :- node(3), node(G), G = 2.\nattached_to(2,G) :- node(2), node(G), G = 3."}
{"instruction": "Translate this to ASP code", "input": "Out of the colours available, there is green\nIt can't be the case that a node has more than one colour\nThere are 32 nodes\nIt is not allowed for adjacent nodes to share the same colour\nOut of the colour available, there is crimson\nThere is a connection between node 2 and node G where G is 3\nThere is a connection between node 1 and node G where G is 3\nThere is a connection between node 3 and node G where G is 1\nThere is a connection between node 3 and node G where G is 2\nThere is a connection between node 2 and node G where G is 1", "output": "colour(\"green\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nnode(1..32).\n:- linked_to(G,Y), node(G), assigned_to(G,C), node(Y), assigned_to(Y,C), color(C).\ncolour(\"crimson\").\nlinked_to(2,G) :- node(2), node(G), G = 3.\nlinked_to(1,G) :- node(1), node(G), G = 3.\nlinked_to(3,G) :- node(3), node(G), G = 1.\nlinked_to(3,G) :- node(3), node(G), G = 2.\nlinked_to(2,G) :- node(2), node(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "Out of the hues available, there is cobalt\nThere is a connection between vertex 2 and vertex C where C is 3\nIt is not allowed for adjacent vertexs to share the same colour\nThere is a connection between vertex 1 and vertex C where C is 2", "output": "hue(\"cobalt\").\nlinked_to(2,C) :- vertex(2), vertex(C), C = 3.\n:- linked_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C).\nlinked_to(1,C) :- vertex(1), vertex(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "nodes 2 and 3 are connected\nThere are nodes 1..32\nThe colour cobalt exists\nnodes can't be assigned more than one of the colours\nIf two nodes are connected, they must have different colours\nnodes 3 and 2 are connected\nThe colour maroon exists\nnodes 1 and 3 are connected\nThe colour mint exists\nnodes 1 and 2 are connected", "output": "joined_to(2,X) :- node(2), node(X), X = 3.\nnode(1..32).\ncolour(\"cobalt\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\n:- joined_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\njoined_to(3,X) :- node(3), node(X), X = 2.\ncolour(\"maroon\").\njoined_to(1,X) :- node(1), node(X), X = 3.\ncolour(\"mint\").\njoined_to(1,X) :- node(1), node(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "nodes can't be assigned more than one of the colours\nnodes 2 and 3 are connected\nnodes 3 and 1 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nconnected_to(2,C) :- node(2), node(C), C = 3.\nconnected_to(3,C) :- node(3), node(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "pink is a colour\nvertex 3 and vertex 1 are connected\nvertex 3 and vertex 2 are connected\nvertex 2 and vertex 3 are connected\nvertex 2 and vertex 1 are connected\nA vertex goes from 1..3\nConnected vertexs cannot have the same colour", "output": "colour(\"pink\").\nconnected_to(3,X) :- vertex(3), vertex(X), X = 1.\nconnected_to(3,X) :- vertex(3), vertex(X), X = 2.\nconnected_to(2,X) :- vertex(2), vertex(X), X = 3.\nconnected_to(2,X) :- vertex(2), vertex(X), X = 1.\nvertex(1..3).\n:- connected_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "Out of the hues available, there is cyan\nThere is a connection between vertex 3 and vertex A where A is 1\nOut of the hue available, there is scarlet\nThere is a connection between vertex 2 and vertex A where A is 3\nThere are 3 vertexs\nThere is a connection between vertex 1 and vertex A where A is 2", "output": "hue(\"cyan\").\nlinked_to(3,A) :- vertex(3), vertex(A), A = 1.\nhue(\"scarlet\").\nlinked_to(2,A) :- vertex(2), vertex(A), A = 3.\nvertex(1..3).\nlinked_to(1,A) :- vertex(1), vertex(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "The hue cyan exists\nvertexs 3 and 1 are connected\nvertexs 2 and 3 are connected\nThe hue limeGreen exists\nvertexs 3 and 2 are connected\nvertexs 1 and 3 are connected", "output": "hue(\"cyan\").\nattached_to(3,C) :- vertex(3), vertex(C), C = 1.\nattached_to(2,C) :- vertex(2), vertex(C), C = 3.\nhue(\"limeGreen\").\nattached_to(3,C) :- vertex(3), vertex(C), C = 2.\nattached_to(1,C) :- vertex(1), vertex(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 2 and vertex X where X is 1\nOut of the shades available, there is limeGreen\nThere are 3 vertexs\nIt can't be the case that a vertex has more than one colour\nIt is not allowed for adjacent vertexs to share the same colour\nThere is a connection between vertex 1 and vertex X where X is 3\nThere is a connection between vertex 1 and vertex X where X is 2\nThere is a connection between vertex 3 and vertex X where X is 2\nThere is a connection between vertex 3 and vertex X where X is 1", "output": "connected_to(2,X) :- vertex(2), vertex(X), X = 1.\nshade(\"limeGreen\").\nvertex(1..3).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\n:- connected_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\nconnected_to(1,X) :- vertex(1), vertex(X), X = 3.\nconnected_to(1,X) :- vertex(1), vertex(X), X = 2.\nconnected_to(3,X) :- vertex(3), vertex(X), X = 2.\nconnected_to(3,X) :- vertex(3), vertex(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "vertexs can't be assigned more than one of the colours\nThe colour green exists\nvertexs 2 and 1 are connected\nvertexs 3 and 2 are connected\nThe colour red exists\nvertexs 1 and 2 are connected\nvertexs 2 and 3 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\ncolour(\"green\").\nconnected_to(2,G) :- vertex(2), vertex(G), G = 1.\nconnected_to(3,G) :- vertex(3), vertex(G), G = 2.\ncolour(\"red\").\nconnected_to(1,G) :- vertex(1), vertex(G), G = 2.\nconnected_to(2,G) :- vertex(2), vertex(G), G = 3."}
{"instruction": "Translate this to ASP code", "input": "The shade cyan exists\nnodes 1 and 3 are connected\nnodes 2 and 1 are connected\nnodes 1 and 2 are connected\nnodes 2 and 3 are connected\nnodes 3 and 1 are connected\nThe shade pink exists\nIf two nodes are connected, they must have different colours\nnodes can't be assigned more than one of the colours\nThere are nodes 1..3", "output": "shade(\"cyan\").\nadjacent_to(1,A) :- node(1), node(A), A = 3.\nadjacent_to(2,A) :- node(2), node(A), A = 1.\nadjacent_to(1,A) :- node(1), node(A), A = 2.\nadjacent_to(2,A) :- node(2), node(A), A = 3.\nadjacent_to(3,A) :- node(3), node(A), A = 1.\nshade(\"pink\").\n:- adjacent_to(A,Y), node(A), assigned_to(A,C), node(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nnode(1..3)."}
{"instruction": "Translate this to ASP code", "input": "element 2 and element 1 are connected\nelement 3 and element 2 are connected\nelement 1 and element 3 are connected\nelement 2 and element 3 are connected", "output": "connected_to(2,G) :- element(2), element(G), G = 1.\nconnected_to(3,G) :- element(3), element(G), G = 2.\nconnected_to(1,G) :- element(1), element(G), G = 3.\nconnected_to(2,G) :- element(2), element(G), G = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 1 and vertex X where X is 3\nThere are 32 vertexs\nIt is not allowed for adjacent vertexs to share the same colour\nThere is a connection between vertex 3 and vertex X where X is 2\nThere is a connection between vertex 2 and vertex X where X is 3\nOut of the hues available, there is skyBlue", "output": "adjacent_to(1,X) :- vertex(1), vertex(X), X = 3.\nvertex(1..32).\n:- adjacent_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\nadjacent_to(3,X) :- vertex(3), vertex(X), X = 2.\nadjacent_to(2,X) :- vertex(2), vertex(X), X = 3.\nhue(\"skyBlue\")."}
{"instruction": "Translate this to ASP code", "input": "There are 3 points\nThere is a connection between point 2 and point A where A is 1\nOut of the hues available, there is skyBlue\nIt can't be the case that a point has more than one colour\nThere is a connection between point 2 and point A where A is 3\nOut of the hue available, there is scarlet", "output": "point(1..3).\nattached_to(2,A) :- point(2), point(A), A = 1.\nhue(\"skyBlue\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nattached_to(2,A) :- point(2), point(A), A = 3.\nhue(\"scarlet\")."}
{"instruction": "Translate this to ASP code", "input": "If two nodes are connected, they must have different colours\nThe hue jade exists\nThere are nodes 1..32\nThe hue azure exists", "output": ":- connected_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\nhue(\"jade\").\nnode(1..32).\nhue(\"azure\")."}
{"instruction": "Translate this to ASP code", "input": "The colour azure exists\nThere are nodes 1..14\nnodes 2 and 3 are connected\nnodes can't be assigned more than one of the colours\nnodes 3 and 1 are connected\nnodes 1 and 2 are connected\nnodes 1 and 3 are connected\nThe colour mint exists", "output": "colour(\"azure\").\nnode(1..14).\nadjacent_to(2,C) :- node(2), node(C), C = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nadjacent_to(3,C) :- node(3), node(C), C = 1.\nadjacent_to(1,C) :- node(1), node(C), C = 2.\nadjacent_to(1,C) :- node(1), node(C), C = 3.\ncolour(\"mint\")."}
{"instruction": "Translate this to ASP code", "input": "Connected vertexs cannot have the same colour\nvertex 2 and vertex 1 are connected\nvertex 3 and vertex 2 are connected\nvertex 1 and vertex 3 are connected\nvertex 1 and vertex 2 are connected\nskyBlue is a shade", "output": ":- joined_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\njoined_to(2,X) :- vertex(2), vertex(X), X = 1.\njoined_to(3,X) :- vertex(3), vertex(X), X = 2.\njoined_to(1,X) :- vertex(1), vertex(X), X = 3.\njoined_to(1,X) :- vertex(1), vertex(X), X = 2.\nshade(\"skyBlue\")."}
{"instruction": "Translate this to ASP code", "input": "nodes 2 and 1 are connected\nThe colour olive exists\nnodes 3 and 1 are connected\nnodes 3 and 2 are connected\nnodes 1 and 2 are connected\nThere are nodes 1..3\nnodes 2 and 3 are connected\nnodes can't be assigned more than one of the colours\nThe colour crimson exists", "output": "connected_to(2,A) :- node(2), node(A), A = 1.\ncolour(\"olive\").\nconnected_to(3,A) :- node(3), node(A), A = 1.\nconnected_to(3,A) :- node(3), node(A), A = 2.\nconnected_to(1,A) :- node(1), node(A), A = 2.\nnode(1..3).\nconnected_to(2,A) :- node(2), node(A), A = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\ncolour(\"crimson\")."}
{"instruction": "Translate this to ASP code", "input": "vertex 3 and vertex 2 are connected\nvertex 2 and vertex 3 are connected\nvertex 3 and vertex 1 are connected\nEvery vertex can only be assigned a single colour\ngreen is a colour\nblue is a colour\nvertex 1 and vertex 3 are connected\nA vertex goes from 1..32\nvertex 2 and vertex 1 are connected", "output": "adjacent_to(3,C) :- vertex(3), vertex(C), C = 2.\nadjacent_to(2,C) :- vertex(2), vertex(C), C = 3.\nadjacent_to(3,C) :- vertex(3), vertex(C), C = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\ncolour(\"green\").\ncolour(\"blue\").\nadjacent_to(1,C) :- vertex(1), vertex(C), C = 3.\nvertex(1..32).\nadjacent_to(2,C) :- vertex(2), vertex(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "It can't be the case that a node has more than one colour\nThere is a connection between node 3 and node A where A is 2\nThere is a connection between node 1 and node A where A is 2\nOut of the colours available, there is skyBlue", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nadjacent_to(3,A) :- node(3), node(A), A = 2.\nadjacent_to(1,A) :- node(1), node(A), A = 2.\ncolour(\"skyBlue\")."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 1 and point A where A is 2\nOut of the hue available, there is purple\nThere is a connection between point 2 and point A where A is 3\nThere are 32 points\nThere is a connection between point 2 and point A where A is 1", "output": "joined_to(1,A) :- point(1), point(A), A = 2.\nhue(\"purple\").\njoined_to(2,A) :- point(2), point(A), A = 3.\npoint(1..32).\njoined_to(2,A) :- point(2), point(A), A = 1."}
{"instruction": "Translate this to ASP code", "input": "vertexs 1 and 3 are connected\nThe shade red exists\nvertexs 1 and 2 are connected", "output": "connected_to(1,C) :- vertex(1), vertex(C), C = 3.\nshade(\"red\").\nconnected_to(1,C) :- vertex(1), vertex(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "point 2 and point 3 are connected\npoint 1 and point 3 are connected\npoint 1 and point 2 are connected\npoint 2 and point 1 are connected\nred is a colour\nConnected points cannot have the same colour\nEvery point can only be assigned a single colour\nolive is a colour", "output": "joined_to(2,X) :- point(2), point(X), X = 3.\njoined_to(1,X) :- point(1), point(X), X = 3.\njoined_to(1,X) :- point(1), point(X), X = 2.\njoined_to(2,X) :- point(2), point(X), X = 1.\ncolour(\"red\").\n:- joined_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\ncolour(\"olive\")."}
{"instruction": "Translate this to ASP code", "input": "points can't be assigned more than one of the colours\npoints 3 and 1 are connected\nThere are points 1..3\nThe colour jade exists\npoints 1 and 2 are connected\npoints 2 and 3 are connected\nThe colour purple exists\nIf two points are connected, they must have different colours", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nlinked_to(3,X) :- point(3), point(X), X = 1.\npoint(1..3).\ncolour(\"jade\").\nlinked_to(1,X) :- point(1), point(X), X = 2.\nlinked_to(2,X) :- point(2), point(X), X = 3.\ncolour(\"purple\").\n:- linked_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "There are 3 points\nThere is a connection between point 2 and point G where G is 1\nIt can't be the case that a point has more than one colour\nOut of the hues available, there is cobalt\nOut of the hues available, there is Emerald\nThere is a connection between point 1 and point G where G is 3\nThere is a connection between point 3 and point G where G is 2\nOut of the hue available, there is pink\nThere is a connection between point 3 and point G where G is 1", "output": "point(1..3).\njoined_to(2,G) :- point(2), point(G), G = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nhue(\"cobalt\").\nhue(\"Emerald\").\njoined_to(1,G) :- point(1), point(G), G = 3.\njoined_to(3,G) :- point(3), point(G), G = 2.\nhue(\"pink\").\njoined_to(3,G) :- point(3), point(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "azure is a shade\nEvery element can only be assigned a single colour\nelement 1 and element 3 are connected\nelement 2 and element 3 are connected\nConnected elements cannot have the same colour\nEmerald is a shade\nscarlet is a shade\nelement 3 and element 2 are connected", "output": "shade(\"azure\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nadjacent_to(1,A) :- element(1), element(A), A = 3.\nadjacent_to(2,A) :- element(2), element(A), A = 3.\n:- adjacent_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C).\nshade(\"Emerald\").\nshade(\"scarlet\").\nadjacent_to(3,A) :- element(3), element(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "cyan is a hue\nelement 1 and element 2 are connected\nelement 3 and element 1 are connected\nolive is a hue\nelement 1 and element 3 are connected\nA element goes from 1..32\nred is a hue", "output": "hue(\"cyan\").\nadjacent_to(1,G) :- element(1), element(G), G = 2.\nadjacent_to(3,G) :- element(3), element(G), G = 1.\nhue(\"olive\").\nadjacent_to(1,G) :- element(1), element(G), G = 3.\nelement(1..32).\nhue(\"red\")."}
{"instruction": "Translate this to ASP code", "input": "There are elements 1..14\nThe colour skyBlue exists\nThe colour olive exists\nelements 3 and 1 are connected\nelements 1 and 3 are connected\nelements 2 and 3 are connected\nelements can't be assigned more than one of the colours", "output": "element(1..14).\ncolour(\"skyBlue\").\ncolour(\"olive\").\nadjacent_to(3,X) :- element(3), element(X), X = 1.\nadjacent_to(1,X) :- element(1), element(X), X = 3.\nadjacent_to(2,X) :- element(2), element(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "It can't be the case that a point has more than one colour\nOut of the colour available, there is red\nThere is a connection between point 2 and point G where G is 1\nThere is a connection between point 3 and point G where G is 2\nThere is a connection between point 1 and point G where G is 3\nOut of the colours available, there is azure\nThere is a connection between point 1 and point G where G is 2", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\ncolour(\"red\").\nconnected_to(2,G) :- point(2), point(G), G = 1.\nconnected_to(3,G) :- point(3), point(G), G = 2.\nconnected_to(1,G) :- point(1), point(G), G = 3.\ncolour(\"azure\").\nconnected_to(1,G) :- point(1), point(G), G = 2."}
{"instruction": "Translate this to ASP code", "input": "points 2 and 3 are connected\nThe colour crimson exists\npoints 1 and 3 are connected\nIf two points are connected, they must have different colours\npoints 2 and 1 are connected\npoints 3 and 1 are connected\npoints 1 and 2 are connected\npoints 3 and 2 are connected\npoints can't be assigned more than one of the colours\nThere are points 1..32", "output": "attached_to(2,A) :- point(2), point(A), A = 3.\ncolour(\"crimson\").\nattached_to(1,A) :- point(1), point(A), A = 3.\n:- attached_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\nattached_to(2,A) :- point(2), point(A), A = 1.\nattached_to(3,A) :- point(3), point(A), A = 1.\nattached_to(1,A) :- point(1), point(A), A = 2.\nattached_to(3,A) :- point(3), point(A), A = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\npoint(1..32)."}
{"instruction": "Translate this to ASP code", "input": "Emerald is a colour\nelement 1 and element 2 are connected\nA element goes from 1..14\nelement 2 and element 3 are connected\nskyBlue is a colour", "output": "colour(\"Emerald\").\nattached_to(1,C) :- element(1), element(C), C = 2.\nelement(1..14).\nattached_to(2,C) :- element(2), element(C), C = 3.\ncolour(\"skyBlue\")."}
{"instruction": "Translate this to ASP code", "input": "nodes 1 and 3 are connected\nnodes can't be assigned more than one of the colours\nnodes 2 and 3 are connected\nnodes 1 and 2 are connected\nnodes 2 and 1 are connected\nThe hue mint exists\nThe hue red exists\nnodes 3 and 1 are connected\nnodes 3 and 2 are connected\nIf two nodes are connected, they must have different colours\nThe hue cyan exists", "output": "linked_to(1,X) :- node(1), node(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nlinked_to(2,X) :- node(2), node(X), X = 3.\nlinked_to(1,X) :- node(1), node(X), X = 2.\nlinked_to(2,X) :- node(2), node(X), X = 1.\nhue(\"mint\").\nhue(\"red\").\nlinked_to(3,X) :- node(3), node(X), X = 1.\nlinked_to(3,X) :- node(3), node(X), X = 2.\n:- linked_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\nhue(\"cyan\")."}
{"instruction": "Translate this to ASP code", "input": "The shade cyan exists\nnodes 3 and 1 are connected\nnodes 3 and 2 are connected\nnodes 1 and 3 are connected\nnodes 2 and 1 are connected\nThe shade limeGreen exists\nnodes 1 and 2 are connected\nnodes 2 and 3 are connected", "output": "shade(\"cyan\").\nattached_to(3,G) :- node(3), node(G), G = 1.\nattached_to(3,G) :- node(3), node(G), G = 2.\nattached_to(1,G) :- node(1), node(G), G = 3.\nattached_to(2,G) :- node(2), node(G), G = 1.\nshade(\"limeGreen\").\nattached_to(1,G) :- node(1), node(G), G = 2.\nattached_to(2,G) :- node(2), node(G), G = 3."}
{"instruction": "Translate this to ASP code", "input": "Every node can only be assigned a single colour\nnode 1 and node 2 are connected\nazure is a shade\nnode 1 and node 3 are connected\nscarlet is a shade\nA node goes from 1..14\nnode 2 and node 3 are connected\nnode 3 and node 2 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\njoined_to(1,C) :- node(1), node(C), C = 2.\nshade(\"azure\").\njoined_to(1,C) :- node(1), node(C), C = 3.\nshade(\"scarlet\").\nnode(1..14).\njoined_to(2,C) :- node(2), node(C), C = 3.\njoined_to(3,C) :- node(3), node(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "point 3 and point 2 are connected\nEvery point can only be assigned a single colour\npoint 3 and point 1 are connected", "output": "joined_to(3,C) :- point(3), point(C), C = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\njoined_to(3,C) :- point(3), point(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "vertexs 1 and 2 are connected\nIf two vertexs are connected, they must have different colours\nThe hue cyan exists\nvertexs 3 and 1 are connected\nThe hue Emerald exists\nvertexs 2 and 1 are connected\nThere are vertexs 1..32\nvertexs 3 and 2 are connected\nvertexs 1 and 3 are connected\nvertexs can't be assigned more than one of the colours", "output": "joined_to(1,X) :- vertex(1), vertex(X), X = 2.\n:- joined_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\nhue(\"cyan\").\njoined_to(3,X) :- vertex(3), vertex(X), X = 1.\nhue(\"Emerald\").\njoined_to(2,X) :- vertex(2), vertex(X), X = 1.\nvertex(1..32).\njoined_to(3,X) :- vertex(3), vertex(X), X = 2.\njoined_to(1,X) :- vertex(1), vertex(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "Out of the shades available, there is mint\nThere is a connection between node 2 and node X where X is 3\nThere is a connection between node 1 and node X where X is 3\nIt can't be the case that a node has more than one colour\nIt is not allowed for adjacent nodes to share the same colour\nThere is a connection between node 1 and node X where X is 2", "output": "shade(\"mint\").\njoined_to(2,X) :- node(2), node(X), X = 3.\njoined_to(1,X) :- node(1), node(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\n:- joined_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\njoined_to(1,X) :- node(1), node(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "elements 2 and 3 are connected\nelements 1 and 2 are connected\nelements 1 and 3 are connected\nelements can't be assigned more than one of the colours\nThe colour azure exists\nelements 3 and 1 are connected\nIf two elements are connected, they must have different colours\nelements 2 and 1 are connected", "output": "linked_to(2,X) :- element(2), element(X), X = 3.\nlinked_to(1,X) :- element(1), element(X), X = 2.\nlinked_to(1,X) :- element(1), element(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\ncolour(\"azure\").\nlinked_to(3,X) :- element(3), element(X), X = 1.\n:- linked_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nlinked_to(2,X) :- element(2), element(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "The hue maroon exists\nnodes 3 and 2 are connected\nThere are nodes 1..14\nnodes 2 and 1 are connected\nIf two nodes are connected, they must have different colours", "output": "hue(\"maroon\").\nattached_to(3,A) :- node(3), node(A), A = 2.\nnode(1..14).\nattached_to(2,A) :- node(2), node(A), A = 1.\n:- attached_to(A,Y), node(A), assigned_to(A,C), node(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "Every point can only be assigned a single colour\nA point goes from 1..32\nblue is a hue\nConnected points cannot have the same colour\npoint 3 and point 2 are connected\njade is a hue\npoint 3 and point 1 are connected\npoint 2 and point 1 are connected\npoint 1 and point 2 are connected\npoint 1 and point 3 are connected\nmaroon is a hue", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\npoint(1..32).\nhue(\"blue\").\n:- attached_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\nattached_to(3,G) :- point(3), point(G), G = 2.\nhue(\"jade\").\nattached_to(3,G) :- point(3), point(G), G = 1.\nattached_to(2,G) :- point(2), point(G), G = 1.\nattached_to(1,G) :- point(1), point(G), G = 2.\nattached_to(1,G) :- point(1), point(G), G = 3.\nhue(\"maroon\")."}
{"instruction": "Translate this to ASP code", "input": "A vertex goes from 1..3\nEvery vertex can only be assigned a single colour\ngreen is a shade\ncyan is a shade", "output": "vertex(1..3).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nshade(\"green\").\nshade(\"cyan\")."}
{"instruction": "Translate this to ASP code", "input": "node 1 and node 2 are connected\nazure is a hue\nnode 2 and node 1 are connected", "output": "connected_to(1,A) :- node(1), node(A), A = 2.\nhue(\"azure\").\nconnected_to(2,A) :- node(2), node(A), A = 1."}
{"instruction": "Translate this to ASP code", "input": "Every node can only be assigned a single colour\nnode 3 and node 2 are connected\nnode 1 and node 2 are connected\nnode 1 and node 3 are connected\nblue is a hue\nolive is a hue\nA node goes from 1..3\nmaroon is a hue", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nlinked_to(3,X) :- node(3), node(X), X = 2.\nlinked_to(1,X) :- node(1), node(X), X = 2.\nlinked_to(1,X) :- node(1), node(X), X = 3.\nhue(\"blue\").\nhue(\"olive\").\nnode(1..3).\nhue(\"maroon\")."}
{"instruction": "Translate this to ASP code", "input": "node 2 and node 1 are connected\nConnected nodes cannot have the same colour\nlimeGreen is a colour\nnode 2 and node 3 are connected\nnode 3 and node 1 are connected\nnode 3 and node 2 are connected\ncrimson is a colour\nnode 1 and node 3 are connected\nA node goes from 1..14", "output": "attached_to(2,X) :- node(2), node(X), X = 1.\n:- attached_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\ncolour(\"limeGreen\").\nattached_to(2,X) :- node(2), node(X), X = 3.\nattached_to(3,X) :- node(3), node(X), X = 1.\nattached_to(3,X) :- node(3), node(X), X = 2.\ncolour(\"crimson\").\nattached_to(1,X) :- node(1), node(X), X = 3.\nnode(1..14)."}
{"instruction": "Translate this to ASP code", "input": "The colour pink exists\npoints 2 and 1 are connected\npoints can't be assigned more than one of the colours\npoints 3 and 1 are connected\npoints 1 and 3 are connected\nThe colour skyBlue exists\nThere are points 1..32", "output": "colour(\"pink\").\nconnected_to(2,X) :- point(2), point(X), X = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nconnected_to(3,X) :- point(3), point(X), X = 1.\nconnected_to(1,X) :- point(1), point(X), X = 3.\ncolour(\"skyBlue\").\npoint(1..32)."}
{"instruction": "Translate this to ASP code", "input": "vertexs 1 and 2 are connected\nThe colour purple exists\nIf two vertexs are connected, they must have different colours\nvertexs can't be assigned more than one of the colours\nvertexs 3 and 2 are connected\nThere are vertexs 1..3", "output": "connected_to(1,A) :- vertex(1), vertex(A), A = 2.\ncolour(\"purple\").\n:- connected_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nconnected_to(3,A) :- vertex(3), vertex(A), A = 2.\nvertex(1..3)."}
{"instruction": "Translate this to ASP code", "input": "cyan is a hue\nA element goes from 1..32\nelement 3 and element 1 are connected\nelement 3 and element 2 are connected\nEmerald is a hue\nscarlet is a hue\nelement 2 and element 1 are connected\nelement 2 and element 3 are connected\nelement 1 and element 2 are connected\nEvery element can only be assigned a single colour\nelement 1 and element 3 are connected", "output": "hue(\"cyan\").\nelement(1..32).\njoined_to(3,C) :- element(3), element(C), C = 1.\njoined_to(3,C) :- element(3), element(C), C = 2.\nhue(\"Emerald\").\nhue(\"scarlet\").\njoined_to(2,C) :- element(2), element(C), C = 1.\njoined_to(2,C) :- element(2), element(C), C = 3.\njoined_to(1,C) :- element(1), element(C), C = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\njoined_to(1,C) :- element(1), element(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "elements 2 and 3 are connected\nelements 1 and 2 are connected\nThere are elements 1..32\nThe hue jade exists\nelements 3 and 1 are connected\nelements 2 and 1 are connected", "output": "adjacent_to(2,X) :- element(2), element(X), X = 3.\nadjacent_to(1,X) :- element(1), element(X), X = 2.\nelement(1..32).\nhue(\"jade\").\nadjacent_to(3,X) :- element(3), element(X), X = 1.\nadjacent_to(2,X) :- element(2), element(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 3 and point X where X is 2\nThere is a connection between point 1 and point X where X is 3\nThere are 3 points\nThere is a connection between point 2 and point X where X is 1\nIt is not allowed for adjacent points to share the same colour\nIt can't be the case that a point has more than one colour\nThere is a connection between point 2 and point X where X is 3\nOut of the hue available, there is pink\nThere is a connection between point 1 and point X where X is 2", "output": "adjacent_to(3,X) :- point(3), point(X), X = 2.\nadjacent_to(1,X) :- point(1), point(X), X = 3.\npoint(1..3).\nadjacent_to(2,X) :- point(2), point(X), X = 1.\n:- adjacent_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nadjacent_to(2,X) :- point(2), point(X), X = 3.\nhue(\"pink\").\nadjacent_to(1,X) :- point(1), point(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between element 2 and element A where A is 3\nOut of the shade available, there is purple\nIt is not allowed for adjacent elements to share the same colour\nThere is a connection between element 1 and element A where A is 3\nThere is a connection between element 1 and element A where A is 2\nThere is a connection between element 3 and element A where A is 1\nIt can't be the case that a element has more than one colour\nOut of the shades available, there is cobalt\nThere are 3 elements\nOut of the shades available, there is Emerald", "output": "connected_to(2,A) :- element(2), element(A), A = 3.\nshade(\"purple\").\n:- connected_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C).\nconnected_to(1,A) :- element(1), element(A), A = 3.\nconnected_to(1,A) :- element(1), element(A), A = 2.\nconnected_to(3,A) :- element(3), element(A), A = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nshade(\"cobalt\").\nelement(1..3).\nshade(\"Emerald\")."}
{"instruction": "Translate this to ASP code", "input": "vertexs 3 and 2 are connected\nvertexs 1 and 3 are connected\nIf two vertexs are connected, they must have different colours\nvertexs 3 and 1 are connected\nThere are vertexs 1..3", "output": "connected_to(3,A) :- vertex(3), vertex(A), A = 2.\nconnected_to(1,A) :- vertex(1), vertex(A), A = 3.\n:- connected_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\nconnected_to(3,A) :- vertex(3), vertex(A), A = 1.\nvertex(1..3)."}
{"instruction": "Translate this to ASP code", "input": "Out of the shades available, there is jade\nThere is a connection between point 3 and point X where X is 2\nThere is a connection between point 3 and point X where X is 1\nOut of the shades available, there is cobalt\nThere is a connection between point 2 and point X where X is 3\nThere is a connection between point 1 and point X where X is 3\nIt is not allowed for adjacent points to share the same colour\nThere is a connection between point 2 and point X where X is 1", "output": "shade(\"jade\").\nattached_to(3,X) :- point(3), point(X), X = 2.\nattached_to(3,X) :- point(3), point(X), X = 1.\nshade(\"cobalt\").\nattached_to(2,X) :- point(2), point(X), X = 3.\nattached_to(1,X) :- point(1), point(X), X = 3.\n:- attached_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\nattached_to(2,X) :- point(2), point(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "node 3 and node 1 are connected\nnode 1 and node 2 are connected\nA node goes from 1..32", "output": "joined_to(3,G) :- node(3), node(G), G = 1.\njoined_to(1,G) :- node(1), node(G), G = 2.\nnode(1..32)."}
{"instruction": "Translate this to ASP code", "input": "vertex 1 and vertex 2 are connected\nvertex 2 and vertex 3 are connected\npurple is a shade\nEvery vertex can only be assigned a single colour\nA vertex goes from 1..32\nEmerald is a shade\nvertex 3 and vertex 2 are connected\nvertex 1 and vertex 3 are connected", "output": "joined_to(1,X) :- vertex(1), vertex(X), X = 2.\njoined_to(2,X) :- vertex(2), vertex(X), X = 3.\nshade(\"purple\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nvertex(1..32).\nshade(\"Emerald\").\njoined_to(3,X) :- vertex(3), vertex(X), X = 2.\njoined_to(1,X) :- vertex(1), vertex(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "The hue blue exists\nnodes 1 and 2 are connected\nnodes 2 and 1 are connected", "output": "hue(\"blue\").\nadjacent_to(1,G) :- node(1), node(G), G = 2.\nadjacent_to(2,G) :- node(2), node(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "It can't be the case that a vertex has more than one colour\nOut of the hues available, there is blue\nThere is a connection between vertex 1 and vertex A where A is 3\nThere is a connection between vertex 3 and vertex A where A is 2\nThere is a connection between vertex 2 and vertex A where A is 1", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nhue(\"blue\").\njoined_to(1,A) :- vertex(1), vertex(A), A = 3.\njoined_to(3,A) :- vertex(3), vertex(A), A = 2.\njoined_to(2,A) :- vertex(2), vertex(A), A = 1."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 2 and vertex X where X is 3\nIt can't be the case that a vertex has more than one colour\nIt is not allowed for adjacent vertexs to share the same colour\nOut of the shades available, there is cobalt\nThere is a connection between vertex 3 and vertex X where X is 1\nThere is a connection between vertex 1 and vertex X where X is 2\nThere is a connection between vertex 1 and vertex X where X is 3\nThere are 3 vertexs", "output": "connected_to(2,X) :- vertex(2), vertex(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\n:- connected_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\nshade(\"cobalt\").\nconnected_to(3,X) :- vertex(3), vertex(X), X = 1.\nconnected_to(1,X) :- vertex(1), vertex(X), X = 2.\nconnected_to(1,X) :- vertex(1), vertex(X), X = 3.\nvertex(1..3)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 1 and vertex X where X is 2\nThere is a connection between vertex 2 and vertex X where X is 3\nThere is a connection between vertex 2 and vertex X where X is 1\nOut of the hues available, there is blue", "output": "connected_to(1,X) :- vertex(1), vertex(X), X = 2.\nconnected_to(2,X) :- vertex(2), vertex(X), X = 3.\nconnected_to(2,X) :- vertex(2), vertex(X), X = 1.\nhue(\"blue\")."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent vertexs to share the same colour\nIt can't be the case that a vertex has more than one colour\nThere are 32 vertexs\nOut of the hues available, there is olive\nThere is a connection between vertex 3 and vertex G where G is 1\nThere is a connection between vertex 2 and vertex G where G is 3\nThere is a connection between vertex 1 and vertex G where G is 3\nThere is a connection between vertex 3 and vertex G where G is 2", "output": ":- linked_to(G,Y), vertex(G), assigned_to(G,C), vertex(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nvertex(1..32).\nhue(\"olive\").\nlinked_to(3,G) :- vertex(3), vertex(G), G = 1.\nlinked_to(2,G) :- vertex(2), vertex(G), G = 3.\nlinked_to(1,G) :- vertex(1), vertex(G), G = 3.\nlinked_to(3,G) :- vertex(3), vertex(G), G = 2."}
{"instruction": "Translate this to ASP code", "input": "A vertex goes from 1..32\nConnected vertexs cannot have the same colour\nblue is a shade", "output": "vertex(1..32).\n:- connected_to(G,Y), vertex(G), assigned_to(G,C), vertex(Y), assigned_to(Y,C), color(C).\nshade(\"blue\")."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 2 and node A where A is 1\nThere is a connection between node 1 and node A where A is 2\nIt can't be the case that a node has more than one colour\nThere is a connection between node 3 and node A where A is 1\nOut of the colours available, there is green", "output": "linked_to(2,A) :- node(2), node(A), A = 1.\nlinked_to(1,A) :- node(1), node(A), A = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nlinked_to(3,A) :- node(3), node(A), A = 1.\ncolour(\"green\")."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 3 and node G where G is 2\nThere is a connection between node 2 and node G where G is 3\nOut of the shades available, there is cobalt\nOut of the shades available, there is green", "output": "attached_to(3,G) :- node(3), node(G), G = 2.\nattached_to(2,G) :- node(2), node(G), G = 3.\nshade(\"cobalt\").\nshade(\"green\")."}
{"instruction": "Translate this to ASP code", "input": "The shade purple exists\nnodes 1 and 2 are connected\nnodes 1 and 3 are connected\nnodes 2 and 3 are connected\nThere are nodes 1..3\nnodes 3 and 1 are connected\nnodes 2 and 1 are connected\nnodes can't be assigned more than one of the colours", "output": "shade(\"purple\").\nconnected_to(1,A) :- node(1), node(A), A = 2.\nconnected_to(1,A) :- node(1), node(A), A = 3.\nconnected_to(2,A) :- node(2), node(A), A = 3.\nnode(1..3).\nconnected_to(3,A) :- node(3), node(A), A = 1.\nconnected_to(2,A) :- node(2), node(A), A = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "Out of the shades available, there is blue\nThere is a connection between node 2 and node C where C is 1\nOut of the shade available, there is scarlet\nIt is not allowed for adjacent nodes to share the same colour\nThere is a connection between node 2 and node C where C is 3\nThere are 3 nodes\nThere is a connection between node 1 and node C where C is 2", "output": "shade(\"blue\").\nconnected_to(2,C) :- node(2), node(C), C = 1.\nshade(\"scarlet\").\n:- connected_to(C,Y), node(C), assigned_to(C,C), node(Y), assigned_to(Y,C), color(C).\nconnected_to(2,C) :- node(2), node(C), C = 3.\nnode(1..3).\nconnected_to(1,C) :- node(1), node(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between element 2 and element A where A is 1\nThere are 32 elements\nThere is a connection between element 3 and element A where A is 1\nIt can't be the case that a element has more than one colour\nIt is not allowed for adjacent elements to share the same colour", "output": "adjacent_to(2,A) :- element(2), element(A), A = 1.\nelement(1..32).\nadjacent_to(3,A) :- element(3), element(A), A = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\n:- adjacent_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "The colour pink exists\nelements 2 and 3 are connected\nelements 1 and 2 are connected\nelements 1 and 3 are connected\nThe colour green exists\nelements 3 and 1 are connected\nThe colour blue exists\nIf two elements are connected, they must have different colours\nelements 3 and 2 are connected\nThere are elements 1..3\nelements 2 and 1 are connected", "output": "colour(\"pink\").\njoined_to(2,A) :- element(2), element(A), A = 3.\njoined_to(1,A) :- element(1), element(A), A = 2.\njoined_to(1,A) :- element(1), element(A), A = 3.\ncolour(\"green\").\njoined_to(3,A) :- element(3), element(A), A = 1.\ncolour(\"blue\").\n:- joined_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C).\njoined_to(3,A) :- element(3), element(A), A = 2.\nelement(1..3).\njoined_to(2,A) :- element(2), element(A), A = 1."}
{"instruction": "Translate this to ASP code", "input": "element 1 and element 2 are connected\nelement 2 and element 1 are connected\nConnected elements cannot have the same colour\nEvery element can only be assigned a single colour\nelement 3 and element 2 are connected\nblue is a hue\nelement 3 and element 1 are connected\nlimeGreen is a hue\nelement 2 and element 3 are connected\nelement 1 and element 3 are connected\nA element goes from 1..32", "output": "connected_to(1,G) :- element(1), element(G), G = 2.\nconnected_to(2,G) :- element(2), element(G), G = 1.\n:- connected_to(G,Y), element(G), assigned_to(G,C), element(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nconnected_to(3,G) :- element(3), element(G), G = 2.\nhue(\"blue\").\nconnected_to(3,G) :- element(3), element(G), G = 1.\nhue(\"limeGreen\").\nconnected_to(2,G) :- element(2), element(G), G = 3.\nconnected_to(1,G) :- element(1), element(G), G = 3.\nelement(1..32)."}
{"instruction": "Translate this to ASP code", "input": "crimson is a shade\nA node goes from 1..32\nskyBlue is a shade\nnode 3 and node 1 are connected\nlimeGreen is a shade\nConnected nodes cannot have the same colour\nnode 3 and node 2 are connected\nnode 1 and node 3 are connected\nnode 1 and node 2 are connected", "output": "shade(\"crimson\").\nnode(1..32).\nshade(\"skyBlue\").\njoined_to(3,X) :- node(3), node(X), X = 1.\nshade(\"limeGreen\").\n:- joined_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\njoined_to(3,X) :- node(3), node(X), X = 2.\njoined_to(1,X) :- node(1), node(X), X = 3.\njoined_to(1,X) :- node(1), node(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent vertexs to share the same colour\nThere is a connection between vertex 3 and vertex A where A is 1\nThere is a connection between vertex 2 and vertex A where A is 3\nThere is a connection between vertex 2 and vertex A where A is 1", "output": ":- linked_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\nlinked_to(3,A) :- vertex(3), vertex(A), A = 1.\nlinked_to(2,A) :- vertex(2), vertex(A), A = 3.\nlinked_to(2,A) :- vertex(2), vertex(A), A = 1."}
{"instruction": "Translate this to ASP code", "input": "points 3 and 2 are connected\npoints 3 and 1 are connected\nThe shade crimson exists\npoints 2 and 3 are connected\npoints 1 and 2 are connected", "output": "connected_to(3,C) :- point(3), point(C), C = 2.\nconnected_to(3,C) :- point(3), point(C), C = 1.\nshade(\"crimson\").\nconnected_to(2,C) :- point(2), point(C), C = 3.\nconnected_to(1,C) :- point(1), point(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "point 2 and point 1 are connected\nConnected points cannot have the same colour\njade is a colour\ncrimson is a colour\nA point goes from 1..14", "output": "adjacent_to(2,G) :- point(2), point(G), G = 1.\n:- adjacent_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\ncolour(\"jade\").\ncolour(\"crimson\").\npoint(1..14)."}
{"instruction": "Translate this to ASP code", "input": "point 1 and point 2 are connected\npoint 3 and point 2 are connected\npoint 2 and point 1 are connected\npoint 3 and point 1 are connected\nA point goes from 1..3\npoint 1 and point 3 are connected\nEvery point can only be assigned a single colour\njade is a colour\npoint 2 and point 3 are connected\nazure is a colour\ncrimson is a colour", "output": "linked_to(1,X) :- point(1), point(X), X = 2.\nlinked_to(3,X) :- point(3), point(X), X = 2.\nlinked_to(2,X) :- point(2), point(X), X = 1.\nlinked_to(3,X) :- point(3), point(X), X = 1.\npoint(1..3).\nlinked_to(1,X) :- point(1), point(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\ncolour(\"jade\").\nlinked_to(2,X) :- point(2), point(X), X = 3.\ncolour(\"azure\").\ncolour(\"crimson\")."}
{"instruction": "Translate this to ASP code", "input": "vertexs 1 and 2 are connected\nvertexs 3 and 2 are connected\nvertexs 1 and 3 are connected\nThere are vertexs 1..32\nvertexs can't be assigned more than one of the colours", "output": "attached_to(1,G) :- vertex(1), vertex(G), G = 2.\nattached_to(3,G) :- vertex(3), vertex(G), G = 2.\nattached_to(1,G) :- vertex(1), vertex(G), G = 3.\nvertex(1..32).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 2 and vertex X where X is 1\nIt is not allowed for adjacent vertexs to share the same colour\nThere are 3 vertexs\nThere is a connection between vertex 1 and vertex X where X is 3\nIt can't be the case that a vertex has more than one colour\nOut of the hues available, there is Emerald\nThere is a connection between vertex 2 and vertex X where X is 3\nOut of the hue available, there is red", "output": "joined_to(2,X) :- vertex(2), vertex(X), X = 1.\n:- joined_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\nvertex(1..3).\njoined_to(1,X) :- vertex(1), vertex(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nhue(\"Emerald\").\njoined_to(2,X) :- vertex(2), vertex(X), X = 3.\nhue(\"red\")."}
{"instruction": "Translate this to ASP code", "input": "Out of the shade available, there is crimson\nThere is a connection between vertex 1 and vertex A where A is 2\nThere is a connection between vertex 3 and vertex A where A is 2\nThere is a connection between vertex 2 and vertex A where A is 1", "output": "shade(\"crimson\").\nadjacent_to(1,A) :- vertex(1), vertex(A), A = 2.\nadjacent_to(3,A) :- vertex(3), vertex(A), A = 2.\nadjacent_to(2,A) :- vertex(2), vertex(A), A = 1."}
{"instruction": "Translate this to ASP code", "input": "The shade skyBlue exists\nvertexs 2 and 3 are connected\nvertexs 3 and 2 are connected\nvertexs 3 and 1 are connected\nThere are vertexs 1..3\nThe shade green exists\nvertexs can't be assigned more than one of the colours\nvertexs 1 and 2 are connected", "output": "shade(\"skyBlue\").\njoined_to(2,C) :- vertex(2), vertex(C), C = 3.\njoined_to(3,C) :- vertex(3), vertex(C), C = 2.\njoined_to(3,C) :- vertex(3), vertex(C), C = 1.\nvertex(1..3).\nshade(\"green\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\njoined_to(1,C) :- vertex(1), vertex(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 1 and vertex A where A is 3\nThere are 3 vertexs\nOut of the shade available, there is pink\nThere is a connection between vertex 2 and vertex A where A is 3\nThere is a connection between vertex 3 and vertex A where A is 2\nOut of the shades available, there is azure\nThere is a connection between vertex 1 and vertex A where A is 2", "output": "joined_to(1,A) :- vertex(1), vertex(A), A = 3.\nvertex(1..3).\nshade(\"pink\").\njoined_to(2,A) :- vertex(2), vertex(A), A = 3.\njoined_to(3,A) :- vertex(3), vertex(A), A = 2.\nshade(\"azure\").\njoined_to(1,A) :- vertex(1), vertex(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "scarlet is a hue\nelement 2 and element 1 are connected\nConnected elements cannot have the same colour\nelement 3 and element 1 are connected", "output": "hue(\"scarlet\").\nconnected_to(2,A) :- element(2), element(A), A = 1.\n:- connected_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C).\nconnected_to(3,A) :- element(3), element(A), A = 1."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 2 and node X where X is 3\nThere is a connection between node 1 and node X where X is 3\nThere is a connection between node 3 and node X where X is 1\nThere is a connection between node 1 and node X where X is 2\nOut of the colour available, there is maroon\nIt is not allowed for adjacent nodes to share the same colour\nOut of the colours available, there is limeGreen\nThere is a connection between node 2 and node X where X is 1\nThere are 32 nodes\nOut of the colours available, there is skyBlue\nIt can't be the case that a node has more than one colour", "output": "joined_to(2,X) :- node(2), node(X), X = 3.\njoined_to(1,X) :- node(1), node(X), X = 3.\njoined_to(3,X) :- node(3), node(X), X = 1.\njoined_to(1,X) :- node(1), node(X), X = 2.\ncolour(\"maroon\").\n:- joined_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\ncolour(\"limeGreen\").\njoined_to(2,X) :- node(2), node(X), X = 1.\nnode(1..32).\ncolour(\"skyBlue\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "There are vertexs 1..32\nvertexs 3 and 2 are connected\nThe hue cobalt exists\nvertexs can't be assigned more than one of the colours\nIf two vertexs are connected, they must have different colours\nThe hue maroon exists\nvertexs 2 and 3 are connected\nvertexs 1 and 3 are connected\nvertexs 2 and 1 are connected\nvertexs 1 and 2 are connected", "output": "vertex(1..32).\nadjacent_to(3,A) :- vertex(3), vertex(A), A = 2.\nhue(\"cobalt\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\n:- adjacent_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\nhue(\"maroon\").\nadjacent_to(2,A) :- vertex(2), vertex(A), A = 3.\nadjacent_to(1,A) :- vertex(1), vertex(A), A = 3.\nadjacent_to(2,A) :- vertex(2), vertex(A), A = 1.\nadjacent_to(1,A) :- vertex(1), vertex(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 2 and node X where X is 3\nThere is a connection between node 2 and node X where X is 1\nThere is a connection between node 3 and node X where X is 1", "output": "linked_to(2,X) :- node(2), node(X), X = 3.\nlinked_to(2,X) :- node(2), node(X), X = 1.\nlinked_to(3,X) :- node(3), node(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "The colour crimson exists\nnodes can't be assigned more than one of the colours\nnodes 3 and 1 are connected\nThere are nodes 1..3\nnodes 1 and 3 are connected\nnodes 1 and 2 are connected\nIf two nodes are connected, they must have different colours\nThe colour Emerald exists\nnodes 2 and 1 are connected\nThe colour cobalt exists", "output": "colour(\"crimson\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nattached_to(3,X) :- node(3), node(X), X = 1.\nnode(1..3).\nattached_to(1,X) :- node(1), node(X), X = 3.\nattached_to(1,X) :- node(1), node(X), X = 2.\n:- attached_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\ncolour(\"Emerald\").\nattached_to(2,X) :- node(2), node(X), X = 1.\ncolour(\"cobalt\")."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 1 and node C where C is 2\nIt is not allowed for adjacent nodes to share the same colour\nOut of the hues available, there is blue\nIt can't be the case that a node has more than one colour\nThere is a connection between node 3 and node C where C is 1\nOut of the hue available, there is scarlet\nThere is a connection between node 1 and node C where C is 3\nThere are 32 nodes\nThere is a connection between node 2 and node C where C is 3\nOut of the hues available, there is mint", "output": "attached_to(1,C) :- node(1), node(C), C = 2.\n:- attached_to(C,Y), node(C), assigned_to(C,C), node(Y), assigned_to(Y,C), color(C).\nhue(\"blue\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nattached_to(3,C) :- node(3), node(C), C = 1.\nhue(\"scarlet\").\nattached_to(1,C) :- node(1), node(C), C = 3.\nnode(1..32).\nattached_to(2,C) :- node(2), node(C), C = 3.\nhue(\"mint\")."}
{"instruction": "Translate this to ASP code", "input": "red is a hue\nelement 2 and element 1 are connected\nskyBlue is a hue\nelement 1 and element 2 are connected\nelement 3 and element 2 are connected\nelement 1 and element 3 are connected\nA element goes from 1..14", "output": "hue(\"red\").\nconnected_to(2,A) :- element(2), element(A), A = 1.\nhue(\"skyBlue\").\nconnected_to(1,A) :- element(1), element(A), A = 2.\nconnected_to(3,A) :- element(3), element(A), A = 2.\nconnected_to(1,A) :- element(1), element(A), A = 3.\nelement(1..14)."}
{"instruction": "Translate this to ASP code", "input": "element 3 and element 2 are connected\nelement 2 and element 3 are connected\nlimeGreen is a shade", "output": "linked_to(3,G) :- element(3), element(G), G = 2.\nlinked_to(2,G) :- element(2), element(G), G = 3.\nshade(\"limeGreen\")."}
{"instruction": "Translate this to ASP code", "input": "vertex 1 and vertex 3 are connected\nvertex 2 and vertex 1 are connected\nvertex 1 and vertex 2 are connected\nvertex 2 and vertex 3 are connected\nvertex 3 and vertex 1 are connected\nConnected vertexs cannot have the same colour\nazure is a shade\nEvery vertex can only be assigned a single colour\nA vertex goes from 1..32", "output": "adjacent_to(1,C) :- vertex(1), vertex(C), C = 3.\nadjacent_to(2,C) :- vertex(2), vertex(C), C = 1.\nadjacent_to(1,C) :- vertex(1), vertex(C), C = 2.\nadjacent_to(2,C) :- vertex(2), vertex(C), C = 3.\nadjacent_to(3,C) :- vertex(3), vertex(C), C = 1.\n:- adjacent_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C).\nshade(\"azure\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nvertex(1..32)."}
{"instruction": "Translate this to ASP code", "input": "vertex 2 and vertex 1 are connected\nvertex 1 and vertex 2 are connected\ncyan is a colour\njade is a colour\nA vertex goes from 1..3\nred is a colour\nEvery vertex can only be assigned a single colour\nvertex 2 and vertex 3 are connected\nvertex 3 and vertex 2 are connected", "output": "linked_to(2,G) :- vertex(2), vertex(G), G = 1.\nlinked_to(1,G) :- vertex(1), vertex(G), G = 2.\ncolour(\"cyan\").\ncolour(\"jade\").\nvertex(1..3).\ncolour(\"red\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nlinked_to(2,G) :- vertex(2), vertex(G), G = 3.\nlinked_to(3,G) :- vertex(3), vertex(G), G = 2."}
{"instruction": "Translate this to ASP code", "input": "points 2 and 1 are connected\nThe shade cyan exists\npoints 1 and 3 are connected\nThere are points 1..14\nIf two points are connected, they must have different colours\npoints 1 and 2 are connected", "output": "connected_to(2,A) :- point(2), point(A), A = 1.\nshade(\"cyan\").\nconnected_to(1,A) :- point(1), point(A), A = 3.\npoint(1..14).\n:- connected_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\nconnected_to(1,A) :- point(1), point(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "Out of the hues available, there is jade\nThere are 3 elements\nIt is not allowed for adjacent elements to share the same colour\nThere is a connection between element 1 and element A where A is 2\nIt can't be the case that a element has more than one colour\nThere is a connection between element 1 and element A where A is 3\nThere is a connection between element 3 and element A where A is 2\nOut of the hues available, there is azure\nThere is a connection between element 2 and element A where A is 1\nThere is a connection between element 3 and element A where A is 1\nOut of the hue available, there is crimson", "output": "hue(\"jade\").\nelement(1..3).\n:- connected_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C).\nconnected_to(1,A) :- element(1), element(A), A = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nconnected_to(1,A) :- element(1), element(A), A = 3.\nconnected_to(3,A) :- element(3), element(A), A = 2.\nhue(\"azure\").\nconnected_to(2,A) :- element(2), element(A), A = 1.\nconnected_to(3,A) :- element(3), element(A), A = 1.\nhue(\"crimson\")."}
{"instruction": "Translate this to ASP code", "input": "nodes 3 and 1 are connected\nThe shade pink exists\nThe shade mint exists\nnodes 2 and 1 are connected\nIf two nodes are connected, they must have different colours", "output": "adjacent_to(3,A) :- node(3), node(A), A = 1.\nshade(\"pink\").\nshade(\"mint\").\nadjacent_to(2,A) :- node(2), node(A), A = 1.\n:- adjacent_to(A,Y), node(A), assigned_to(A,C), node(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 3 and point A where A is 2\nThere is a connection between point 1 and point A where A is 3\nIt is not allowed for adjacent points to share the same colour\nThere is a connection between point 2 and point A where A is 3\nThere is a connection between point 1 and point A where A is 2\nOut of the hues available, there is skyBlue", "output": "linked_to(3,A) :- point(3), point(A), A = 2.\nlinked_to(1,A) :- point(1), point(A), A = 3.\n:- linked_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\nlinked_to(2,A) :- point(2), point(A), A = 3.\nlinked_to(1,A) :- point(1), point(A), A = 2.\nhue(\"skyBlue\")."}
{"instruction": "Translate this to ASP code", "input": "There are points 1..14\nThe hue green exists\npoints 1 and 2 are connected\npoints can't be assigned more than one of the colours\nThe hue scarlet exists\nIf two points are connected, they must have different colours\npoints 2 and 1 are connected\npoints 3 and 1 are connected\npoints 2 and 3 are connected\npoints 3 and 2 are connected", "output": "point(1..14).\nhue(\"green\").\njoined_to(1,C) :- point(1), point(C), C = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nhue(\"scarlet\").\n:- joined_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\njoined_to(2,C) :- point(2), point(C), C = 1.\njoined_to(3,C) :- point(3), point(C), C = 1.\njoined_to(2,C) :- point(2), point(C), C = 3.\njoined_to(3,C) :- point(3), point(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "Every element can only be assigned a single colour\nazure is a hue\nConnected elements cannot have the same colour\nelement 2 and element 1 are connected\nelement 1 and element 2 are connected\nA element goes from 1..3\nelement 1 and element 3 are connected\nscarlet is a hue\nelement 3 and element 1 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nhue(\"azure\").\n:- connected_to(G,Y), element(G), assigned_to(G,C), element(Y), assigned_to(Y,C), color(C).\nconnected_to(2,G) :- element(2), element(G), G = 1.\nconnected_to(1,G) :- element(1), element(G), G = 2.\nelement(1..3).\nconnected_to(1,G) :- element(1), element(G), G = 3.\nhue(\"scarlet\").\nconnected_to(3,G) :- element(3), element(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "element 3 and element 2 are connected\nelement 3 and element 1 are connected\nelement 2 and element 1 are connected\nEvery element can only be assigned a single colour\ncyan is a shade", "output": "linked_to(3,X) :- element(3), element(X), X = 2.\nlinked_to(3,X) :- element(3), element(X), X = 1.\nlinked_to(2,X) :- element(2), element(X), X = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nshade(\"cyan\")."}
{"instruction": "Translate this to ASP code", "input": "Every point can only be assigned a single colour\npoint 2 and point 3 are connected\nazure is a colour\npoint 1 and point 3 are connected\nConnected points cannot have the same colour\npoint 2 and point 1 are connected\npoint 1 and point 2 are connected\nA point goes from 1..3\ncrimson is a colour\npoint 3 and point 1 are connected\nEmerald is a colour", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nadjacent_to(2,C) :- point(2), point(C), C = 3.\ncolour(\"azure\").\nadjacent_to(1,C) :- point(1), point(C), C = 3.\n:- adjacent_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\nadjacent_to(2,C) :- point(2), point(C), C = 1.\nadjacent_to(1,C) :- point(1), point(C), C = 2.\npoint(1..3).\ncolour(\"crimson\").\nadjacent_to(3,C) :- point(3), point(C), C = 1.\ncolour(\"Emerald\")."}
{"instruction": "Translate this to ASP code", "input": "If two nodes are connected, they must have different colours\nnodes 3 and 1 are connected\nThe hue maroon exists\nnodes can't be assigned more than one of the colours\nnodes 1 and 2 are connected\nThe hue olive exists\nThe hue skyBlue exists\nnodes 3 and 2 are connected\nnodes 2 and 1 are connected", "output": ":- adjacent_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\nadjacent_to(3,X) :- node(3), node(X), X = 1.\nhue(\"maroon\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nadjacent_to(1,X) :- node(1), node(X), X = 2.\nhue(\"olive\").\nhue(\"skyBlue\").\nadjacent_to(3,X) :- node(3), node(X), X = 2.\nadjacent_to(2,X) :- node(2), node(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent vertexs to share the same colour\nIt can't be the case that a vertex has more than one colour\nThere is a connection between vertex 3 and vertex X where X is 2\nThere are 3 vertexs\nThere is a connection between vertex 3 and vertex X where X is 1\nThere is a connection between vertex 2 and vertex X where X is 3\nOut of the hues available, there is skyBlue", "output": ":- linked_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nlinked_to(3,X) :- vertex(3), vertex(X), X = 2.\nvertex(1..3).\nlinked_to(3,X) :- vertex(3), vertex(X), X = 1.\nlinked_to(2,X) :- vertex(2), vertex(X), X = 3.\nhue(\"skyBlue\")."}
{"instruction": "Translate this to ASP code", "input": "The colour maroon exists\nnodes 3 and 2 are connected\nnodes can't be assigned more than one of the colours\nnodes 1 and 3 are connected\nThe colour jade exists\nThe colour azure exists\nnodes 2 and 1 are connected", "output": "colour(\"maroon\").\nadjacent_to(3,A) :- node(3), node(A), A = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nadjacent_to(1,A) :- node(1), node(A), A = 3.\ncolour(\"jade\").\ncolour(\"azure\").\nadjacent_to(2,A) :- node(2), node(A), A = 1."}
{"instruction": "Translate this to ASP code", "input": "It is not allowed for adjacent points to share the same colour\nThere is a connection between point 2 and point G where G is 3\nOut of the colours available, there is green\nThere is a connection between point 3 and point G where G is 2\nOut of the colours available, there is blue\nIt can't be the case that a point has more than one colour", "output": ":- linked_to(G,Y), point(G), assigned_to(G,C), point(Y), assigned_to(Y,C), color(C).\nlinked_to(2,G) :- point(2), point(G), G = 3.\ncolour(\"green\").\nlinked_to(3,G) :- point(3), point(G), G = 2.\ncolour(\"blue\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "point 3 and point 2 are connected\nmaroon is a hue\nolive is a hue\npoint 1 and point 2 are connected\nConnected points cannot have the same colour\npoint 3 and point 1 are connected\nA point goes from 1..14\nskyBlue is a hue\nEvery point can only be assigned a single colour\npoint 1 and point 3 are connected", "output": "attached_to(3,A) :- point(3), point(A), A = 2.\nhue(\"maroon\").\nhue(\"olive\").\nattached_to(1,A) :- point(1), point(A), A = 2.\n:- attached_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\nattached_to(3,A) :- point(3), point(A), A = 1.\npoint(1..14).\nhue(\"skyBlue\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nattached_to(1,A) :- point(1), point(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "Out of the hue available, there is pink\nOut of the hues available, there is cyan\nThere is a connection between node 2 and node X where X is 3\nThere is a connection between node 3 and node X where X is 1\nIt can't be the case that a node has more than one colour\nThere are 32 nodes\nThere is a connection between node 1 and node X where X is 3\nThere is a connection between node 2 and node X where X is 1\nThere is a connection between node 1 and node X where X is 2\nOut of the hues available, there is green", "output": "hue(\"pink\").\nhue(\"cyan\").\nadjacent_to(2,X) :- node(2), node(X), X = 3.\nadjacent_to(3,X) :- node(3), node(X), X = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nnode(1..32).\nadjacent_to(1,X) :- node(1), node(X), X = 3.\nadjacent_to(2,X) :- node(2), node(X), X = 1.\nadjacent_to(1,X) :- node(1), node(X), X = 2.\nhue(\"green\")."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 2 and vertex C where C is 3\nThere is a connection between vertex 1 and vertex C where C is 3\nOut of the colours available, there is olive\nThere is a connection between vertex 1 and vertex C where C is 2\nOut of the colours available, there is azure\nOut of the colour available, there is scarlet\nIt is not allowed for adjacent vertexs to share the same colour\nIt can't be the case that a vertex has more than one colour\nThere is a connection between vertex 3 and vertex C where C is 1\nThere is a connection between vertex 2 and vertex C where C is 1\nThere is a connection between vertex 3 and vertex C where C is 2", "output": "adjacent_to(2,C) :- vertex(2), vertex(C), C = 3.\nadjacent_to(1,C) :- vertex(1), vertex(C), C = 3.\ncolour(\"olive\").\nadjacent_to(1,C) :- vertex(1), vertex(C), C = 2.\ncolour(\"azure\").\ncolour(\"scarlet\").\n:- adjacent_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nadjacent_to(3,C) :- vertex(3), vertex(C), C = 1.\nadjacent_to(2,C) :- vertex(2), vertex(C), C = 1.\nadjacent_to(3,C) :- vertex(3), vertex(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "It can't be the case that a point has more than one colour\nThere is a connection between point 2 and point C where C is 3\nOut of the shades available, there is azure\nThere is a connection between point 1 and point C where C is 2\nThere is a connection between point 2 and point C where C is 1\nIt is not allowed for adjacent points to share the same colour\nThere is a connection between point 3 and point C where C is 1", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\njoined_to(2,C) :- point(2), point(C), C = 3.\nshade(\"azure\").\njoined_to(1,C) :- point(1), point(C), C = 2.\njoined_to(2,C) :- point(2), point(C), C = 1.\n:- joined_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\njoined_to(3,C) :- point(3), point(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 3 and point A where A is 1\nOut of the shade available, there is purple\nThere is a connection between point 1 and point A where A is 2\nIt can't be the case that a point has more than one colour\nIt is not allowed for adjacent points to share the same colour\nThere are 14 points\nOut of the shades available, there is blue", "output": "connected_to(3,A) :- point(3), point(A), A = 1.\nshade(\"purple\").\nconnected_to(1,A) :- point(1), point(A), A = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\n:- connected_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\npoint(1..14).\nshade(\"blue\")."}
{"instruction": "Translate this to ASP code", "input": "elements 2 and 1 are connected\nelements 2 and 3 are connected\nIf two elements are connected, they must have different colours\nelements 1 and 2 are connected\nelements can't be assigned more than one of the colours", "output": "joined_to(2,A) :- element(2), element(A), A = 1.\njoined_to(2,A) :- element(2), element(A), A = 3.\n:- joined_to(A,Y), element(A), assigned_to(A,C), element(Y), assigned_to(Y,C), color(C).\njoined_to(1,A) :- element(1), element(A), A = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "vertexs can't be assigned more than one of the colours\nvertexs 3 and 2 are connected\nIf two vertexs are connected, they must have different colours\nThere are vertexs 1..14\nvertexs 2 and 3 are connected\nThe colour cyan exists\nThe colour jade exists", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nconnected_to(3,C) :- vertex(3), vertex(C), C = 2.\n:- connected_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C).\nvertex(1..14).\nconnected_to(2,C) :- vertex(2), vertex(C), C = 3.\ncolour(\"cyan\").\ncolour(\"jade\")."}
{"instruction": "Translate this to ASP code", "input": "Emerald is a colour\npink is a colour\npoint 1 and point 3 are connected", "output": "colour(\"Emerald\").\ncolour(\"pink\").\nadjacent_to(1,A) :- point(1), point(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 3 and point G where G is 2\nThere is a connection between point 3 and point G where G is 1\nIt can't be the case that a point has more than one colour\nOut of the hues available, there is skyBlue\nThere are 3 points", "output": "linked_to(3,G) :- point(3), point(G), G = 2.\nlinked_to(3,G) :- point(3), point(G), G = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nhue(\"skyBlue\").\npoint(1..3)."}
{"instruction": "Translate this to ASP code", "input": "There are 3 points\nIt can't be the case that a point has more than one colour\nOut of the shade available, there is crimson\nIt is not allowed for adjacent points to share the same colour\nThere is a connection between point 1 and point X where X is 3", "output": "point(1..3).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nshade(\"crimson\").\n:- connected_to(X,Y), point(X), assigned_to(X,C), point(Y), assigned_to(Y,C), color(C).\nconnected_to(1,X) :- point(1), point(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "element 3 and element 1 are connected\npink is a colour\nA element goes from 1..32\nEvery element can only be assigned a single colour\nConnected elements cannot have the same colour\nelement 2 and element 1 are connected\nelement 1 and element 2 are connected\ngreen is a colour\nelement 2 and element 3 are connected\nblue is a colour\nelement 3 and element 2 are connected", "output": "linked_to(3,X) :- element(3), element(X), X = 1.\ncolour(\"pink\").\nelement(1..32).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\n:- linked_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nlinked_to(2,X) :- element(2), element(X), X = 1.\nlinked_to(1,X) :- element(1), element(X), X = 2.\ncolour(\"green\").\nlinked_to(2,X) :- element(2), element(X), X = 3.\ncolour(\"blue\").\nlinked_to(3,X) :- element(3), element(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "The hue olive exists\nThe hue maroon exists\nThe hue skyBlue exists\nIf two elements are connected, they must have different colours\nThere are elements 1..32\nelements 1 and 2 are connected\nelements 1 and 3 are connected", "output": "hue(\"olive\").\nhue(\"maroon\").\nhue(\"skyBlue\").\n:- attached_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nelement(1..32).\nattached_to(1,X) :- element(1), element(X), X = 2.\nattached_to(1,X) :- element(1), element(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "It can't be the case that a node has more than one colour\nThere is a connection between node 1 and node X where X is 2\nIt is not allowed for adjacent nodes to share the same colour\nThere is a connection between node 2 and node X where X is 3\nThere is a connection between node 3 and node X where X is 2\nThere is a connection between node 3 and node X where X is 1\nThere are 32 nodes\nThere is a connection between node 1 and node X where X is 3\nOut of the shades available, there is blue\nOut of the shade available, there is red\nThere is a connection between node 2 and node X where X is 1", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\njoined_to(1,X) :- node(1), node(X), X = 2.\n:- joined_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\njoined_to(2,X) :- node(2), node(X), X = 3.\njoined_to(3,X) :- node(3), node(X), X = 2.\njoined_to(3,X) :- node(3), node(X), X = 1.\nnode(1..32).\njoined_to(1,X) :- node(1), node(X), X = 3.\nshade(\"blue\").\nshade(\"red\").\njoined_to(2,X) :- node(2), node(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "Out of the shade available, there is scarlet\nOut of the shades available, there is skyBlue\nThere is a connection between element 2 and element A where A is 1\nThere is a connection between element 3 and element A where A is 2\nIt can't be the case that a element has more than one colour\nOut of the shades available, there is olive\nThere is a connection between element 1 and element A where A is 3\nThere is a connection between element 2 and element A where A is 3\nThere is a connection between element 1 and element A where A is 2\nThere are 14 elements\nThere is a connection between element 3 and element A where A is 1", "output": "shade(\"scarlet\").\nshade(\"skyBlue\").\nattached_to(2,A) :- element(2), element(A), A = 1.\nattached_to(3,A) :- element(3), element(A), A = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nshade(\"olive\").\nattached_to(1,A) :- element(1), element(A), A = 3.\nattached_to(2,A) :- element(2), element(A), A = 3.\nattached_to(1,A) :- element(1), element(A), A = 2.\nelement(1..14).\nattached_to(3,A) :- element(3), element(A), A = 1."}
{"instruction": "Translate this to ASP code", "input": "element 1 and element 2 are connected\nConnected elements cannot have the same colour\nelement 1 and element 3 are connected\nelement 2 and element 1 are connected\nelement 3 and element 2 are connected", "output": "joined_to(1,C) :- element(1), element(C), C = 2.\n:- joined_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C).\njoined_to(1,C) :- element(1), element(C), C = 3.\njoined_to(2,C) :- element(2), element(C), C = 1.\njoined_to(3,C) :- element(3), element(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 1 and node X where X is 2\nThere is a connection between node 2 and node X where X is 3\nThere is a connection between node 1 and node X where X is 3\nThere is a connection between node 3 and node X where X is 1\nThere is a connection between node 2 and node X where X is 1\nIt is not allowed for adjacent nodes to share the same colour\nOut of the hues available, there is blue", "output": "connected_to(1,X) :- node(1), node(X), X = 2.\nconnected_to(2,X) :- node(2), node(X), X = 3.\nconnected_to(1,X) :- node(1), node(X), X = 3.\nconnected_to(3,X) :- node(3), node(X), X = 1.\nconnected_to(2,X) :- node(2), node(X), X = 1.\n:- connected_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\nhue(\"blue\")."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 3 and node G where G is 1\nOut of the colour available, there is crimson\nThere is a connection between node 1 and node G where G is 3\nOut of the colours available, there is skyBlue\nOut of the colours available, there is olive\nThere is a connection between node 1 and node G where G is 2\nThere are 14 nodes", "output": "connected_to(3,G) :- node(3), node(G), G = 1.\ncolour(\"crimson\").\nconnected_to(1,G) :- node(1), node(G), G = 3.\ncolour(\"skyBlue\").\ncolour(\"olive\").\nconnected_to(1,G) :- node(1), node(G), G = 2.\nnode(1..14)."}
{"instruction": "Translate this to ASP code", "input": "There are 32 nodes\nIt is not allowed for adjacent nodes to share the same colour\nOut of the shades available, there is jade\nThere is a connection between node 1 and node C where C is 2\nThere is a connection between node 2 and node C where C is 3\nOut of the shades available, there is azure\nOut of the shade available, there is purple", "output": "node(1..32).\n:- adjacent_to(C,Y), node(C), assigned_to(C,C), node(Y), assigned_to(Y,C), color(C).\nshade(\"jade\").\nadjacent_to(1,C) :- node(1), node(C), C = 2.\nadjacent_to(2,C) :- node(2), node(C), C = 3.\nshade(\"azure\").\nshade(\"purple\")."}
{"instruction": "Translate this to ASP code", "input": "There are 3 vertexs\nThere is a connection between vertex 3 and vertex C where C is 1\nOut of the shades available, there is blue\nThere is a connection between vertex 2 and vertex C where C is 1\nThere is a connection between vertex 1 and vertex C where C is 3\nIt can't be the case that a vertex has more than one colour", "output": "vertex(1..3).\nlinked_to(3,C) :- vertex(3), vertex(C), C = 1.\nshade(\"blue\").\nlinked_to(2,C) :- vertex(2), vertex(C), C = 1.\nlinked_to(1,C) :- vertex(1), vertex(C), C = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "node 3 and node 2 are connected\nA node goes from 1..32\nnode 1 and node 2 are connected\nnode 2 and node 1 are connected\nEvery node can only be assigned a single colour\nConnected nodes cannot have the same colour\nnode 2 and node 3 are connected", "output": "joined_to(3,X) :- node(3), node(X), X = 2.\nnode(1..32).\njoined_to(1,X) :- node(1), node(X), X = 2.\njoined_to(2,X) :- node(2), node(X), X = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\n:- joined_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\njoined_to(2,X) :- node(2), node(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 3 and point A where A is 2\nThere is a connection between point 2 and point A where A is 3\nThere is a connection between point 1 and point A where A is 2\nOut of the hue available, there is pink\nOut of the hues available, there is green\nIt is not allowed for adjacent points to share the same colour\nThere are 14 points\nThere is a connection between point 2 and point A where A is 1\nIt can't be the case that a point has more than one colour\nOut of the hues available, there is cyan\nThere is a connection between point 1 and point A where A is 3", "output": "adjacent_to(3,A) :- point(3), point(A), A = 2.\nadjacent_to(2,A) :- point(2), point(A), A = 3.\nadjacent_to(1,A) :- point(1), point(A), A = 2.\nhue(\"pink\").\nhue(\"green\").\n:- adjacent_to(A,Y), point(A), assigned_to(A,C), point(Y), assigned_to(Y,C), color(C).\npoint(1..14).\nadjacent_to(2,A) :- point(2), point(A), A = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nhue(\"cyan\").\nadjacent_to(1,A) :- point(1), point(A), A = 3."}
{"instruction": "Translate this to ASP code", "input": "nodes 1 and 3 are connected\nIf two nodes are connected, they must have different colours\nnodes 3 and 1 are connected", "output": "linked_to(1,X) :- node(1), node(X), X = 3.\n:- linked_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\nlinked_to(3,X) :- node(3), node(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "Every node can only be assigned a single colour\nazure is a hue\nnode 1 and node 2 are connected\njade is a hue\nConnected nodes cannot have the same colour\npurple is a hue\nA node goes from 1..3\nnode 1 and node 3 are connected\nnode 3 and node 2 are connected\nnode 3 and node 1 are connected\nnode 2 and node 3 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nhue(\"azure\").\nconnected_to(1,X) :- node(1), node(X), X = 2.\nhue(\"jade\").\n:- connected_to(X,Y), node(X), assigned_to(X,C), node(Y), assigned_to(Y,C), color(C).\nhue(\"purple\").\nnode(1..3).\nconnected_to(1,X) :- node(1), node(X), X = 3.\nconnected_to(3,X) :- node(3), node(X), X = 2.\nconnected_to(3,X) :- node(3), node(X), X = 1.\nconnected_to(2,X) :- node(2), node(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "element 1 and element 3 are connected\nelement 1 and element 2 are connected\nazure is a colour\nEvery element can only be assigned a single colour\nelement 2 and element 1 are connected\ncrimson is a colour\nelement 3 and element 1 are connected", "output": "adjacent_to(1,G) :- element(1), element(G), G = 3.\nadjacent_to(1,G) :- element(1), element(G), G = 2.\ncolour(\"azure\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nadjacent_to(2,G) :- element(2), element(G), G = 1.\ncolour(\"crimson\").\nadjacent_to(3,G) :- element(3), element(G), G = 1."}
{"instruction": "Translate this to ASP code", "input": "Every point can only be assigned a single colour\npoint 2 and point 3 are connected\npoint 3 and point 2 are connected\npoint 3 and point 1 are connected\npoint 1 and point 3 are connected\npoint 1 and point 2 are connected\nscarlet is a colour\njade is a colour\nA point goes from 1..3\nazure is a colour\npoint 2 and point 1 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nadjacent_to(2,C) :- point(2), point(C), C = 3.\nadjacent_to(3,C) :- point(3), point(C), C = 2.\nadjacent_to(3,C) :- point(3), point(C), C = 1.\nadjacent_to(1,C) :- point(1), point(C), C = 3.\nadjacent_to(1,C) :- point(1), point(C), C = 2.\ncolour(\"scarlet\").\ncolour(\"jade\").\npoint(1..3).\ncolour(\"azure\").\nadjacent_to(2,C) :- point(2), point(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "Every point can only be assigned a single colour\npoint 3 and point 2 are connected\npoint 1 and point 3 are connected\nConnected points cannot have the same colour\nA point goes from 1..14\nskyBlue is a shade\npoint 2 and point 1 are connected\npoint 2 and point 3 are connected\npoint 1 and point 2 are connected\nEmerald is a shade", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nattached_to(3,C) :- point(3), point(C), C = 2.\nattached_to(1,C) :- point(1), point(C), C = 3.\n:- attached_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\npoint(1..14).\nshade(\"skyBlue\").\nattached_to(2,C) :- point(2), point(C), C = 1.\nattached_to(2,C) :- point(2), point(C), C = 3.\nattached_to(1,C) :- point(1), point(C), C = 2.\nshade(\"Emerald\")."}
{"instruction": "Translate this to ASP code", "input": "vertexs can't be assigned more than one of the colours\nvertexs 1 and 3 are connected\nThe shade olive exists\nvertexs 3 and 2 are connected\nThere are vertexs 1..14", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nattached_to(1,X) :- vertex(1), vertex(X), X = 3.\nshade(\"olive\").\nattached_to(3,X) :- vertex(3), vertex(X), X = 2.\nvertex(1..14)."}
{"instruction": "Translate this to ASP code", "input": "vertexs 1 and 3 are connected\nvertexs 2 and 3 are connected\nThere are vertexs 1..14\nThe colour maroon exists\nvertexs can't be assigned more than one of the colours\nThe colour skyBlue exists\nIf two vertexs are connected, they must have different colours\nThe colour limeGreen exists\nvertexs 2 and 1 are connected\nvertexs 3 and 1 are connected\nvertexs 1 and 2 are connected", "output": "attached_to(1,A) :- vertex(1), vertex(A), A = 3.\nattached_to(2,A) :- vertex(2), vertex(A), A = 3.\nvertex(1..14).\ncolour(\"maroon\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\ncolour(\"skyBlue\").\n:- attached_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\ncolour(\"limeGreen\").\nattached_to(2,A) :- vertex(2), vertex(A), A = 1.\nattached_to(3,A) :- vertex(3), vertex(A), A = 1.\nattached_to(1,A) :- vertex(1), vertex(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between vertex 3 and vertex C where C is 2\nIt can't be the case that a vertex has more than one colour\nThere is a connection between vertex 1 and vertex C where C is 3\nOut of the shades available, there is Emerald", "output": "attached_to(3,C) :- vertex(3), vertex(C), C = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nattached_to(1,C) :- vertex(1), vertex(C), C = 3.\nshade(\"Emerald\")."}
{"instruction": "Translate this to ASP code", "input": "nodes can't be assigned more than one of the colours\nnodes 3 and 1 are connected\nThere are nodes 1..14\nnodes 1 and 2 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nadjacent_to(3,A) :- node(3), node(A), A = 1.\nnode(1..14).\nadjacent_to(1,A) :- node(1), node(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "elements 3 and 1 are connected\nThere are elements 1..14\nelements 1 and 3 are connected\nThe colour mint exists\nelements can't be assigned more than one of the colours\nThe colour blue exists", "output": "connected_to(3,G) :- element(3), element(G), G = 1.\nelement(1..14).\nconnected_to(1,G) :- element(1), element(G), G = 3.\ncolour(\"mint\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\ncolour(\"blue\")."}
{"instruction": "Translate this to ASP code", "input": "It can't be the case that a vertex has more than one colour\nThere is a connection between vertex 2 and vertex A where A is 3\nThere is a connection between vertex 1 and vertex A where A is 2\nThere is a connection between vertex 2 and vertex A where A is 1\nIt is not allowed for adjacent vertexs to share the same colour\nOut of the shade available, there is pink\nThere is a connection between vertex 3 and vertex A where A is 1\nThere is a connection between vertex 1 and vertex A where A is 3\nOut of the shades available, there is Emerald\nThere are 14 vertexs", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\njoined_to(2,A) :- vertex(2), vertex(A), A = 3.\njoined_to(1,A) :- vertex(1), vertex(A), A = 2.\njoined_to(2,A) :- vertex(2), vertex(A), A = 1.\n:- joined_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\nshade(\"pink\").\njoined_to(3,A) :- vertex(3), vertex(A), A = 1.\njoined_to(1,A) :- vertex(1), vertex(A), A = 3.\nshade(\"Emerald\").\nvertex(1..14)."}
{"instruction": "Translate this to ASP code", "input": "The hue olive exists\nnodes 1 and 3 are connected", "output": "hue(\"olive\").\njoined_to(1,X) :- node(1), node(X), X = 3."}
{"instruction": "Translate this to ASP code", "input": "element 2 and element 1 are connected\npink is a hue\nlimeGreen is a hue\nelement 3 and element 1 are connected\nelement 1 and element 3 are connected\nelement 3 and element 2 are connected\nConnected elements cannot have the same colour\nelement 2 and element 3 are connected\nskyBlue is a hue\nelement 1 and element 2 are connected", "output": "connected_to(2,X) :- element(2), element(X), X = 1.\nhue(\"pink\").\nhue(\"limeGreen\").\nconnected_to(3,X) :- element(3), element(X), X = 1.\nconnected_to(1,X) :- element(1), element(X), X = 3.\nconnected_to(3,X) :- element(3), element(X), X = 2.\n:- connected_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nconnected_to(2,X) :- element(2), element(X), X = 3.\nhue(\"skyBlue\").\nconnected_to(1,X) :- element(1), element(X), X = 2."}
{"instruction": "Translate this to ASP code", "input": "Every node can only be assigned a single colour\nnode 1 and node 3 are connected\ncrimson is a shade\nA node goes from 1..3\njade is a shade\nnode 3 and node 1 are connected\nnode 1 and node 2 are connected\nConnected nodes cannot have the same colour\nblue is a shade\nnode 2 and node 1 are connected\nnode 3 and node 2 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nlinked_to(1,C) :- node(1), node(C), C = 3.\nshade(\"crimson\").\nnode(1..3).\nshade(\"jade\").\nlinked_to(3,C) :- node(3), node(C), C = 1.\nlinked_to(1,C) :- node(1), node(C), C = 2.\n:- linked_to(C,Y), node(C), assigned_to(C,C), node(Y), assigned_to(Y,C), color(C).\nshade(\"blue\").\nlinked_to(2,C) :- node(2), node(C), C = 1.\nlinked_to(3,C) :- node(3), node(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "green is a hue\nvertex 1 and vertex 2 are connected\nvertex 1 and vertex 3 are connected\nConnected vertexs cannot have the same colour\nred is a hue\nvertex 3 and vertex 2 are connected\nvertex 2 and vertex 3 are connected\nA vertex goes from 1..14", "output": "hue(\"green\").\nconnected_to(1,A) :- vertex(1), vertex(A), A = 2.\nconnected_to(1,A) :- vertex(1), vertex(A), A = 3.\n:- connected_to(A,Y), vertex(A), assigned_to(A,C), vertex(Y), assigned_to(Y,C), color(C).\nhue(\"red\").\nconnected_to(3,A) :- vertex(3), vertex(A), A = 2.\nconnected_to(2,A) :- vertex(2), vertex(A), A = 3.\nvertex(1..14)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 3 and point C where C is 1\nThere is a connection between point 2 and point C where C is 3\nOut of the hue available, there is scarlet\nThere is a connection between point 1 and point C where C is 3\nIt is not allowed for adjacent points to share the same colour\nThere is a connection between point 3 and point C where C is 2\nIt can't be the case that a point has more than one colour\nOut of the hues available, there is blue", "output": "adjacent_to(3,C) :- point(3), point(C), C = 1.\nadjacent_to(2,C) :- point(2), point(C), C = 3.\nhue(\"scarlet\").\nadjacent_to(1,C) :- point(1), point(C), C = 3.\n:- adjacent_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\nadjacent_to(3,C) :- point(3), point(C), C = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\nhue(\"blue\")."}
{"instruction": "Translate this to ASP code", "input": "The colour cobalt exists\nelements 2 and 1 are connected\nelements 3 and 2 are connected\nIf two elements are connected, they must have different colours\nThe colour scarlet exists\nelements can't be assigned more than one of the colours", "output": "colour(\"cobalt\").\nattached_to(2,C) :- element(2), element(C), C = 1.\nattached_to(3,C) :- element(3), element(C), C = 2.\n:- attached_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C).\ncolour(\"scarlet\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between node 2 and node C where C is 1\nThere is a connection between node 3 and node C where C is 2\nThere are 3 nodes\nThere is a connection between node 1 and node C where C is 3\nThere is a connection between node 2 and node C where C is 3", "output": "linked_to(2,C) :- node(2), node(C), C = 1.\nlinked_to(3,C) :- node(3), node(C), C = 2.\nnode(1..3).\nlinked_to(1,C) :- node(1), node(C), C = 3.\nlinked_to(2,C) :- node(2), node(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "The shade jade exists\nIf two vertexs are connected, they must have different colours", "output": "shade(\"jade\").\n:- connected_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between element 2 and element X where X is 1\nOut of the colours available, there is cyan\nIt is not allowed for adjacent elements to share the same colour", "output": "adjacent_to(2,X) :- element(2), element(X), X = 1.\ncolour(\"cyan\").\n:- adjacent_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C)."}
{"instruction": "Translate this to ASP code", "input": "vertexs 2 and 1 are connected\nThere are vertexs 1..3\nIf two vertexs are connected, they must have different colours\nThe colour azure exists\nThe colour Emerald exists\nvertexs 2 and 3 are connected\nvertexs 3 and 1 are connected\nThe colour scarlet exists\nvertexs 1 and 2 are connected\nvertexs 1 and 3 are connected", "output": "adjacent_to(2,G) :- vertex(2), vertex(G), G = 1.\nvertex(1..3).\n:- adjacent_to(G,Y), vertex(G), assigned_to(G,C), vertex(Y), assigned_to(Y,C), color(C).\ncolour(\"azure\").\ncolour(\"Emerald\").\nadjacent_to(2,G) :- vertex(2), vertex(G), G = 3.\nadjacent_to(3,G) :- vertex(3), vertex(G), G = 1.\ncolour(\"scarlet\").\nadjacent_to(1,G) :- vertex(1), vertex(G), G = 2.\nadjacent_to(1,G) :- vertex(1), vertex(G), G = 3."}
{"instruction": "Translate this to ASP code", "input": "Out of the colour available, there is maroon\nThere is a connection between vertex 2 and vertex G where G is 1\nOut of the colours available, there is mint\nThere is a connection between vertex 1 and vertex G where G is 3\nThere is a connection between vertex 1 and vertex G where G is 2\nThere are 32 vertexs", "output": "colour(\"maroon\").\nlinked_to(2,G) :- vertex(2), vertex(G), G = 1.\ncolour(\"mint\").\nlinked_to(1,G) :- vertex(1), vertex(G), G = 3.\nlinked_to(1,G) :- vertex(1), vertex(G), G = 2.\nvertex(1..32)."}
{"instruction": "Translate this to ASP code", "input": "vertexs 1 and 2 are connected\nvertexs 3 and 1 are connected\nvertexs can't be assigned more than one of the colours\nvertexs 1 and 3 are connected\nvertexs 2 and 1 are connected", "output": "connected_to(1,C) :- vertex(1), vertex(C), C = 2.\nconnected_to(3,C) :- vertex(3), vertex(C), C = 1.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nconnected_to(1,C) :- vertex(1), vertex(C), C = 3.\nconnected_to(2,C) :- vertex(2), vertex(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "node 2 and node 1 are connected\nnode 1 and node 3 are connected\nolive is a colour\nnode 2 and node 3 are connected\nnode 3 and node 2 are connected\nEvery node can only be assigned a single colour\nConnected nodes cannot have the same colour\nnode 3 and node 1 are connected\nnode 1 and node 2 are connected\ncobalt is a colour", "output": "attached_to(2,G) :- node(2), node(G), G = 1.\nattached_to(1,G) :- node(1), node(G), G = 3.\ncolour(\"olive\").\nattached_to(2,G) :- node(2), node(G), G = 3.\nattached_to(3,G) :- node(3), node(G), G = 2.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\n:- attached_to(G,Y), node(G), assigned_to(G,C), node(Y), assigned_to(Y,C), color(C).\nattached_to(3,G) :- node(3), node(G), G = 1.\nattached_to(1,G) :- node(1), node(G), G = 2.\ncolour(\"cobalt\")."}
{"instruction": "Translate this to ASP code", "input": "vertexs 2 and 3 are connected\nThe colour pink exists\nvertexs 3 and 2 are connected\nvertexs 1 and 3 are connected\nIf two vertexs are connected, they must have different colours\nvertexs 1 and 2 are connected\nvertexs 2 and 1 are connected", "output": "adjacent_to(2,X) :- vertex(2), vertex(X), X = 3.\ncolour(\"pink\").\nadjacent_to(3,X) :- vertex(3), vertex(X), X = 2.\nadjacent_to(1,X) :- vertex(1), vertex(X), X = 3.\n:- adjacent_to(X,Y), vertex(X), assigned_to(X,C), vertex(Y), assigned_to(Y,C), color(C).\nadjacent_to(1,X) :- vertex(1), vertex(X), X = 2.\nadjacent_to(2,X) :- vertex(2), vertex(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "jade is a hue\nelement 2 and element 1 are connected\nelement 2 and element 3 are connected\nelement 3 and element 1 are connected\nA element goes from 1..14\nskyBlue is a hue\nConnected elements cannot have the same colour\nelement 1 and element 3 are connected\nEvery element can only be assigned a single colour", "output": "hue(\"jade\").\nlinked_to(2,X) :- element(2), element(X), X = 1.\nlinked_to(2,X) :- element(2), element(X), X = 3.\nlinked_to(3,X) :- element(3), element(X), X = 1.\nelement(1..14).\nhue(\"skyBlue\").\n:- linked_to(X,Y), element(X), assigned_to(X,C), element(Y), assigned_to(Y,C), color(C).\nlinked_to(1,X) :- element(1), element(X), X = 3.\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D)."}
{"instruction": "Translate this to ASP code", "input": "It can't be the case that a point has more than one colour\nIt is not allowed for adjacent points to share the same colour\nOut of the shades available, there is cobalt\nOut of the shades available, there is olive\nThere is a connection between point 1 and point C where C is 3\nThere is a connection between point 2 and point C where C is 3\nThere are 32 points\nThere is a connection between point 1 and point C where C is 2", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- point(ND_D).\n:- adjacent_to(C,Y), point(C), assigned_to(C,C), point(Y), assigned_to(Y,C), color(C).\nshade(\"cobalt\").\nshade(\"olive\").\nadjacent_to(1,C) :- point(1), point(C), C = 3.\nadjacent_to(2,C) :- point(2), point(C), C = 3.\npoint(1..32).\nadjacent_to(1,C) :- point(1), point(C), C = 2."}
{"instruction": "Translate this to ASP code", "input": "If two elements are connected, they must have different colours\nelements can't be assigned more than one of the colours\nelements 1 and 2 are connected\nelements 1 and 3 are connected", "output": ":- attached_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C).\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- element(ND_D).\nattached_to(1,C) :- element(1), element(C), C = 2.\nattached_to(1,C) :- element(1), element(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "Connected vertexs cannot have the same colour\nmaroon is a hue\nvertex 3 and vertex 1 are connected\nblue is a hue\nEvery vertex can only be assigned a single colour\nvertex 1 and vertex 2 are connected\nvertex 2 and vertex 1 are connected", "output": ":- linked_to(C,Y), vertex(C), assigned_to(C,C), vertex(Y), assigned_to(Y,C), color(C).\nhue(\"maroon\").\nlinked_to(3,C) :- vertex(3), vertex(C), C = 1.\nhue(\"blue\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\nlinked_to(1,C) :- vertex(1), vertex(C), C = 2.\nlinked_to(2,C) :- vertex(2), vertex(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "There is a connection between point 1 and point A where A is 3\nThere is a connection between point 2 and point A where A is 1\nOut of the colours available, there is azure\nThere are 14 points\nThere is a connection between point 3 and point A where A is 2", "output": "joined_to(1,A) :- point(1), point(A), A = 3.\njoined_to(2,A) :- point(2), point(A), A = 1.\ncolour(\"azure\").\npoint(1..14).\njoined_to(3,A) :- point(3), point(A), A = 2."}
{"instruction": "Translate this to ASP code", "input": "vertexs 1 and 3 are connected\nvertexs 3 and 2 are connected\nThe colour mint exists\nvertexs can't be assigned more than one of the colours\nThe colour skyBlue exists\nvertexs 3 and 1 are connected", "output": "adjacent_to(1,C) :- vertex(1), vertex(C), C = 3.\nadjacent_to(3,C) :- vertex(3), vertex(C), C = 2.\ncolour(\"mint\").\n1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- vertex(ND_D).\ncolour(\"skyBlue\").\nadjacent_to(3,C) :- vertex(3), vertex(C), C = 1."}
{"instruction": "Translate this to ASP code", "input": "The hue mint exists\nelements 1 and 3 are connected\nelements 3 and 1 are connected", "output": "hue(\"mint\").\nconnected_to(1,X) :- element(1), element(X), X = 3.\nconnected_to(3,X) :- element(3), element(X), X = 1."}
{"instruction": "Translate this to ASP code", "input": "There are 14 elements\nOut of the shades available, there is cyan\nThere is a connection between element 3 and element C where C is 2\nIt is not allowed for adjacent elements to share the same colour\nOut of the shade available, there is red\nThere is a connection between element 3 and element C where C is 1\nThere is a connection between element 2 and element C where C is 1\nOut of the shades available, there is olive\nThere is a connection between element 2 and element C where C is 3", "output": "element(1..14).\nshade(\"cyan\").\nadjacent_to(3,C) :- element(3), element(C), C = 2.\n:- adjacent_to(C,Y), element(C), assigned_to(C,C), element(Y), assigned_to(Y,C), color(C).\nshade(\"red\").\nadjacent_to(3,C) :- element(3), element(C), C = 1.\nadjacent_to(2,C) :- element(2), element(C), C = 1.\nshade(\"olive\").\nadjacent_to(2,C) :- element(2), element(C), C = 3."}
{"instruction": "Translate this to ASP code", "input": "nodes can't be assigned more than one of the colours\nThe shade cobalt exists\nThe shade green exists\nnodes 2 and 3 are connected\nThere are nodes 1..3\nnodes 1 and 3 are connected\nnodes 2 and 1 are connected", "output": "1 <= {assigned_to(ND_D,CLR_D): color(CLR_D)} <= 1 :- node(ND_D).\nshade(\"cobalt\").\nshade(\"green\").\nconnected_to(2,C) :- node(2), node(C), C = 3.\nnode(1..3).\nconnected_to(1,C) :- node(1), node(C), C = 3.\nconnected_to(2,C) :- node(2), node(C), C = 1."}

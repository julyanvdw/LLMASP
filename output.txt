cpu("X9"; "ZetaCore"; "Alpha8").
gpu("QuasarRTX"; "NovaX"; "GammaGTX").
storage("UltraSSD"; "MegaHDD"; "FusionDrive").
1 { selected_cpu(C) : cpu(C) } 1.
1 { selected_gpu(G) : gpu(G) } 1.
1 { selected_storage(S) : storage(S) } 1.
cost("X9", 300; "ZetaCore", 500; "Alpha8", 450).
cost("QuasarRTX", 700; "NovaX", 600; "GammaGTX", 450).
cost("UltraSSD", 250; "MegaHDD", 200; "FusionDrive", 300).
performance("X9", 95; "ZetaCore", 120; "Alpha8", 110).
performance("QuasarRTX", 130; "NovaX", 125; "GammaGTX", 90).
performance("UltraSSD", 100; "MegaHDD", 60; "FusionDrive", 95).
selected(X) :- selected_cpu(X).
selected(X) :- selected_gpu(X).
selected(X) :- selected_storage(X).
max_cost(C) :- cost(C, V), V = #max {V1 : cost(C1, V1), selected(C1)}.
max_performance(C) :- performance(C, V), V = #max {V1 : performance(C1, V1), selected(C1)}.
:- selected(C), max_cost(C), not max_performance(C).
top_cpu(C) :- cpu(C), performance(C, V), V = #max {V1 : performance(C1, V1), cpu(C1)}.
top_gpu(C) :- gpu(C), performance(C, V), V = #max {V1 : performance(C1, V1), gpu(C1)}.
top_storage(C) :- storage(C), performance(C, V), V = #max {V1 : performance(C1, V1), storage(C1)}.
:- selected_cpu(C), top_cpu(C), selected_gpu(G), top_gpu(G), selected_storage(S), top_storage(S).
:- selected(C1), selected(C2), cost(C1, V1), cost(C2, V2), V1 - 250 >= V2.
:- selected_cpu(C), selected_gpu(G), performance(C, PC), performance(G, PG), PG > PC.
:- selected_cpu("Alpha8"), selected_gpu("NovaX").
:- selected_storage("FusionDrive"), not selected_cpu("ZetaCore").
Select a cpu for your configuration from X9, ZetaCore, or Alpha8.
Select a gpu for your configuration from QuasarRTX, NovaX, or GammaGTX.
Select a storage device for your configuration from UltraSSD, MegaHDD, or FusionDrive.
Choose a single cpu for your configuration from the set of all cpus.
Choose a single gpu for your configuration from the set of all gpus.
Choose a single storage device for your configuration from the set of all storage devices.
Assign the following costs to cpus: X9=300, ZetaCore=500, Alpha8=450.
Assign the following costs to gpus: QuasarRTX=700, NovaX=600, GammaGTX=450.
Assign the following costs to storage devices: UltraSSD=250, MegaHDD=200, FusionDrive=300.
Assign the following performance values to cpus: X9=95, ZetaCore=120, Alpha8=110.
Assign the following performance values to gpus: QuasarRTX=130, NovaX=125, GammaGTX=90.
Assign the following performance values to storages: UltraSSD=100, MegaHDD=60, FusionDrive=95.
selected is the set of all selected cpu.
selected is the set of all selected gpu.
selected is the set of all selected storage.
max_cost marks the selected item with the greatest cost.
max_performance marks the selected item with the greatest performance value.
No selected component can be the most expensive without also having the highest performance.
top_cpu marks the cpu with the greatest performance value.
top_gpu marks the gpu with the greatest performance value.
top_storage marks the storage with the greatest performance value.
Selecting the highest cpu, gpu, and storage together is forbidden.
Selected components cannot differ in cost by 250 or more.
It is not allowed for the GPU to have higher performance than the CPU.
Selecting Alpha8 as CPU and NovaX as GPU is forbidden.
You may not select FusionDrive unless ZetaCore is also chosen as CPU.

cpu("X9"; "ZetaCore"; "Alpha8").
gpu("QuasarRTX"; "NovaX"; "GammaGTX").
storage("UltraSSD"; "MegaHDD"; "FusionDrive").
1 { selected_cpu(C) : cpu(C) } 1.
1 { selected_gpu(G) : gpu(G) } 1.
1 { selected_storage(S) : storage(S) } 1.
cost("X9", 300; "ZetaCore", 500; "Alpha8", 450).
cost("QuasarRTX", 700; "NovaX", 600; "GammaGTX", 450).
cost("UltraSSD", 250; "MegaHDD", 200; "FusionDrive", 300).
performance("X9", 95; "ZetaCore", 120; "Alpha8", 110).
performance("QuasarRTX", 130; "NovaX", 125; "GammaGTX", 90).
performance("UltraSSD", 100; "MegaHDD", 60; "FusionDrive", 95).
selected(X) :- selected_cpu(X).
selected(X) :- selected_gpu(X).
selected(X) :- selected_storage(X).
max_cost(C) :- cost(C, V), V = #max {V1 : cost(C1, V1), selected(C1)}.
max_performance(C) :- performance(C, V), V = #max {V1 : performance(C1, V1), selected(C1)}.
:- selected(C), max_cost(C), not max_performance(C).
top_cpu(C) :- cpu(C), performance(C, V), V = #max {V1 : performance(C1, V1), cpu(C1)}.
top_gpu(C) :- gpu(C), performance(C, V), V = #max {V1 : performance(C1, V1), gpu(C1)}.
top_storage(C) :- storage(C), performance(C, V), V = #max {V1 : performance(C1, V1), storage(C1)}.
:- selected_cpu(C), top_cpu(C), selected_gpu(G), top_gpu(G), selected_storage(S), top_storage(S).
:- selected(C1), selected(C2), cost(C1, V1), cost(C2, V2), V1 - 250 >= V2.
:- selected_cpu(C), selected_gpu(G), performance(C, PC), performance(G, PG), PG > PC.
:- selected_cpu("Alpha8"), selected_gpu("NovaX").
:- selected_storage("FusionDrive"), not selected_cpu("ZetaCore").
cpus are X9, ZetaCore, Alpha8.
gpus are QuasarRTX, NovaX, GammaGTX.
storage devices are UltraSSD, MegaHDD, FusionDrive.
Select exactly one cpu from all available cpus.
Select exactly one gpu from all available gpus.
Select exactly one storage device from all available storage devices.
cpu costs are X9=300, ZetaCore=500, Alpha8=450.
gpu costs are QuasarRTX=700, NovaX=600, GammaGTX=450.
storage device costs are UltraSSD=250, MegaHDD=200, FusionDrive=300.
cpu performance values: X9=95, ZetaCore=120, Alpha8=110.
gpu performance values: QuasarRTX=130, NovaX=125, GammaGTX=90.
storage performance values: UltraSSD=100, MegaHDD=60, FusionDrive=95.
selected includes all selected cpu.
selected includes all selected gpu.
selected includes all selected storage.
max_cost is true for the selected component with the highest cost.
max_performance is true for the selected component with the highest performance.
The most expensive selected component must also be the one with the highest performance.
top_cpu is true for the cpu with the highest performance.
top_gpu is true for the gpu with the highest performance.
top_storage is true for the storage with the highest performance.
You may not select all three top-performing components.
No selected component can be more than 250 more expensive than another selected component.
The GPU must not outperform the CPU.
You cannot select Alpha8 CPU with NovaX GPU.
FusionDrive storage cannot be selected unless ZetaCore CPU is also selected.

cpu("X9"; "ZetaCore"; "Alpha8").
gpu("QuasarRTX"; "NovaX"; "GammaGTX").
storage("UltraSSD"; "MegaHDD"; "FusionDrive").
1 { selected_cpu(C) : cpu(C) } 1.
1 { selected_gpu(G) : gpu(G) } 1.
1 { selected_storage(S) : storage(S) } 1.
cost("X9", 300; "ZetaCore", 500; "Alpha8", 450).
cost("QuasarRTX", 700; "NovaX", 600; "GammaGTX", 450).
cost("UltraSSD", 250; "MegaHDD", 200; "FusionDrive", 300).
performance("X9", 95; "ZetaCore", 120; "Alpha8", 110).
performance("QuasarRTX", 130; "NovaX", 125; "GammaGTX", 90).
performance("UltraSSD", 100; "MegaHDD", 60; "FusionDrive", 95).
selected(X) :- selected_cpu(X).
selected(X) :- selected_gpu(X).
selected(X) :- selected_storage(X).
max_cost(C) :- cost(C, V), V = #max {V1 : cost(C1, V1), selected(C1)}.
max_performance(C) :- performance(C, V), V = #max {V1 : performance(C1, V1), selected(C1)}.
:- selected(C), max_cost(C), not max_performance(C).
top_cpu(C) :- cpu(C), performance(C, V), V = #max {V1 : performance(C1, V1), cpu(C1)}.
top_gpu(C) :- gpu(C), performance(C, V), V = #max {V1 : performance(C1, V1), gpu(C1)}.
top_storage(C) :- storage(C), performance(C, V), V = #max {V1 : performance(C1, V1), storage(C1)}.
:- selected_cpu(C), top_cpu(C), selected_gpu(G), top_gpu(G), selected_storage(S), top_storage(S).
:- selected(C1), selected(C2), cost(C1, V1), cost(C2, V2), V1 - 250 >= V2.
:- selected_cpu(C), selected_gpu(G), performance(C, PC), performance(G, PG), PG > PC.
:- selected_cpu("Alpha8"), selected_gpu("NovaX").
:- selected_storage("FusionDrive"), not selected_cpu("ZetaCore").
Available cpu options for this configuration: X9, ZetaCore, Alpha8.
Available gpu options for this configuration: QuasarRTX, NovaX, GammaGTX.
Available storage device options for this configuration: UltraSSD, MegaHDD, FusionDrive.
You must pick one and only one cpu for your configuration.
You must pick one and only one gpu for your configuration.
You must pick one and only one storage device for your configuration.
Each cpu has a cost: X9 costs 300, ZetaCore costs 500, Alpha8 costs 450.
Each gpu has a cost: QuasarRTX costs 700, NovaX costs 600, GammaGTX costs 450.
Each storage device has a cost: UltraSSD costs 250, MegaHDD costs 200, FusionDrive costs 300.
Each cpu has a performance value: X9 is 95, ZetaCore is 120, Alpha8 is 110.
Each gpu has a performance value: QuasarRTX is 130, NovaX is 125, GammaGTX is 90.
Each storage has a performance value: UltraSSD is 100, MegaHDD is 60, FusionDrive is 95.
For every selected cpu, add it to selected.
For every selected gpu, add it to selected.
For every selected storage, add it to selected.
max_cost holds for the selected part that has the maximum cost.
max_performance holds for the selected part that has the maximum performance value.
It is required that the most expensive selected part is also the highest in performance.
top_cpu holds for the cpu that has the maximum performance value.
top_gpu holds for the gpu that has the maximum performance value.
top_storage holds for the storage that has the maximum performance value.
It is not allowed to select the top cpu, gpu, and storage at the same time.
The cost difference between any two selected components must be less than 250.
Selected GPU performance cannot exceed selected CPU performance.
Alpha8 and NovaX cannot be selected together.
Selecting FusionDrive requires ZetaCore CPU to be selected.

COUNT: 3
fish("NeonTetra"; "Betta"; "Guppy").
plant("JavaFern"; "Anubias"; "AmazonSword").
filter("SpongeFilter"; "CanisterFilter"; "HangOnBack").
1 { selected_fish(C) : fish(C) } 1.
1 { selected_plant(G) : plant(G) } 1.
1 { selected_filter(S) : filter(S) } 1.
cost("NeonTetra", 5; "Betta", 8; "Guppy", 6).
cost("JavaFern", 3; "Anubias", 4; "AmazonSword", 5).
cost("SpongeFilter", 20; "CanisterFilter", 50; "HangOnBack", 30).
bio_score("NeonTetra", 7; "Betta", 8; "Guppy", 6).
bio_score("JavaFern", 5; "Anubias", 7; "AmazonSword", 6).
bio_score("SpongeFilter", 8; "CanisterFilter", 10; "HangOnBack", 9).
selected(X) :- selected_fish(X).
selected(X) :- selected_plant(X).
selected(X) :- selected_filter(X).
max_cost(C) :- cost(C, V), V = #max {V1 : cost(C1, V1), selected(C1)}.
max_bio_score(C) :- bio_score(C, V), V = #max {V1 : bio_score(C1, V1), selected(C1)}.
:- selected(C), max_cost(C), not max_bio_score(C).
top_fish(C) :- fish(C), bio_score(C, V), V = #max {V1 : bio_score(C1, V1), fish(C1)}.
top_plant(C) :- plant(C), bio_score(C, V), V = #max {V1 : bio_score(C1, V1), plant(C1)}.
top_filter(C) :- filter(C), bio_score(C, V), V = #max {V1 : bio_score(C1, V1), filter(C1)}.
:- selected_fish(C), top_fish(C), selected_plant(G), top_plant(G), selected_filter(S), top_filter(S).
:- selected(C1), selected(C2), cost(C1, V1), cost(C2, V2), V1 - 250 >= V2.
:- selected_fish(C), selected_plant(G), bio_score(C, PC), bio_score(G, PG), PG > PC.
:- selected_fish("Alpha8"), selected_plant("NovaX").
:- selected_filter("FusionDrive"), not selected_fish("ZetaCore").
Available fish options for this setup: NeonTetra, Betta, Guppy.
Available plant options for this setup: JavaFern, Anubias, AmazonSword.
Available filter device options for this setup: SpongeFilter, CanisterFilter, HangOnBack.
You must pick one and only one fish for your setup.
You must pick one and only one plant for your setup.
You must pick one and only one filter device for your setup.
Each fish has a cost: NeonTetra costs 5, Betta costs 8, Guppy costs 6.
Each plant has a cost: JavaFern costs 3, Anubias costs 4, AmazonSword costs 5.
Each filter device has a cost: SpongeFilter costs 20, CanisterFilter costs 50, HangOnBack costs 30.
Each fish has a bio_score value: NeonTetra is 7, Betta is 8, Guppy is 6.
Each plant has a bio_score value: JavaFern is 5, Anubias is 7, AmazonSword is 6.
Each filter has a bio_score value: SpongeFilter is 8, CanisterFilter is 10, HangOnBack is 9.
For every selected fish, add it to selected.
For every selected plant, add it to selected.
For every selected filter, add it to selected.
max_cost holds for the selected part that has the maximum cost.
max_bio_score holds for the selected part that has the maximum bio_score value.
It is required that the most expensive selected part is also the highest in bio_score.
top_fish holds for the fish that has the maximum bio_score value.
top_plant holds for the plant that has the maximum bio_score value.
top_filter holds for the filter that has the maximum bio_score value.
It is not allowed to select the top fish, plant, and filter at the same time.
The cost difference between any two selected components must be less than 250.
Selected GPU performance cannot exceed selected CPU performance.
Alpha8 and NovaX cannot be selected together.
Selecting FusionDrive requires ZetaCore CPU to be selected.

fish("NeonTetra"; "Betta"; "Guppy").
plant("JavaFern"; "Anubias"; "AmazonSword").
filter("SpongeFilter"; "CanisterFilter"; "HangOnBack").
1 { selected_fish(C) : fish(C) } 1.
1 { selected_plant(G) : plant(G) } 1.
1 { selected_filter(S) : filter(S) } 1.
cost("NeonTetra", 5; "Betta", 8; "Guppy", 6).
cost("JavaFern", 3; "Anubias", 4; "AmazonSword", 5).
cost("SpongeFilter", 20; "CanisterFilter", 50; "HangOnBack", 30).
bio_score("NeonTetra", 7; "Betta", 8; "Guppy", 6).
bio_score("JavaFern", 5; "Anubias", 7; "AmazonSword", 6).
bio_score("SpongeFilter", 8; "CanisterFilter", 10; "HangOnBack", 9).
selected(X) :- selected_fish(X).
selected(X) :- selected_plant(X).
selected(X) :- selected_filter(X).
max_cost(C) :- cost(C, V), V = #max {V1 : cost(C1, V1), selected(C1)}.
max_bio_score(C) :- bio_score(C, V), V = #max {V1 : bio_score(C1, V1), selected(C1)}.
:- selected(C), max_cost(C), not max_bio_score(C).
top_fish(C) :- fish(C), bio_score(C, V), V = #max {V1 : bio_score(C1, V1), fish(C1)}.
top_plant(C) :- plant(C), bio_score(C, V), V = #max {V1 : bio_score(C1, V1), plant(C1)}.
top_filter(C) :- filter(C), bio_score(C, V), V = #max {V1 : bio_score(C1, V1), filter(C1)}.
:- selected_fish(C), top_fish(C), selected_plant(G), top_plant(G), selected_filter(S), top_filter(S).
:- selected(C1), selected(C2), cost(C1, V1), cost(C2, V2), V1 - 250 >= V2.
:- selected_fish(C), selected_plant(G), bio_score(C, PC), bio_score(G, PG), PG > PC.
:- selected_fish("Alpha8"), selected_plant("NovaX").
:- selected_filter("FusionDrive"), not selected_fish("ZetaCore").
Select a fish for your setup from NeonTetra, Betta, or Guppy.
Select a plant for your setup from JavaFern, Anubias, or AmazonSword.
Select a filter device for your setup from SpongeFilter, CanisterFilter, or HangOnBack.
Choose a single fish for your setup from the set of all fishs.
Choose a single plant for your setup from the set of all plants.
Choose a single filter device for your setup from the set of all filter devices.
Assign the following costs to fishs: NeonTetra=5, Betta=8, Guppy=6.
Assign the following costs to plants: JavaFern=3, Anubias=4, AmazonSword=5.
Assign the following costs to filter devices: SpongeFilter=20, CanisterFilter=50, HangOnBack=30.
Assign the following bio_score values to fishs: NeonTetra=7, Betta=8, Guppy=6.
Assign the following bio_score values to plants: JavaFern=5, Anubias=7, AmazonSword=6.
Assign the following bio_score values to filters: SpongeFilter=8, CanisterFilter=10, HangOnBack=9.
selected is the set of all selected fish.
selected is the set of all selected plant.
selected is the set of all selected filter.
max_cost marks the selected item with the greatest cost.
max_bio_score marks the selected item with the greatest bio_score value.
No selected component can be the most expensive without also having the highest bio_score.
top_fish marks the fish with the greatest bio_score value.
top_plant marks the plant with the greatest bio_score value.
top_filter marks the filter with the greatest bio_score value.
Selecting the highest fish, plant, and filter together is forbidden.
Selected components cannot differ in cost by 250 or more.
It is not allowed for the GPU to have higher performance than the CPU.
Selecting Alpha8 as CPU and NovaX as GPU is forbidden.
You may not select FusionDrive unless ZetaCore is also chosen as CPU.

fish("NeonTetra"; "Betta"; "Guppy").
plant("JavaFern"; "Anubias"; "AmazonSword").
filter("SpongeFilter"; "CanisterFilter"; "HangOnBack").
1 { selected_fish(C) : fish(C) } 1.
1 { selected_plant(G) : plant(G) } 1.
1 { selected_filter(S) : filter(S) } 1.
cost("NeonTetra", 5; "Betta", 8; "Guppy", 6).
cost("JavaFern", 3; "Anubias", 4; "AmazonSword", 5).
cost("SpongeFilter", 20; "CanisterFilter", 50; "HangOnBack", 30).
bio_score("NeonTetra", 7; "Betta", 8; "Guppy", 6).
bio_score("JavaFern", 5; "Anubias", 7; "AmazonSword", 6).
bio_score("SpongeFilter", 8; "CanisterFilter", 10; "HangOnBack", 9).
selected(X) :- selected_fish(X).
selected(X) :- selected_plant(X).
selected(X) :- selected_filter(X).
max_cost(C) :- cost(C, V), V = #max {V1 : cost(C1, V1), selected(C1)}.
max_bio_score(C) :- bio_score(C, V), V = #max {V1 : bio_score(C1, V1), selected(C1)}.
:- selected(C), max_cost(C), not max_bio_score(C).
top_fish(C) :- fish(C), bio_score(C, V), V = #max {V1 : bio_score(C1, V1), fish(C1)}.
top_plant(C) :- plant(C), bio_score(C, V), V = #max {V1 : bio_score(C1, V1), plant(C1)}.
top_filter(C) :- filter(C), bio_score(C, V), V = #max {V1 : bio_score(C1, V1), filter(C1)}.
:- selected_fish(C), top_fish(C), selected_plant(G), top_plant(G), selected_filter(S), top_filter(S).
:- selected(C1), selected(C2), cost(C1, V1), cost(C2, V2), V1 - 250 >= V2.
:- selected_fish(C), selected_plant(G), bio_score(C, PC), bio_score(G, PG), PG > PC.
:- selected_fish("Alpha8"), selected_plant("NovaX").
:- selected_filter("FusionDrive"), not selected_fish("ZetaCore").
fishs are NeonTetra, Betta, Guppy.
plants are JavaFern, Anubias, AmazonSword.
filter devices are SpongeFilter, CanisterFilter, HangOnBack.
Select exactly one fish from all available fishs.
Select exactly one plant from all available plants.
Select exactly one filter device from all available filter devices.
fish costs are NeonTetra=5, Betta=8, Guppy=6.
plant costs are JavaFern=3, Anubias=4, AmazonSword=5.
filter device costs are SpongeFilter=20, CanisterFilter=50, HangOnBack=30.
fish bio_score values: NeonTetra=7, Betta=8, Guppy=6.
plant bio_score values: JavaFern=5, Anubias=7, AmazonSword=6.
filter bio_score values: SpongeFilter=8, CanisterFilter=10, HangOnBack=9.
selected includes all selected fish.
selected includes all selected plant.
selected includes all selected filter.
max_cost is true for the selected component with the highest cost.
max_bio_score is true for the selected component with the highest bio_score.
The most expensive selected component must also be the one with the highest bio_score.
top_fish is true for the fish with the highest bio_score.
top_plant is true for the plant with the highest bio_score.
top_filter is true for the filter with the highest bio_score.
You may not select all three top-performing components.
No selected component can be more than 250 more expensive than another selected component.
The GPU must not outperform the CPU.
You cannot select Alpha8 CPU with NovaX GPU.
FusionDrive storage cannot be selected unless ZetaCore CPU is also selected.

COUNT: 3
weapon("SwordOfLight"; "AxeOfStorms"; "ShadowDagger").
armor("DragonScale"; "ElvenCloak"; "IronPlate").
companion("Wolf"; "Falcon"; "Golem").
1 { selected_weapon(C) : weapon(C) } 1.
1 { selected_armor(G) : armor(G) } 1.
1 { selected_companion(S) : companion(S) } 1.
cost("SwordOfLight", 100; "AxeOfStorms", 80; "ShadowDagger", 60).
cost("DragonScale", 90; "ElvenCloak", 70; "IronPlate", 50).
cost("Wolf", 40; "Falcon", 30; "Golem", 60).
power("SwordOfLight", 30; "AxeOfStorms", 28; "ShadowDagger", 22).
power("DragonScale", 25; "ElvenCloak", 20; "IronPlate", 18).
power("Wolf", 15; "Falcon", 12; "Golem", 20).
selected(X) :- selected_weapon(X).
selected(X) :- selected_armor(X).
selected(X) :- selected_companion(X).
max_cost(C) :- cost(C, V), V = #max {V1 : cost(C1, V1), selected(C1)}.
max_power(C) :- power(C, V), V = #max {V1 : power(C1, V1), selected(C1)}.
:- selected(C), max_cost(C), not max_power(C).
top_weapon(C) :- weapon(C), power(C, V), V = #max {V1 : power(C1, V1), weapon(C1)}.
top_armor(C) :- armor(C), power(C, V), V = #max {V1 : power(C1, V1), armor(C1)}.
top_companion(C) :- companion(C), power(C, V), V = #max {V1 : power(C1, V1), companion(C1)}.
:- selected_weapon(C), top_weapon(C), selected_armor(G), top_armor(G), selected_companion(S), top_companion(S).
:- selected(C1), selected(C2), cost(C1, V1), cost(C2, V2), V1 - 250 >= V2.
:- selected_weapon(C), selected_armor(G), power(C, PC), power(G, PG), PG > PC.
:- selected_weapon("Alpha8"), selected_armor("NovaX").
:- selected_companion("FusionDrive"), not selected_weapon("ZetaCore").
weapons are SwordOfLight, AxeOfStorms, ShadowDagger.
armors are DragonScale, ElvenCloak, IronPlate.
companion devices are Wolf, Falcon, Golem.
Select exactly one weapon from all available weapons.
Select exactly one armor from all available armors.
Select exactly one companion device from all available companion devices.
weapon costs are SwordOfLight=100, AxeOfStorms=80, ShadowDagger=60.
armor costs are DragonScale=90, ElvenCloak=70, IronPlate=50.
companion device costs are Wolf=40, Falcon=30, Golem=60.
weapon power values: SwordOfLight=30, AxeOfStorms=28, ShadowDagger=22.
armor power values: DragonScale=25, ElvenCloak=20, IronPlate=18.
companion power values: Wolf=15, Falcon=12, Golem=20.
selected includes all selected weapon.
selected includes all selected armor.
selected includes all selected companion.
max_cost is true for the selected component with the highest cost.
max_power is true for the selected component with the highest power.
The most expensive selected component must also be the one with the highest power.
top_weapon is true for the weapon with the highest power.
top_armor is true for the armor with the highest power.
top_companion is true for the companion with the highest power.
You may not select all three top-performing components.
No selected component can be more than 250 more expensive than another selected component.
The GPU must not outperform the CPU.
You cannot select Alpha8 CPU with NovaX GPU.
FusionDrive storage cannot be selected unless ZetaCore CPU is also selected.

weapon("SwordOfLight"; "AxeOfStorms"; "ShadowDagger").
armor("DragonScale"; "ElvenCloak"; "IronPlate").
companion("Wolf"; "Falcon"; "Golem").
1 { selected_weapon(C) : weapon(C) } 1.
1 { selected_armor(G) : armor(G) } 1.
1 { selected_companion(S) : companion(S) } 1.
cost("SwordOfLight", 100; "AxeOfStorms", 80; "ShadowDagger", 60).
cost("DragonScale", 90; "ElvenCloak", 70; "IronPlate", 50).
cost("Wolf", 40; "Falcon", 30; "Golem", 60).
power("SwordOfLight", 30; "AxeOfStorms", 28; "ShadowDagger", 22).
power("DragonScale", 25; "ElvenCloak", 20; "IronPlate", 18).
power("Wolf", 15; "Falcon", 12; "Golem", 20).
selected(X) :- selected_weapon(X).
selected(X) :- selected_armor(X).
selected(X) :- selected_companion(X).
max_cost(C) :- cost(C, V), V = #max {V1 : cost(C1, V1), selected(C1)}.
max_power(C) :- power(C, V), V = #max {V1 : power(C1, V1), selected(C1)}.
:- selected(C), max_cost(C), not max_power(C).
top_weapon(C) :- weapon(C), power(C, V), V = #max {V1 : power(C1, V1), weapon(C1)}.
top_armor(C) :- armor(C), power(C, V), V = #max {V1 : power(C1, V1), armor(C1)}.
top_companion(C) :- companion(C), power(C, V), V = #max {V1 : power(C1, V1), companion(C1)}.
:- selected_weapon(C), top_weapon(C), selected_armor(G), top_armor(G), selected_companion(S), top_companion(S).
:- selected(C1), selected(C2), cost(C1, V1), cost(C2, V2), V1 - 250 >= V2.
:- selected_weapon(C), selected_armor(G), power(C, PC), power(G, PG), PG > PC.
:- selected_weapon("Alpha8"), selected_armor("NovaX").
:- selected_companion("FusionDrive"), not selected_weapon("ZetaCore").
Available weapon options for this equip: SwordOfLight, AxeOfStorms, ShadowDagger.
Available armor options for this equip: DragonScale, ElvenCloak, IronPlate.
Available companion device options for this equip: Wolf, Falcon, Golem.
You must pick one and only one weapon for your equip.
You must pick one and only one armor for your equip.
You must pick one and only one companion device for your equip.
Each weapon has a cost: SwordOfLight costs 100, AxeOfStorms costs 80, ShadowDagger costs 60.
Each armor has a cost: DragonScale costs 90, ElvenCloak costs 70, IronPlate costs 50.
Each companion device has a cost: Wolf costs 40, Falcon costs 30, Golem costs 60.
Each weapon has a power value: SwordOfLight is 30, AxeOfStorms is 28, ShadowDagger is 22.
Each armor has a power value: DragonScale is 25, ElvenCloak is 20, IronPlate is 18.
Each companion has a power value: Wolf is 15, Falcon is 12, Golem is 20.
For every selected weapon, add it to selected.
For every selected armor, add it to selected.
For every selected companion, add it to selected.
max_cost holds for the selected part that has the maximum cost.
max_power holds for the selected part that has the maximum power value.
It is required that the most expensive selected part is also the highest in power.
top_weapon holds for the weapon that has the maximum power value.
top_armor holds for the armor that has the maximum power value.
top_companion holds for the companion that has the maximum power value.
It is not allowed to select the top weapon, armor, and companion at the same time.
The cost difference between any two selected components must be less than 250.
Selected GPU performance cannot exceed selected CPU performance.
Alpha8 and NovaX cannot be selected together.
Selecting FusionDrive requires ZetaCore CPU to be selected.

weapon("SwordOfLight"; "AxeOfStorms"; "ShadowDagger").
armor("DragonScale"; "ElvenCloak"; "IronPlate").
companion("Wolf"; "Falcon"; "Golem").
1 { selected_weapon(C) : weapon(C) } 1.
1 { selected_armor(G) : armor(G) } 1.
1 { selected_companion(S) : companion(S) } 1.
cost("SwordOfLight", 100; "AxeOfStorms", 80; "ShadowDagger", 60).
cost("DragonScale", 90; "ElvenCloak", 70; "IronPlate", 50).
cost("Wolf", 40; "Falcon", 30; "Golem", 60).
power("SwordOfLight", 30; "AxeOfStorms", 28; "ShadowDagger", 22).
power("DragonScale", 25; "ElvenCloak", 20; "IronPlate", 18).
power("Wolf", 15; "Falcon", 12; "Golem", 20).
selected(X) :- selected_weapon(X).
selected(X) :- selected_armor(X).
selected(X) :- selected_companion(X).
max_cost(C) :- cost(C, V), V = #max {V1 : cost(C1, V1), selected(C1)}.
max_power(C) :- power(C, V), V = #max {V1 : power(C1, V1), selected(C1)}.
:- selected(C), max_cost(C), not max_power(C).
top_weapon(C) :- weapon(C), power(C, V), V = #max {V1 : power(C1, V1), weapon(C1)}.
top_armor(C) :- armor(C), power(C, V), V = #max {V1 : power(C1, V1), armor(C1)}.
top_companion(C) :- companion(C), power(C, V), V = #max {V1 : power(C1, V1), companion(C1)}.
:- selected_weapon(C), top_weapon(C), selected_armor(G), top_armor(G), selected_companion(S), top_companion(S).
:- selected(C1), selected(C2), cost(C1, V1), cost(C2, V2), V1 - 250 >= V2.
:- selected_weapon(C), selected_armor(G), power(C, PC), power(G, PG), PG > PC.
:- selected_weapon("Alpha8"), selected_armor("NovaX").
:- selected_companion("FusionDrive"), not selected_weapon("ZetaCore").
Select a weapon for your equip from SwordOfLight, AxeOfStorms, or ShadowDagger.
Select a armor for your equip from DragonScale, ElvenCloak, or IronPlate.
Select a companion device for your equip from Wolf, Falcon, or Golem.
Choose a single weapon for your equip from the set of all weapons.
Choose a single armor for your equip from the set of all armors.
Choose a single companion device for your equip from the set of all companion devices.
Assign the following costs to weapons: SwordOfLight=100, AxeOfStorms=80, ShadowDagger=60.
Assign the following costs to armors: DragonScale=90, ElvenCloak=70, IronPlate=50.
Assign the following costs to companion devices: Wolf=40, Falcon=30, Golem=60.
Assign the following power values to weapons: SwordOfLight=30, AxeOfStorms=28, ShadowDagger=22.
Assign the following power values to armors: DragonScale=25, ElvenCloak=20, IronPlate=18.
Assign the following power values to companions: Wolf=15, Falcon=12, Golem=20.
selected is the set of all selected weapon.
selected is the set of all selected armor.
selected is the set of all selected companion.
max_cost marks the selected item with the greatest cost.
max_power marks the selected item with the greatest power value.
No selected component can be the most expensive without also having the highest power.
top_weapon marks the weapon with the greatest power value.
top_armor marks the armor with the greatest power value.
top_companion marks the companion with the greatest power value.
Selecting the highest weapon, armor, and companion together is forbidden.
Selected components cannot differ in cost by 250 or more.
It is not allowed for the GPU to have higher performance than the CPU.
Selecting Alpha8 as CPU and NovaX as GPU is forbidden.
You may not select FusionDrive unless ZetaCore is also chosen as CPU.

COUNT: 3
tree("Maple"; "Birch"; "Oak").
shrub("Boxwood"; "Azalea"; "Hydrangea").
flower("Tulip"; "Rose"; "Daffodil").
1 { selected_tree(C) : tree(C) } 1.
1 { selected_shrub(G) : shrub(G) } 1.
1 { selected_flower(S) : flower(S) } 1.
cost("Maple", 120; "Birch", 100; "Oak", 90).
cost("Boxwood", 60; "Azalea", 50; "Hydrangea", 40).
cost("Tulip", 30; "Rose", 25; "Daffodil", 20).
eco_score("Maple", 15; "Birch", 13; "Oak", 12).
eco_score("Boxwood", 8; "Azalea", 7; "Hydrangea", 6).
eco_score("Tulip", 5; "Rose", 4; "Daffodil", 3).
selected(X) :- selected_tree(X).
selected(X) :- selected_shrub(X).
selected(X) :- selected_flower(X).
max_cost(C) :- cost(C, V), V = #max {V1 : cost(C1, V1), selected(C1)}.
max_eco_score(C) :- eco_score(C, V), V = #max {V1 : eco_score(C1, V1), selected(C1)}.
:- selected(C), max_cost(C), not max_eco_score(C).
top_tree(C) :- tree(C), eco_score(C, V), V = #max {V1 : eco_score(C1, V1), tree(C1)}.
top_shrub(C) :- shrub(C), eco_score(C, V), V = #max {V1 : eco_score(C1, V1), shrub(C1)}.
top_flower(C) :- flower(C), eco_score(C, V), V = #max {V1 : eco_score(C1, V1), flower(C1)}.
:- selected_tree(C), top_tree(C), selected_shrub(G), top_shrub(G), selected_flower(S), top_flower(S).
:- selected(C1), selected(C2), cost(C1, V1), cost(C2, V2), V1 - 250 >= V2.
:- selected_tree(C), selected_shrub(G), eco_score(C, PC), eco_score(G, PG), PG > PC.
:- selected_tree("Alpha8"), selected_shrub("NovaX").
:- selected_flower("FusionDrive"), not selected_tree("ZetaCore").
trees are Maple, Birch, Oak.
shrubs are Boxwood, Azalea, Hydrangea.
flower devices are Tulip, Rose, Daffodil.
Select exactly one tree from all available trees.
Select exactly one shrub from all available shrubs.
Select exactly one flower device from all available flower devices.
tree costs are Maple=120, Birch=100, Oak=90.
shrub costs are Boxwood=60, Azalea=50, Hydrangea=40.
flower device costs are Tulip=30, Rose=25, Daffodil=20.
tree eco_score values: Maple=15, Birch=13, Oak=12.
shrub eco_score values: Boxwood=8, Azalea=7, Hydrangea=6.
flower eco_score values: Tulip=5, Rose=4, Daffodil=3.
selected includes all selected tree.
selected includes all selected shrub.
selected includes all selected flower.
max_cost is true for the selected component with the highest cost.
max_eco_score is true for the selected component with the highest eco_score.
The most expensive selected component must also be the one with the highest eco_score.
top_tree is true for the tree with the highest eco_score.
top_shrub is true for the shrub with the highest eco_score.
top_flower is true for the flower with the highest eco_score.
You may not select all three top-performing components.
No selected component can be more than 250 more expensive than another selected component.
The GPU must not outperform the CPU.
You cannot select Alpha8 CPU with NovaX GPU.
FusionDrive storage cannot be selected unless ZetaCore CPU is also selected.

tree("Maple"; "Birch"; "Oak").
shrub("Boxwood"; "Azalea"; "Hydrangea").
flower("Tulip"; "Rose"; "Daffodil").
1 { selected_tree(C) : tree(C) } 1.
1 { selected_shrub(G) : shrub(G) } 1.
1 { selected_flower(S) : flower(S) } 1.
cost("Maple", 120; "Birch", 100; "Oak", 90).
cost("Boxwood", 60; "Azalea", 50; "Hydrangea", 40).
cost("Tulip", 30; "Rose", 25; "Daffodil", 20).
eco_score("Maple", 15; "Birch", 13; "Oak", 12).
eco_score("Boxwood", 8; "Azalea", 7; "Hydrangea", 6).
eco_score("Tulip", 5; "Rose", 4; "Daffodil", 3).
selected(X) :- selected_tree(X).
selected(X) :- selected_shrub(X).
selected(X) :- selected_flower(X).
max_cost(C) :- cost(C, V), V = #max {V1 : cost(C1, V1), selected(C1)}.
max_eco_score(C) :- eco_score(C, V), V = #max {V1 : eco_score(C1, V1), selected(C1)}.
:- selected(C), max_cost(C), not max_eco_score(C).
top_tree(C) :- tree(C), eco_score(C, V), V = #max {V1 : eco_score(C1, V1), tree(C1)}.
top_shrub(C) :- shrub(C), eco_score(C, V), V = #max {V1 : eco_score(C1, V1), shrub(C1)}.
top_flower(C) :- flower(C), eco_score(C, V), V = #max {V1 : eco_score(C1, V1), flower(C1)}.
:- selected_tree(C), top_tree(C), selected_shrub(G), top_shrub(G), selected_flower(S), top_flower(S).
:- selected(C1), selected(C2), cost(C1, V1), cost(C2, V2), V1 - 250 >= V2.
:- selected_tree(C), selected_shrub(G), eco_score(C, PC), eco_score(G, PG), PG > PC.
:- selected_tree("Alpha8"), selected_shrub("NovaX").
:- selected_flower("FusionDrive"), not selected_tree("ZetaCore").
Available tree options for this design: Maple, Birch, Oak.
Available shrub options for this design: Boxwood, Azalea, Hydrangea.
Available flower device options for this design: Tulip, Rose, Daffodil.
You must pick one and only one tree for your design.
You must pick one and only one shrub for your design.
You must pick one and only one flower device for your design.
Each tree has a cost: Maple costs 120, Birch costs 100, Oak costs 90.
Each shrub has a cost: Boxwood costs 60, Azalea costs 50, Hydrangea costs 40.
Each flower device has a cost: Tulip costs 30, Rose costs 25, Daffodil costs 20.
Each tree has a eco_score value: Maple is 15, Birch is 13, Oak is 12.
Each shrub has a eco_score value: Boxwood is 8, Azalea is 7, Hydrangea is 6.
Each flower has a eco_score value: Tulip is 5, Rose is 4, Daffodil is 3.
For every selected tree, add it to selected.
For every selected shrub, add it to selected.
For every selected flower, add it to selected.
max_cost holds for the selected part that has the maximum cost.
max_eco_score holds for the selected part that has the maximum eco_score value.
It is required that the most expensive selected part is also the highest in eco_score.
top_tree holds for the tree that has the maximum eco_score value.
top_shrub holds for the shrub that has the maximum eco_score value.
top_flower holds for the flower that has the maximum eco_score value.
It is not allowed to select the top tree, shrub, and flower at the same time.
The cost difference between any two selected components must be less than 250.
Selected GPU performance cannot exceed selected CPU performance.
Alpha8 and NovaX cannot be selected together.
Selecting FusionDrive requires ZetaCore CPU to be selected.

tree("Maple"; "Birch"; "Oak").
shrub("Boxwood"; "Azalea"; "Hydrangea").
flower("Tulip"; "Rose"; "Daffodil").
1 { selected_tree(C) : tree(C) } 1.
1 { selected_shrub(G) : shrub(G) } 1.
1 { selected_flower(S) : flower(S) } 1.
cost("Maple", 120; "Birch", 100; "Oak", 90).
cost("Boxwood", 60; "Azalea", 50; "Hydrangea", 40).
cost("Tulip", 30; "Rose", 25; "Daffodil", 20).
eco_score("Maple", 15; "Birch", 13; "Oak", 12).
eco_score("Boxwood", 8; "Azalea", 7; "Hydrangea", 6).
eco_score("Tulip", 5; "Rose", 4; "Daffodil", 3).
selected(X) :- selected_tree(X).
selected(X) :- selected_shrub(X).
selected(X) :- selected_flower(X).
max_cost(C) :- cost(C, V), V = #max {V1 : cost(C1, V1), selected(C1)}.
max_eco_score(C) :- eco_score(C, V), V = #max {V1 : eco_score(C1, V1), selected(C1)}.
:- selected(C), max_cost(C), not max_eco_score(C).
top_tree(C) :- tree(C), eco_score(C, V), V = #max {V1 : eco_score(C1, V1), tree(C1)}.
top_shrub(C) :- shrub(C), eco_score(C, V), V = #max {V1 : eco_score(C1, V1), shrub(C1)}.
top_flower(C) :- flower(C), eco_score(C, V), V = #max {V1 : eco_score(C1, V1), flower(C1)}.
:- selected_tree(C), top_tree(C), selected_shrub(G), top_shrub(G), selected_flower(S), top_flower(S).
:- selected(C1), selected(C2), cost(C1, V1), cost(C2, V2), V1 - 250 >= V2.
:- selected_tree(C), selected_shrub(G), eco_score(C, PC), eco_score(G, PG), PG > PC.
:- selected_tree("Alpha8"), selected_shrub("NovaX").
:- selected_flower("FusionDrive"), not selected_tree("ZetaCore").
Select a tree for your design from Maple, Birch, or Oak.
Select a shrub for your design from Boxwood, Azalea, or Hydrangea.
Select a flower device for your design from Tulip, Rose, or Daffodil.
Choose a single tree for your design from the set of all trees.
Choose a single shrub for your design from the set of all shrubs.
Choose a single flower device for your design from the set of all flower devices.
Assign the following costs to trees: Maple=120, Birch=100, Oak=90.
Assign the following costs to shrubs: Boxwood=60, Azalea=50, Hydrangea=40.
Assign the following costs to flower devices: Tulip=30, Rose=25, Daffodil=20.
Assign the following eco_score values to trees: Maple=15, Birch=13, Oak=12.
Assign the following eco_score values to shrubs: Boxwood=8, Azalea=7, Hydrangea=6.
Assign the following eco_score values to flowers: Tulip=5, Rose=4, Daffodil=3.
selected is the set of all selected tree.
selected is the set of all selected shrub.
selected is the set of all selected flower.
max_cost marks the selected item with the greatest cost.
max_eco_score marks the selected item with the greatest eco_score value.
No selected component can be the most expensive without also having the highest eco_score.
top_tree marks the tree with the greatest eco_score value.
top_shrub marks the shrub with the greatest eco_score value.
top_flower marks the flower with the greatest eco_score value.
Selecting the highest tree, shrub, and flower together is forbidden.
Selected components cannot differ in cost by 250 or more.
It is not allowed for the GPU to have higher performance than the CPU.
Selecting Alpha8 as CPU and NovaX as GPU is forbidden.
You may not select FusionDrive unless ZetaCore is also chosen as CPU.

COUNT: 3
habitat("LunarDome"; "MarsPod"; "AstroCabin").
propulsion("IonDrive"; "FusionThruster"; "ChemicalRocket").
science("Spectrometer"; "Drill"; "Telescope").
1 { selected_habitat(C) : habitat(C) } 1.
1 { selected_propulsion(G) : propulsion(G) } 1.
1 { selected_science(S) : science(S) } 1.
cost("LunarDome", 1000; "MarsPod", 1200; "AstroCabin", 900).
cost("IonDrive", 2000; "FusionThruster", 2500; "ChemicalRocket", 1800).
cost("Spectrometer", 500; "Drill", 700; "Telescope", 600).
mission_value("LunarDome", 80; "MarsPod", 85; "AstroCabin", 75).
mission_value("IonDrive", 95; "FusionThruster", 100; "ChemicalRocket", 90).
mission_value("Spectrometer", 60; "Drill", 65; "Telescope", 70).
selected(X) :- selected_habitat(X).
selected(X) :- selected_propulsion(X).
selected(X) :- selected_science(X).
max_cost(C) :- cost(C, V), V = #max {V1 : cost(C1, V1), selected(C1)}.
max_mission_value(C) :- mission_value(C, V), V = #max {V1 : mission_value(C1, V1), selected(C1)}.
:- selected(C), max_cost(C), not max_mission_value(C).
top_habitat(C) :- habitat(C), mission_value(C, V), V = #max {V1 : mission_value(C1, V1), habitat(C1)}.
top_propulsion(C) :- propulsion(C), mission_value(C, V), V = #max {V1 : mission_value(C1, V1), propulsion(C1)}.
top_science(C) :- science(C), mission_value(C, V), V = #max {V1 : mission_value(C1, V1), science(C1)}.
:- selected_habitat(C), top_habitat(C), selected_propulsion(G), top_propulsion(G), selected_science(S), top_science(S).
:- selected(C1), selected(C2), cost(C1, V1), cost(C2, V2), V1 - 250 >= V2.
:- selected_habitat(C), selected_propulsion(G), mission_value(C, PC), mission_value(G, PG), PG > PC.
:- selected_habitat("Alpha8"), selected_propulsion("NovaX").
:- selected_science("FusionDrive"), not selected_habitat("ZetaCore").
habitats are LunarDome, MarsPod, AstroCabin.
propulsions are IonDrive, FusionThruster, ChemicalRocket.
science devices are Spectrometer, Drill, Telescope.
Select exactly one habitat from all available habitats.
Select exactly one propulsion from all available propulsions.
Select exactly one science device from all available science devices.
habitat costs are LunarDome=1000, MarsPod=1200, AstroCabin=900.
propulsion costs are IonDrive=2000, FusionThruster=2500, ChemicalRocket=1800.
science device costs are Spectrometer=500, Drill=700, Telescope=600.
habitat mission_value values: LunarDome=80, MarsPod=85, AstroCabin=75.
propulsion mission_value values: IonDrive=95, FusionThruster=100, ChemicalRocket=90.
science mission_value values: Spectrometer=60, Drill=65, Telescope=70.
selected includes all selected habitat.
selected includes all selected propulsion.
selected includes all selected science.
max_cost is true for the selected component with the highest cost.
max_mission_value is true for the selected component with the highest mission_value.
The most expensive selected component must also be the one with the highest mission_value.
top_habitat is true for the habitat with the highest mission_value.
top_propulsion is true for the propulsion with the highest mission_value.
top_science is true for the science with the highest mission_value.
You may not select all three top-performing components.
No selected component can be more than 250 more expensive than another selected component.
The GPU must not outperform the CPU.
You cannot select Alpha8 CPU with NovaX GPU.
FusionDrive storage cannot be selected unless ZetaCore CPU is also selected.

habitat("LunarDome"; "MarsPod"; "AstroCabin").
propulsion("IonDrive"; "FusionThruster"; "ChemicalRocket").
science("Spectrometer"; "Drill"; "Telescope").
1 { selected_habitat(C) : habitat(C) } 1.
1 { selected_propulsion(G) : propulsion(G) } 1.
1 { selected_science(S) : science(S) } 1.
cost("LunarDome", 1000; "MarsPod", 1200; "AstroCabin", 900).
cost("IonDrive", 2000; "FusionThruster", 2500; "ChemicalRocket", 1800).
cost("Spectrometer", 500; "Drill", 700; "Telescope", 600).
mission_value("LunarDome", 80; "MarsPod", 85; "AstroCabin", 75).
mission_value("IonDrive", 95; "FusionThruster", 100; "ChemicalRocket", 90).
mission_value("Spectrometer", 60; "Drill", 65; "Telescope", 70).
selected(X) :- selected_habitat(X).
selected(X) :- selected_propulsion(X).
selected(X) :- selected_science(X).
max_cost(C) :- cost(C, V), V = #max {V1 : cost(C1, V1), selected(C1)}.
max_mission_value(C) :- mission_value(C, V), V = #max {V1 : mission_value(C1, V1), selected(C1)}.
:- selected(C), max_cost(C), not max_mission_value(C).
top_habitat(C) :- habitat(C), mission_value(C, V), V = #max {V1 : mission_value(C1, V1), habitat(C1)}.
top_propulsion(C) :- propulsion(C), mission_value(C, V), V = #max {V1 : mission_value(C1, V1), propulsion(C1)}.
top_science(C) :- science(C), mission_value(C, V), V = #max {V1 : mission_value(C1, V1), science(C1)}.
:- selected_habitat(C), top_habitat(C), selected_propulsion(G), top_propulsion(G), selected_science(S), top_science(S).
:- selected(C1), selected(C2), cost(C1, V1), cost(C2, V2), V1 - 250 >= V2.
:- selected_habitat(C), selected_propulsion(G), mission_value(C, PC), mission_value(G, PG), PG > PC.
:- selected_habitat("Alpha8"), selected_propulsion("NovaX").
:- selected_science("FusionDrive"), not selected_habitat("ZetaCore").
Select a habitat for your assemble from LunarDome, MarsPod, or AstroCabin.
Select a propulsion for your assemble from IonDrive, FusionThruster, or ChemicalRocket.
Select a science device for your assemble from Spectrometer, Drill, or Telescope.
Choose a single habitat for your assemble from the set of all habitats.
Choose a single propulsion for your assemble from the set of all propulsions.
Choose a single science device for your assemble from the set of all science devices.
Assign the following costs to habitats: LunarDome=1000, MarsPod=1200, AstroCabin=900.
Assign the following costs to propulsions: IonDrive=2000, FusionThruster=2500, ChemicalRocket=1800.
Assign the following costs to science devices: Spectrometer=500, Drill=700, Telescope=600.
Assign the following mission_value values to habitats: LunarDome=80, MarsPod=85, AstroCabin=75.
Assign the following mission_value values to propulsions: IonDrive=95, FusionThruster=100, ChemicalRocket=90.
Assign the following mission_value values to sciences: Spectrometer=60, Drill=65, Telescope=70.
selected is the set of all selected habitat.
selected is the set of all selected propulsion.
selected is the set of all selected science.
max_cost marks the selected item with the greatest cost.
max_mission_value marks the selected item with the greatest mission_value value.
No selected component can be the most expensive without also having the highest mission_value.
top_habitat marks the habitat with the greatest mission_value value.
top_propulsion marks the propulsion with the greatest mission_value value.
top_science marks the science with the greatest mission_value value.
Selecting the highest habitat, propulsion, and science together is forbidden.
Selected components cannot differ in cost by 250 or more.
It is not allowed for the GPU to have higher performance than the CPU.
Selecting Alpha8 as CPU and NovaX as GPU is forbidden.
You may not select FusionDrive unless ZetaCore is also chosen as CPU.

habitat("LunarDome"; "MarsPod"; "AstroCabin").
propulsion("IonDrive"; "FusionThruster"; "ChemicalRocket").
science("Spectrometer"; "Drill"; "Telescope").
1 { selected_habitat(C) : habitat(C) } 1.
1 { selected_propulsion(G) : propulsion(G) } 1.
1 { selected_science(S) : science(S) } 1.
cost("LunarDome", 1000; "MarsPod", 1200; "AstroCabin", 900).
cost("IonDrive", 2000; "FusionThruster", 2500; "ChemicalRocket", 1800).
cost("Spectrometer", 500; "Drill", 700; "Telescope", 600).
mission_value("LunarDome", 80; "MarsPod", 85; "AstroCabin", 75).
mission_value("IonDrive", 95; "FusionThruster", 100; "ChemicalRocket", 90).
mission_value("Spectrometer", 60; "Drill", 65; "Telescope", 70).
selected(X) :- selected_habitat(X).
selected(X) :- selected_propulsion(X).
selected(X) :- selected_science(X).
max_cost(C) :- cost(C, V), V = #max {V1 : cost(C1, V1), selected(C1)}.
max_mission_value(C) :- mission_value(C, V), V = #max {V1 : mission_value(C1, V1), selected(C1)}.
:- selected(C), max_cost(C), not max_mission_value(C).
top_habitat(C) :- habitat(C), mission_value(C, V), V = #max {V1 : mission_value(C1, V1), habitat(C1)}.
top_propulsion(C) :- propulsion(C), mission_value(C, V), V = #max {V1 : mission_value(C1, V1), propulsion(C1)}.
top_science(C) :- science(C), mission_value(C, V), V = #max {V1 : mission_value(C1, V1), science(C1)}.
:- selected_habitat(C), top_habitat(C), selected_propulsion(G), top_propulsion(G), selected_science(S), top_science(S).
:- selected(C1), selected(C2), cost(C1, V1), cost(C2, V2), V1 - 250 >= V2.
:- selected_habitat(C), selected_propulsion(G), mission_value(C, PC), mission_value(G, PG), PG > PC.
:- selected_habitat("Alpha8"), selected_propulsion("NovaX").
:- selected_science("FusionDrive"), not selected_habitat("ZetaCore").
Available habitat options for this assemble: LunarDome, MarsPod, AstroCabin.
Available propulsion options for this assemble: IonDrive, FusionThruster, ChemicalRocket.
Available science device options for this assemble: Spectrometer, Drill, Telescope.
You must pick one and only one habitat for your assemble.
You must pick one and only one propulsion for your assemble.
You must pick one and only one science device for your assemble.
Each habitat has a cost: LunarDome costs 1000, MarsPod costs 1200, AstroCabin costs 900.
Each propulsion has a cost: IonDrive costs 2000, FusionThruster costs 2500, ChemicalRocket costs 1800.
Each science device has a cost: Spectrometer costs 500, Drill costs 700, Telescope costs 600.
Each habitat has a mission_value value: LunarDome is 80, MarsPod is 85, AstroCabin is 75.
Each propulsion has a mission_value value: IonDrive is 95, FusionThruster is 100, ChemicalRocket is 90.
Each science has a mission_value value: Spectrometer is 60, Drill is 65, Telescope is 70.
For every selected habitat, add it to selected.
For every selected propulsion, add it to selected.
For every selected science, add it to selected.
max_cost holds for the selected part that has the maximum cost.
max_mission_value holds for the selected part that has the maximum mission_value value.
It is required that the most expensive selected part is also the highest in mission_value.
top_habitat holds for the habitat that has the maximum mission_value value.
top_propulsion holds for the propulsion that has the maximum mission_value value.
top_science holds for the science that has the maximum mission_value value.
It is not allowed to select the top habitat, propulsion, and science at the same time.
The cost difference between any two selected components must be less than 250.
Selected GPU performance cannot exceed selected CPU performance.
Alpha8 and NovaX cannot be selected together.
Selecting FusionDrive requires ZetaCore CPU to be selected.

COUNT: 3
